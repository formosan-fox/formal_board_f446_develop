
formal_board_f446_develop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ea0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ffc  08011070  08011070  00021070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801206c  0801206c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801206c  0801206c  0002206c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012074  08012074  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08012074  08012074  00022074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08012080  08012080  00022080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08012088  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  200001dc  08012264  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  08012264  0003065c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003fab8  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c49  00000000  00000000  0006fcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026a0  00000000  00000000  00074910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002600  00000000  00000000  00076fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f56  00000000  00000000  000795b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002366a  00000000  00000000  000a3506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011dc77  00000000  00000000  000c6b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e47e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d160  00000000  00000000  001e4838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011058 	.word	0x08011058

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08011058 	.word	0x08011058

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <_ZN18IMU_3DIM_WSEN_ITDSC1EP17I2C_HandleTypeDefh>:

static const uint32_t I2C_TIMEOUT = 100;

// ***** public funcitions *****

IMU_3DIM_WSEN_ITDS::IMU_3DIM_WSEN_ITDS(I2C_HandleTypeDef* _i2c_handler, uint8_t SAO): i2c_handler(_i2c_handler)
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2201      	movs	r2, #1
 8000f04:	80da      	strh	r2, [r3, #6]
{
    i2c_device_addr = (SAO == 0) ? ITDS_ADDRESS_I2C_0 : ITDS_ADDRESS_I2C_1;
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <_ZN18IMU_3DIM_WSEN_ITDSC1EP17I2C_HandleTypeDefh+0x24>
 8000f0c:	2230      	movs	r2, #48	; 0x30
 8000f0e:	e000      	b.n	8000f12 <_ZN18IMU_3DIM_WSEN_ITDSC1EP17I2C_HandleTypeDefh+0x26>
 8000f10:	2232      	movs	r2, #50	; 0x32
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	711a      	strb	r2, [r3, #4]
}
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_ZN18IMU_3DIM_WSEN_ITDS20isCommunicationReadyEv>:

    return true;
}

bool IMU_3DIM_WSEN_ITDS::isCommunicationReady()
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    uint8_t device_ID = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]

    getDeviceID(&device_ID);
 8000f30:	f107 030f 	add.w	r3, r7, #15
 8000f34:	4619      	mov	r1, r3
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f81a 	bl	8000f70 <_ZN18IMU_3DIM_WSEN_ITDS11getDeviceIDEPh>
	if (device_ID == ITDS_DEVICE_ID_VALUE) {
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	2b44      	cmp	r3, #68	; 0x44
 8000f40:	d107      	bne.n	8000f52 <_ZN18IMU_3DIM_WSEN_ITDS20isCommunicationReadyEv+0x2e>
		debug_print<uint8_t>("WSEN ITDS: device ID = 0x%x. Communication is successful.\r\n", device_ID);
 8000f42:	f107 030f 	add.w	r3, r7, #15
 8000f46:	4619      	mov	r1, r3
 8000f48:	4807      	ldr	r0, [pc, #28]	; (8000f68 <_ZN18IMU_3DIM_WSEN_ITDS20isCommunicationReadyEv+0x44>)
 8000f4a:	f005 fc31 	bl	80067b0 <_Z11debug_printIhEvPKcRKT_>
		return true;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e006      	b.n	8000f60 <_ZN18IMU_3DIM_WSEN_ITDS20isCommunicationReadyEv+0x3c>
	} else {
		debug_print<uint8_t>("WSEN ITDS: device ID = 0x%x. Communication is failed.\r\n", device_ID);
 8000f52:	f107 030f 	add.w	r3, r7, #15
 8000f56:	4619      	mov	r1, r3
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <_ZN18IMU_3DIM_WSEN_ITDS20isCommunicationReadyEv+0x48>)
 8000f5a:	f005 fc29 	bl	80067b0 <_Z11debug_printIhEvPKcRKT_>
		return false;
 8000f5e:	2300      	movs	r3, #0
	}
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	08011298 	.word	0x08011298
 8000f6c:	080112d4 	.word	0x080112d4

08000f70 <_ZN18IMU_3DIM_WSEN_ITDS11getDeviceIDEPh>:

HAL_StatusTypeDef IMU_3DIM_WSEN_ITDS::getDeviceID(uint8_t *device_ID)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
    return ITDS_ReadReg(ITDS_DEVICE_ID_REG, 1, device_ID);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	210f      	movs	r1, #15
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 f805 	bl	8000f90 <_ZN18IMU_3DIM_WSEN_ITDS12ITDS_ReadRegEttPh>
 8000f86:	4603      	mov	r3, r0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <_ZN18IMU_3DIM_WSEN_ITDS12ITDS_ReadRegEttPh>:
        default:            return 0;
    }
}

inline HAL_StatusTypeDef IMU_3DIM_WSEN_ITDS::ITDS_ReadReg(uint16_t regAddr, uint16_t numBytesToRead, uint8_t *buf)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af04      	add	r7, sp, #16
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	817b      	strh	r3, [r7, #10]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	813b      	strh	r3, [r7, #8]
    // HAL_I2C_Mem_Read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t Timeout)
    return HAL_I2C_Mem_Read(i2c_handler, i2c_device_addr, regAddr, i2cMemAddSize, buf, numBytesToRead, I2C_TIMEOUT);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	791b      	ldrb	r3, [r3, #4]
 8000faa:	b299      	uxth	r1, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	88dc      	ldrh	r4, [r3, #6]
 8000fb0:	897a      	ldrh	r2, [r7, #10]
 8000fb2:	2364      	movs	r3, #100	; 0x64
 8000fb4:	9302      	str	r3, [sp, #8]
 8000fb6:	893b      	ldrh	r3, [r7, #8]
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	4623      	mov	r3, r4
 8000fc0:	f006 fcd4 	bl	800796c <HAL_I2C_Mem_Read>
 8000fc4:	4603      	mov	r3, r0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd90      	pop	{r4, r7, pc}

08000fce <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f805 	bl	8001004 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
    }
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3304      	adds	r3, #4
 800103c:	4618      	mov	r0, r3
 800103e:	f00d f871 	bl	800e124 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA4_KcLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001058:	68b8      	ldr	r0, [r7, #8]
 800105a:	f000 fb75 	bl	8001748 <_ZSt7forwardI24ISDS_accOutputDataRate_tEOT_RNSt16remove_referenceIS1_E4typeE>
 800105e:	4603      	mov	r3, r0
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1d1c      	adds	r4, r3, #4
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 fb77 	bl	800175e <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8001070:	4605      	mov	r5, r0
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4618      	mov	r0, r3
 8001078:	f00c ff52 	bl	800df20 <_ZNSaIcEC1Ev>
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	461a      	mov	r2, r3
 8001082:	4629      	mov	r1, r5
 8001084:	4620      	mov	r0, r4
 8001086:	f00d f8ab 	bl	800e1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4618      	mov	r0, r3
 8001090:	f00c ff47 	bl	800df22 <_ZNSaIcED1Ev>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4618      	mov	r0, r3
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}

0800109e <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA8_KcLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800109e:	b5b0      	push	{r4, r5, r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80010aa:	68b8      	ldr	r0, [r7, #8]
 80010ac:	f000 fb4c 	bl	8001748 <_ZSt7forwardI24ISDS_accOutputDataRate_tEOT_RNSt16remove_referenceIS1_E4typeE>
 80010b0:	4603      	mov	r3, r0
 80010b2:	781a      	ldrb	r2, [r3, #0]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	1d1c      	adds	r4, r3, #4
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 fb59 	bl	8001774 <_ZSt7forwardIRA8_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80010c2:	4605      	mov	r5, r0
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00c ff29 	bl	800df20 <_ZNSaIcEC1Ev>
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	461a      	mov	r2, r3
 80010d4:	4629      	mov	r1, r5
 80010d6:	4620      	mov	r0, r4
 80010d8:	f00d f882 	bl	800e1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00c ff1e 	bl	800df22 <_ZNSaIcED1Ev>
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bdb0      	pop	{r4, r5, r7, pc}

080010f0 <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA6_KcLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80010fc:	68b8      	ldr	r0, [r7, #8]
 80010fe:	f000 fb23 	bl	8001748 <_ZSt7forwardI24ISDS_accOutputDataRate_tEOT_RNSt16remove_referenceIS1_E4typeE>
 8001102:	4603      	mov	r3, r0
 8001104:	781a      	ldrb	r2, [r3, #0]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	1d1c      	adds	r4, r3, #4
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 fb3b 	bl	800178a <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8001114:	4605      	mov	r5, r0
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4618      	mov	r0, r3
 800111c:	f00c ff00 	bl	800df20 <_ZNSaIcEC1Ev>
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	461a      	mov	r2, r3
 8001126:	4629      	mov	r1, r5
 8001128:	4620      	mov	r0, r4
 800112a:	f00d f859 	bl	800e1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4618      	mov	r0, r3
 8001134:	f00c fef5 	bl	800df22 <_ZNSaIcED1Ev>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bdb0      	pop	{r4, r5, r7, pc}

08001142 <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA7_KcLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001142:	b5b0      	push	{r4, r5, r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800114e:	68b8      	ldr	r0, [r7, #8]
 8001150:	f000 fafa 	bl	8001748 <_ZSt7forwardI24ISDS_accOutputDataRate_tEOT_RNSt16remove_referenceIS1_E4typeE>
 8001154:	4603      	mov	r3, r0
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	1d1c      	adds	r4, r3, #4
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 fb1d 	bl	80017a0 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8001166:	4605      	mov	r5, r0
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4618      	mov	r0, r3
 800116e:	f00c fed7 	bl	800df20 <_ZNSaIcEC1Ev>
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	461a      	mov	r2, r3
 8001178:	4629      	mov	r1, r5
 800117a:	4620      	mov	r0, r4
 800117c:	f00d f830 	bl	800e1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4618      	mov	r0, r3
 8001186:	f00c fecc 	bl	800df22 <_ZNSaIcED1Ev>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bdb0      	pop	{r4, r5, r7, pc}

08001194 <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA9_KcLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80011a0:	68b8      	ldr	r0, [r7, #8]
 80011a2:	f000 fad1 	bl	8001748 <_ZSt7forwardI24ISDS_accOutputDataRate_tEOT_RNSt16remove_referenceIS1_E4typeE>
 80011a6:	4603      	mov	r3, r0
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	1d1c      	adds	r4, r3, #4
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 faff 	bl	80017b6 <_ZSt7forwardIRA9_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80011b8:	4605      	mov	r5, r0
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4618      	mov	r0, r3
 80011c0:	f00c feae 	bl	800df20 <_ZNSaIcEC1Ev>
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	461a      	mov	r2, r3
 80011ca:	4629      	mov	r1, r5
 80011cc:	4620      	mov	r0, r4
 80011ce:	f00d f807 	bl	800e1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00c fea3 	bl	800df22 <_ZNSaIcED1Ev>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4618      	mov	r0, r3
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bdb0      	pop	{r4, r5, r7, pc}

080011e6 <_ZNSt3mapI24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS0_ESaISt4pairIKS0_S6_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 fb3f 	bl	8001874 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EED1Ev>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
    struct pair
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3304      	adds	r3, #4
 800120c:	4618      	mov	r0, r3
 800120e:	f00c ff89 	bl	800e124 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA4_KcLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800121c:	b5b0      	push	{r4, r5, r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001228:	68b8      	ldr	r0, [r7, #8]
 800122a:	f000 fb38 	bl	800189e <_ZSt7forwardI25ISDS_gyroOutputDataRate_tEOT_RNSt16remove_referenceIS1_E4typeE>
 800122e:	4603      	mov	r3, r0
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1d1c      	adds	r4, r3, #4
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 fa8f 	bl	800175e <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8001240:	4605      	mov	r5, r0
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4618      	mov	r0, r3
 8001248:	f00c fe6a 	bl	800df20 <_ZNSaIcEC1Ev>
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	461a      	mov	r2, r3
 8001252:	4629      	mov	r1, r5
 8001254:	4620      	mov	r0, r4
 8001256:	f00c ffc3 	bl	800e1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4618      	mov	r0, r3
 8001260:	f00c fe5f 	bl	800df22 <_ZNSaIcED1Ev>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bdb0      	pop	{r4, r5, r7, pc}

0800126e <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA8_KcLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800126e:	b5b0      	push	{r4, r5, r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800127a:	68b8      	ldr	r0, [r7, #8]
 800127c:	f000 fb0f 	bl	800189e <_ZSt7forwardI25ISDS_gyroOutputDataRate_tEOT_RNSt16remove_referenceIS1_E4typeE>
 8001280:	4603      	mov	r3, r0
 8001282:	781a      	ldrb	r2, [r3, #0]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	1d1c      	adds	r4, r3, #4
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 fa71 	bl	8001774 <_ZSt7forwardIRA8_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8001292:	4605      	mov	r5, r0
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4618      	mov	r0, r3
 800129a:	f00c fe41 	bl	800df20 <_ZNSaIcEC1Ev>
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	461a      	mov	r2, r3
 80012a4:	4629      	mov	r1, r5
 80012a6:	4620      	mov	r0, r4
 80012a8:	f00c ff9a 	bl	800e1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4618      	mov	r0, r3
 80012b2:	f00c fe36 	bl	800df22 <_ZNSaIcED1Ev>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bdb0      	pop	{r4, r5, r7, pc}

080012c0 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA6_KcLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80012cc:	68b8      	ldr	r0, [r7, #8]
 80012ce:	f000 fae6 	bl	800189e <_ZSt7forwardI25ISDS_gyroOutputDataRate_tEOT_RNSt16remove_referenceIS1_E4typeE>
 80012d2:	4603      	mov	r3, r0
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	1d1c      	adds	r4, r3, #4
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fa53 	bl	800178a <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80012e4:	4605      	mov	r5, r0
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4618      	mov	r0, r3
 80012ec:	f00c fe18 	bl	800df20 <_ZNSaIcEC1Ev>
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	461a      	mov	r2, r3
 80012f6:	4629      	mov	r1, r5
 80012f8:	4620      	mov	r0, r4
 80012fa:	f00c ff71 	bl	800e1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4618      	mov	r0, r3
 8001304:	f00c fe0d 	bl	800df22 <_ZNSaIcED1Ev>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bdb0      	pop	{r4, r5, r7, pc}

08001312 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA7_KcLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001312:	b5b0      	push	{r4, r5, r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800131e:	68b8      	ldr	r0, [r7, #8]
 8001320:	f000 fabd 	bl	800189e <_ZSt7forwardI25ISDS_gyroOutputDataRate_tEOT_RNSt16remove_referenceIS1_E4typeE>
 8001324:	4603      	mov	r3, r0
 8001326:	781a      	ldrb	r2, [r3, #0]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	701a      	strb	r2, [r3, #0]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1d1c      	adds	r4, r3, #4
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 fa35 	bl	80017a0 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8001336:	4605      	mov	r5, r0
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4618      	mov	r0, r3
 800133e:	f00c fdef 	bl	800df20 <_ZNSaIcEC1Ev>
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	461a      	mov	r2, r3
 8001348:	4629      	mov	r1, r5
 800134a:	4620      	mov	r0, r4
 800134c:	f00c ff48 	bl	800e1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4618      	mov	r0, r3
 8001356:	f00c fde4 	bl	800df22 <_ZNSaIcED1Ev>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bdb0      	pop	{r4, r5, r7, pc}

08001364 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA9_KcLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001370:	68b8      	ldr	r0, [r7, #8]
 8001372:	f000 fa94 	bl	800189e <_ZSt7forwardI25ISDS_gyroOutputDataRate_tEOT_RNSt16remove_referenceIS1_E4typeE>
 8001376:	4603      	mov	r3, r0
 8001378:	781a      	ldrb	r2, [r3, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	1d1c      	adds	r4, r3, #4
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fa17 	bl	80017b6 <_ZSt7forwardIRA9_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8001388:	4605      	mov	r5, r0
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4618      	mov	r0, r3
 8001390:	f00c fdc6 	bl	800df20 <_ZNSaIcEC1Ev>
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	461a      	mov	r2, r3
 800139a:	4629      	mov	r1, r5
 800139c:	4620      	mov	r0, r4
 800139e:	f00c ff1f 	bl	800e1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00c fdbb 	bl	800df22 <_ZNSaIcED1Ev>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bdb0      	pop	{r4, r5, r7, pc}

080013b6 <_ZNSt3mapI25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS0_ESaISt4pairIKS0_S6_EEED1Ev>:
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 facb 	bl	800195c <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EED1Ev>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_ZNSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
    struct pair
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3304      	adds	r3, #4
 80013dc:	4618      	mov	r0, r3
 80013de:	f00c fea1 	bl	800e124 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_ZNSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA3_KcLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80013ec:	b5b0      	push	{r4, r5, r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80013f8:	68b8      	ldr	r0, [r7, #8]
 80013fa:	f000 fac4 	bl	8001986 <_ZSt7forwardI19ISDS_accFullScale_tEOT_RNSt16remove_referenceIS1_E4typeE>
 80013fe:	4603      	mov	r3, r0
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	1d1c      	adds	r4, r3, #4
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fac6 	bl	800199c <_ZSt7forwardIRA3_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8001410:	4605      	mov	r5, r0
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4618      	mov	r0, r3
 8001418:	f00c fd82 	bl	800df20 <_ZNSaIcEC1Ev>
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	461a      	mov	r2, r3
 8001422:	4629      	mov	r1, r5
 8001424:	4620      	mov	r0, r4
 8001426:	f00c fedb 	bl	800e1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4618      	mov	r0, r3
 8001430:	f00c fd77 	bl	800df22 <_ZNSaIcED1Ev>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bdb0      	pop	{r4, r5, r7, pc}

0800143e <_ZNSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA4_KcLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800143e:	b5b0      	push	{r4, r5, r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800144a:	68b8      	ldr	r0, [r7, #8]
 800144c:	f000 fa9b 	bl	8001986 <_ZSt7forwardI19ISDS_accFullScale_tEOT_RNSt16remove_referenceIS1_E4typeE>
 8001450:	4603      	mov	r3, r0
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1d1c      	adds	r4, r3, #4
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f97e 	bl	800175e <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8001462:	4605      	mov	r5, r0
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4618      	mov	r0, r3
 800146a:	f00c fd59 	bl	800df20 <_ZNSaIcEC1Ev>
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	461a      	mov	r2, r3
 8001474:	4629      	mov	r1, r5
 8001476:	4620      	mov	r0, r4
 8001478:	f00c feb2 	bl	800e1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4618      	mov	r0, r3
 8001482:	f00c fd4e 	bl	800df22 <_ZNSaIcED1Ev>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bdb0      	pop	{r4, r5, r7, pc}

08001490 <_ZNSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA8_KcLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800149c:	68b8      	ldr	r0, [r7, #8]
 800149e:	f000 fa72 	bl	8001986 <_ZSt7forwardI19ISDS_accFullScale_tEOT_RNSt16remove_referenceIS1_E4typeE>
 80014a2:	4603      	mov	r3, r0
 80014a4:	781a      	ldrb	r2, [r3, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	701a      	strb	r2, [r3, #0]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	1d1c      	adds	r4, r3, #4
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f960 	bl	8001774 <_ZSt7forwardIRA8_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80014b4:	4605      	mov	r5, r0
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4618      	mov	r0, r3
 80014bc:	f00c fd30 	bl	800df20 <_ZNSaIcEC1Ev>
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	461a      	mov	r2, r3
 80014c6:	4629      	mov	r1, r5
 80014c8:	4620      	mov	r0, r4
 80014ca:	f00c fe89 	bl	800e1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00c fd25 	bl	800df22 <_ZNSaIcED1Ev>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bdb0      	pop	{r4, r5, r7, pc}

080014e2 <_ZNSt3mapI19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS0_ESaISt4pairIKS0_S6_EEED1Ev>:
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fab4 	bl	8001a5a <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EED1Ev>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_ZNSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
    struct pair
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3304      	adds	r3, #4
 8001508:	4618      	mov	r0, r3
 800150a:	f00c fe0b 	bl	800e124 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_ZNSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA8_KcLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001524:	68b8      	ldr	r0, [r7, #8]
 8001526:	f000 faad 	bl	8001a84 <_ZSt7forwardI20ISDS_gyroFullScale_tEOT_RNSt16remove_referenceIS1_E4typeE>
 800152a:	4603      	mov	r3, r0
 800152c:	781a      	ldrb	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1d1c      	adds	r4, r3, #4
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f91c 	bl	8001774 <_ZSt7forwardIRA8_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800153c:	4605      	mov	r5, r0
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4618      	mov	r0, r3
 8001544:	f00c fcec 	bl	800df20 <_ZNSaIcEC1Ev>
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	461a      	mov	r2, r3
 800154e:	4629      	mov	r1, r5
 8001550:	4620      	mov	r0, r4
 8001552:	f00c fe45 	bl	800e1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4618      	mov	r0, r3
 800155c:	f00c fce1 	bl	800df22 <_ZNSaIcED1Ev>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bdb0      	pop	{r4, r5, r7, pc}

0800156a <_ZNSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA9_KcLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800156a:	b5b0      	push	{r4, r5, r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001576:	68b8      	ldr	r0, [r7, #8]
 8001578:	f000 fa84 	bl	8001a84 <_ZSt7forwardI20ISDS_gyroFullScale_tEOT_RNSt16remove_referenceIS1_E4typeE>
 800157c:	4603      	mov	r3, r0
 800157e:	781a      	ldrb	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	701a      	strb	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1d1c      	adds	r4, r3, #4
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f914 	bl	80017b6 <_ZSt7forwardIRA9_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800158e:	4605      	mov	r5, r0
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4618      	mov	r0, r3
 8001596:	f00c fcc3 	bl	800df20 <_ZNSaIcEC1Ev>
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	461a      	mov	r2, r3
 80015a0:	4629      	mov	r1, r5
 80015a2:	4620      	mov	r0, r4
 80015a4:	f00c fe1c 	bl	800e1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4618      	mov	r0, r3
 80015ae:	f00c fcb8 	bl	800df22 <_ZNSaIcED1Ev>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bdb0      	pop	{r4, r5, r7, pc}

080015bc <_ZNSt3mapI20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS0_ESaISt4pairIKS0_S6_EEED1Ev>:
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 fabb 	bl	8001b42 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EED1Ev>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_ZN18IMU_6DIM_WSEN_ISDSC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
    {ISDS_gyroFullScale1000dps, "1000 dps"},
    {ISDS_gyroFullScale2000dps, "2000 dps"}
};


IMU_6DIM_WSEN_ISDS::IMU_6DIM_WSEN_ISDS(SPI_HandleTypeDef* _spi_handler, GPIO_TypeDef *_CS_PORT, uint16_t _CS_PIN):
 80015d6:	b480      	push	{r7}
 80015d8:	b085      	sub	sp, #20
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	807b      	strh	r3, [r7, #2]
    spi_handler(_spi_handler), CS_PORT(_CS_PORT), CS_PIN(_CS_PIN)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	819a      	strh	r2, [r3, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2201      	movs	r2, #1
 80015fa:	82da      	strh	r2, [r3, #22]
{
	interface = ISDS_SPI;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
    currentAccFullScale = ISDS_accFullScaleTwoG;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	761a      	strb	r2, [r3, #24]
    currentGyroFullScale = ISDS_gyroFullScale250dps;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	765a      	strb	r2, [r3, #25]
}
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_ZN18IMU_6DIM_WSEN_ISDS20isCommunicationReadyEv>:

	return true;
}

bool IMU_6DIM_WSEN_ISDS::isCommunicationReady()
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    uint8_t device_ID = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]

    getDeviceID(&device_ID);
 8001628:	f107 030f 	add.w	r3, r7, #15
 800162c:	4619      	mov	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f81a 	bl	8001668 <_ZN18IMU_6DIM_WSEN_ISDS11getDeviceIDEPh>
	if (device_ID == ISDS_DEVICE_ID_VALUE) {
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b6a      	cmp	r3, #106	; 0x6a
 8001638:	d107      	bne.n	800164a <_ZN18IMU_6DIM_WSEN_ISDS20isCommunicationReadyEv+0x2e>
		debug_print<uint8_t>("WSEN ISDS: device ID = 0x%x. Communication is successful.\r\n", device_ID);
 800163a:	f107 030f 	add.w	r3, r7, #15
 800163e:	4619      	mov	r1, r3
 8001640:	4807      	ldr	r0, [pc, #28]	; (8001660 <_ZN18IMU_6DIM_WSEN_ISDS20isCommunicationReadyEv+0x44>)
 8001642:	f005 f8b5 	bl	80067b0 <_Z11debug_printIhEvPKcRKT_>
		return true;
 8001646:	2301      	movs	r3, #1
 8001648:	e006      	b.n	8001658 <_ZN18IMU_6DIM_WSEN_ISDS20isCommunicationReadyEv+0x3c>
	} else {
		debug_print<uint8_t>("WSEN ISDS: device ID = 0x%x. Communication is failed.\r\n", device_ID);
 800164a:	f107 030f 	add.w	r3, r7, #15
 800164e:	4619      	mov	r1, r3
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <_ZN18IMU_6DIM_WSEN_ISDS20isCommunicationReadyEv+0x48>)
 8001652:	f005 f8ad 	bl	80067b0 <_Z11debug_printIhEvPKcRKT_>
		return false;
 8001656:	2300      	movs	r3, #0
	}
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	080115b4 	.word	0x080115b4
 8001664:	080115f0 	.word	0x080115f0

08001668 <_ZN18IMU_6DIM_WSEN_ISDS11getDeviceIDEPh>:

HAL_StatusTypeDef IMU_6DIM_WSEN_ISDS::getDeviceID(uint8_t *deviceID)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status = HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]

	// %% Bug %%: The first read returns 0.
    ISDS_ReadReg(ISDS_DEVICE_ID_REG, 1, deviceID);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	2201      	movs	r2, #1
 800167a:	210f      	movs	r1, #15
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f80d 	bl	800169c <_ZN18IMU_6DIM_WSEN_ISDS12ISDS_ReadRegEhtPh>

	// The second read returns a meaningful value.
	status = ISDS_ReadReg(ISDS_DEVICE_ID_REG, 1, deviceID);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2201      	movs	r2, #1
 8001686:	210f      	movs	r1, #15
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f807 	bl	800169c <_ZN18IMU_6DIM_WSEN_ISDS12ISDS_ReadRegEhtPh>
 800168e:	4603      	mov	r3, r0
 8001690:	73fb      	strb	r3, [r7, #15]

    return status;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_ZN18IMU_6DIM_WSEN_ISDS12ISDS_ReadRegEhtPh>:
		default:							return 0;
	}
}

inline HAL_StatusTypeDef IMU_6DIM_WSEN_ISDS::ISDS_ReadReg(uint8_t regAddr, uint16_t numBytesToRead, uint8_t *buf)
{
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b08b      	sub	sp, #44	; 0x2c
 80016a0:	af04      	add	r7, sp, #16
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	460b      	mov	r3, r1
 80016a8:	72fb      	strb	r3, [r7, #11]
 80016aa:	4613      	mov	r3, r2
 80016ac:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	75fb      	strb	r3, [r7, #23]
	uint8_t header;

    // TODO:  Use ifdef, instead of if-else.
	if (interface == ISDS_SPI) {
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d12e      	bne.n	8001718 <_ZN18IMU_6DIM_WSEN_ISDS12ISDS_ReadRegEhtPh+0x7c>
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6898      	ldr	r0, [r3, #8]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	899b      	ldrh	r3, [r3, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	4619      	mov	r1, r3
 80016c6:	f005 fff3 	bl	80076b0 <HAL_GPIO_WritePin>
		header = (regAddr) | (1 << 7);
 80016ca:	7afb      	ldrb	r3, [r7, #11]
 80016cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	75bb      	strb	r3, [r7, #22]
		status = HAL_SPI_Transmit(spi_handler, &header, 1, SPI_TIMEOUT);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6858      	ldr	r0, [r3, #4]
 80016d8:	f107 0116 	add.w	r1, r7, #22
 80016dc:	2364      	movs	r3, #100	; 0x64
 80016de:	2201      	movs	r2, #1
 80016e0:	f009 fc22 	bl	800af28 <HAL_SPI_Transmit>
 80016e4:	4603      	mov	r3, r0
 80016e6:	75fb      	strb	r3, [r7, #23]
		if (status != HAL_OK)
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <_ZN18IMU_6DIM_WSEN_ISDS12ISDS_ReadRegEhtPh+0x56>
			return status;
 80016ee:	7dfb      	ldrb	r3, [r7, #23]
 80016f0:	e026      	b.n	8001740 <_ZN18IMU_6DIM_WSEN_ISDS12ISDS_ReadRegEhtPh+0xa4>
		status = HAL_SPI_Receive(spi_handler, (uint8_t *)buf, numBytesToRead, SPI_TIMEOUT);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6858      	ldr	r0, [r3, #4]
 80016f6:	893a      	ldrh	r2, [r7, #8]
 80016f8:	2364      	movs	r3, #100	; 0x64
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f009 fd50 	bl	800b1a0 <HAL_SPI_Receive>
 8001700:	4603      	mov	r3, r0
 8001702:	75fb      	strb	r3, [r7, #23]
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6898      	ldr	r0, [r3, #8]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	899b      	ldrh	r3, [r3, #12]
 800170c:	2201      	movs	r2, #1
 800170e:	4619      	mov	r1, r3
 8001710:	f005 ffce 	bl	80076b0 <HAL_GPIO_WritePin>
		return status;
 8001714:	7dfb      	ldrb	r3, [r7, #23]
 8001716:	e013      	b.n	8001740 <_ZN18IMU_6DIM_WSEN_ISDS12ISDS_ReadRegEhtPh+0xa4>
	} else {
		return HAL_I2C_Mem_Read(i2c_handler, i2c_device_addr, regAddr, i2cMemAddSize, buf, numBytesToRead, I2C_TIMEOUT);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6918      	ldr	r0, [r3, #16]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	7d1b      	ldrb	r3, [r3, #20]
 8001720:	b299      	uxth	r1, r3
 8001722:	7afb      	ldrb	r3, [r7, #11]
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8adc      	ldrh	r4, [r3, #22]
 800172a:	2364      	movs	r3, #100	; 0x64
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	893b      	ldrh	r3, [r7, #8]
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	4623      	mov	r3, r4
 8001738:	f006 f918 	bl	800796c <HAL_I2C_Mem_Read>
 800173c:	4603      	mov	r3, r0
 800173e:	bf00      	nop
	}
}
 8001740:	4618      	mov	r0, r3
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}

08001748 <_ZSt7forwardI24ISDS_accOutputDataRate_tEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <_ZSt7forwardIRA8_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <_ZSt7forwardIRA9_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_ZNSaISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f9c9 	bl	8001b6c <_ZN9__gnu_cxx13new_allocatorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_ZNSaISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f9c8 	bl	8001b82 <_ZN9__gnu_cxx13new_allocatorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <_ZNSt3mapI24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS0_ESaISt4pairIKS0_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>:
      map(initializer_list<value_type> __l,
 80017fc:	b5b0      	push	{r4, r5, r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	1d38      	adds	r0, r7, #4
 8001806:	e880 0006 	stmia.w	r0, {r1, r2}
 800180a:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 800180c:	68fc      	ldr	r4, [r7, #12]
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f9bf 	bl	8001b98 <_ZNSaISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS9_>
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	461a      	mov	r2, r3
 8001820:	6839      	ldr	r1, [r7, #0]
 8001822:	4620      	mov	r0, r4
 8001824:	f000 f9c6 	bl	8001bb4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EEC1ERKSD_RKSE_>
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ffd9 	bl	80017e4 <_ZNSaISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8001832:	68fc      	ldr	r4, [r7, #12]
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f9da 	bl	8001bf0 <_ZNKSt16initializer_listISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE5beginEv>
 800183c:	4605      	mov	r5, r0
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	4618      	mov	r0, r3
 8001842:	f000 f9e1 	bl	8001c08 <_ZNKSt16initializer_listISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE3endEv>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	4629      	mov	r1, r5
 800184c:	4620      	mov	r0, r4
 800184e:	f000 f9f0 	bl	8001c32 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bdb0      	pop	{r4, r5, r7, pc}

0800185c <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 fa10 	bl	8001c8a <_ZNSaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fa2f 	bl	8001ce0 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_beginEv>
 8001882:	4603      	mov	r3, r0
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 fa0b 	bl	8001ca2 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ffe4 	bl	800185c <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_ZSt7forwardI25ISDS_gyroOutputDataRate_tEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_ZNSaISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 fa1b 	bl	8001cf8 <_ZN9__gnu_cxx13new_allocatorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_ZNSaISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fa1a 	bl	8001d0e <_ZN9__gnu_cxx13new_allocatorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_ZNSt3mapI25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS0_ESaISt4pairIKS0_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>:
      map(initializer_list<value_type> __l,
 80018e4:	b5b0      	push	{r4, r5, r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	1d38      	adds	r0, r7, #4
 80018ee:	e880 0006 	stmia.w	r0, {r1, r2}
 80018f2:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 80018f4:	68fc      	ldr	r4, [r7, #12]
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 fa11 	bl	8001d24 <_ZNSaISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS9_>
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	461a      	mov	r2, r3
 8001908:	6839      	ldr	r1, [r7, #0]
 800190a:	4620      	mov	r0, r4
 800190c:	f000 fa18 	bl	8001d40 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EEC1ERKSD_RKSE_>
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ffd9 	bl	80018cc <_ZNSaISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800191a:	68fc      	ldr	r4, [r7, #12]
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fa2c 	bl	8001d7c <_ZNKSt16initializer_listISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE5beginEv>
 8001924:	4605      	mov	r5, r0
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fa33 	bl	8001d94 <_ZNKSt16initializer_listISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE3endEv>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	4629      	mov	r1, r5
 8001934:	4620      	mov	r0, r4
 8001936:	f000 fa42 	bl	8001dbe <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bdb0      	pop	{r4, r5, r7, pc}

08001944 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fa62 	bl	8001e16 <_ZNSaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 fa81 	bl	8001e6c <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_beginEv>
 800196a:	4603      	mov	r3, r0
 800196c:	4619      	mov	r1, r3
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fa5d 	bl	8001e2e <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ffe4 	bl	8001944 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <_ZSt7forwardI19ISDS_accFullScale_tEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_ZSt7forwardIRA3_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <_ZNSaISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 fa62 	bl	8001e84 <_ZN9__gnu_cxx13new_allocatorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_ZNSaISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 fa61 	bl	8001e9a <_ZN9__gnu_cxx13new_allocatorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <_ZNSt3mapI19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS0_ESaISt4pairIKS0_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>:
      map(initializer_list<value_type> __l,
 80019e2:	b5b0      	push	{r4, r5, r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	1d38      	adds	r0, r7, #4
 80019ec:	e880 0006 	stmia.w	r0, {r1, r2}
 80019f0:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 80019f2:	68fc      	ldr	r4, [r7, #12]
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 fa58 	bl	8001eb0 <_ZNSaISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS9_>
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	461a      	mov	r2, r3
 8001a06:	6839      	ldr	r1, [r7, #0]
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f000 fa5f 	bl	8001ecc <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EEC1ERKSD_RKSE_>
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ffd9 	bl	80019ca <_ZNSaISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8001a18:	68fc      	ldr	r4, [r7, #12]
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fa73 	bl	8001f08 <_ZNKSt16initializer_listISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE5beginEv>
 8001a22:	4605      	mov	r5, r0
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fa7a 	bl	8001f20 <_ZNKSt16initializer_listISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE3endEv>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4629      	mov	r1, r5
 8001a32:	4620      	mov	r0, r4
 8001a34:	f000 fa89 	bl	8001f4a <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bdb0      	pop	{r4, r5, r7, pc}

08001a42 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 faa9 	bl	8001fa2 <_ZNSaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fac8 	bl	8001ff8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_beginEv>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 faa4 	bl	8001fba <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ffe4 	bl	8001a42 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_ZSt7forwardI20ISDS_gyroFullScale_tEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <_ZNSaISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fab4 	bl	8002010 <_ZN9__gnu_cxx13new_allocatorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <_ZNSaISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fab3 	bl	8002026 <_ZN9__gnu_cxx13new_allocatorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_ZNSt3mapI20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS0_ESaISt4pairIKS0_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>:
      map(initializer_list<value_type> __l,
 8001aca:	b5b0      	push	{r4, r5, r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	1d38      	adds	r0, r7, #4
 8001ad4:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ad8:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8001ada:	68fc      	ldr	r4, [r7, #12]
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 faaa 	bl	800203c <_ZNSaISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS9_>
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	461a      	mov	r2, r3
 8001aee:	6839      	ldr	r1, [r7, #0]
 8001af0:	4620      	mov	r0, r4
 8001af2:	f000 fab1 	bl	8002058 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EEC1ERKSD_RKSE_>
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ffd9 	bl	8001ab2 <_ZNSaISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8001b00:	68fc      	ldr	r4, [r7, #12]
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 fac5 	bl	8002094 <_ZNKSt16initializer_listISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE5beginEv>
 8001b0a:	4605      	mov	r5, r0
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 facc 	bl	80020ac <_ZNKSt16initializer_listISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE3endEv>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	4629      	mov	r1, r5
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f000 fadb 	bl	80020d6 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bdb0      	pop	{r4, r5, r7, pc}

08001b2a <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fafb 	bl	800212e <_ZNSaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fb1a 	bl	8002184 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_beginEv>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4619      	mov	r1, r3
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 faf6 	bl	8002146 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ffe4 	bl	8001b2a <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZN9__gnu_cxx13new_allocatorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_ZN9__gnu_cxx13new_allocatorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_ZNSaISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS9_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001ba2:	6839      	ldr	r1, [r7, #0]
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fbdd 	bl	8002364 <_ZN9__gnu_cxx13new_allocatorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSB_>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EEC1ERKSD_RKSE_>:
      _Rb_tree(const _Compare& __comp,
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8001bc0:	68fc      	ldr	r4, [r7, #12]
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 fbd7 	bl	800237c <_ZNSaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1IS9_EERKSaIT_E>
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f000 fbdd 	bl	8002396 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 f852 	bl	8001c8a <_ZNSaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4618      	mov	r0, r3
 8001bea:	371c      	adds	r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd90      	pop	{r4, r7, pc}

08001bf0 <_ZNKSt16initializer_listISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <_ZNKSt16initializer_listISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ffed 	bl	8001bf0 <_ZNKSt16initializer_listISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE5beginEv>
 8001c16:	4604      	mov	r4, r0
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 fbd9 	bl	80023d0 <_ZNKSt16initializer_listISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4sizeEv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4423      	add	r3, r4
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd90      	pop	{r4, r7, pc}

08001c32 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>:
	using __same_value_type
	  = is_same<value_type, typename iterator_traits<_Iter>::value_type>;

      template<typename _InputIterator>
	__enable_if_t<__same_value_type<_InputIterator>::value>
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b088      	sub	sp, #32
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
	{
	  _Alloc_node __an(*this);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	68f9      	ldr	r1, [r7, #12]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 fbcf 	bl	80023e8 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_Alloc_nodeC1ERSF_>
	  for (; __first != __last; ++__first)
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d017      	beq.n	8001c82 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 fbd7 	bl	8002406 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE3endEv>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	61fb      	str	r3, [r7, #28]
 8001c5c:	f107 021c 	add.w	r2, r7, #28
 8001c60:	f107 0318 	add.w	r3, r7, #24
 8001c64:	4611      	mov	r1, r2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 fac1 	bl	80021ee <_ZNSt23_Rb_tree_const_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSt17_Rb_tree_iteratorIS9_E>
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 fbd7 	bl	8002428 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	331c      	adds	r3, #28
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	e7e3      	b.n	8001c4a <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x18>
	}
 8001c82:	bf00      	nop
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_ZNSaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 fbfb 	bl	800248e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d012      	beq.n	8001cd8 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8001cb2:	6838      	ldr	r0, [r7, #0]
 8001cb4:	f000 fbf6 	bl	80024a4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff fff0 	bl	8001ca2 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
	  _Link_type __y = _S_left(__x);
 8001cc2:	6838      	ldr	r0, [r7, #0]
 8001cc4:	f000 fbfa 	bl	80024bc <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001cc8:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001cca:	6839      	ldr	r1, [r7, #0]
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fc01 	bl	80024d4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>
	  __x = __y;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001cd6:	e7e9      	b.n	8001cac <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0xa>
	}
    }
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_ZN9__gnu_cxx13new_allocatorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_ZN9__gnu_cxx13new_allocatorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_ZNSaISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS9_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001d2e:	6839      	ldr	r1, [r7, #0]
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fbe0 	bl	80024f6 <_ZN9__gnu_cxx13new_allocatorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSB_>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EEC1ERKSD_RKSE_>:
      _Rb_tree(const _Compare& __comp,
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8001d4c:	68fc      	ldr	r4, [r7, #12]
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 fbda 	bl	800250e <_ZNSaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1IS9_EERKSaIT_E>
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	4620      	mov	r0, r4
 8001d64:	f000 fbe0 	bl	8002528 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 f852 	bl	8001e16 <_ZNSaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4618      	mov	r0, r3
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd90      	pop	{r4, r7, pc}

08001d7c <_ZNKSt16initializer_listISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <_ZNKSt16initializer_listISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ffed 	bl	8001d7c <_ZNKSt16initializer_listISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE5beginEv>
 8001da2:	4604      	mov	r4, r0
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fbdc 	bl	8002562 <_ZNKSt16initializer_listISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4sizeEv>
 8001daa:	4602      	mov	r2, r0
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4423      	add	r3, r4
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd90      	pop	{r4, r7, pc}

08001dbe <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b088      	sub	sp, #32
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	68f9      	ldr	r1, [r7, #12]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 fbd2 	bl	800257a <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_Alloc_nodeC1ERSF_>
	  for (; __first != __last; ++__first)
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d017      	beq.n	8001e0e <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 fbda 	bl	8002598 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE3endEv>
 8001de4:	4603      	mov	r3, r0
 8001de6:	61fb      	str	r3, [r7, #28]
 8001de8:	f107 021c 	add.w	r2, r7, #28
 8001dec:	f107 0318 	add.w	r3, r7, #24
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fa34 	bl	8002260 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSt17_Rb_tree_iteratorIS9_E>
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	69b9      	ldr	r1, [r7, #24]
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 fbda 	bl	80025ba <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	331c      	adds	r3, #28
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	e7e3      	b.n	8001dd6 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x18>
	}
 8001e0e:	bf00      	nop
 8001e10:	3720      	adds	r7, #32
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <_ZNSaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fbfe 	bl	8002620 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d012      	beq.n	8001e64 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x36>
	  _M_erase(_S_right(__x));
 8001e3e:	6838      	ldr	r0, [r7, #0]
 8001e40:	f000 fbf9 	bl	8002636 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4619      	mov	r1, r3
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff fff0 	bl	8001e2e <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
	  _Link_type __y = _S_left(__x);
 8001e4e:	6838      	ldr	r0, [r7, #0]
 8001e50:	f000 fbfd 	bl	800264e <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001e54:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fc04 	bl	8002666 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>
	  __x = __y;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001e62:	e7e9      	b.n	8001e38 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0xa>
    }
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <_ZN9__gnu_cxx13new_allocatorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <_ZN9__gnu_cxx13new_allocatorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <_ZNSaISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS9_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001eba:	6839      	ldr	r1, [r7, #0]
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fbe3 	bl	8002688 <_ZN9__gnu_cxx13new_allocatorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSB_>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EEC1ERKSD_RKSE_>:
      _Rb_tree(const _Compare& __comp,
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8001ed8:	68fc      	ldr	r4, [r7, #12]
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 fbdd 	bl	80026a0 <_ZNSaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1IS9_EERKSaIT_E>
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	461a      	mov	r2, r3
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f000 fbe3 	bl	80026ba <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f852 	bl	8001fa2 <_ZNSaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4618      	mov	r0, r3
 8001f02:	371c      	adds	r7, #28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd90      	pop	{r4, r7, pc}

08001f08 <_ZNKSt16initializer_listISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_ZNKSt16initializer_listISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ffed 	bl	8001f08 <_ZNKSt16initializer_listISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE5beginEv>
 8001f2e:	4604      	mov	r4, r0
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fbdf 	bl	80026f4 <_ZNKSt16initializer_listISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4sizeEv>
 8001f36:	4602      	mov	r2, r0
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4423      	add	r3, r4
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}

08001f4a <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b088      	sub	sp, #32
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	68f9      	ldr	r1, [r7, #12]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 fbd5 	bl	800270c <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_Alloc_nodeC1ERSF_>
	  for (; __first != __last; ++__first)
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d017      	beq.n	8001f9a <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 fbdd 	bl	800272a <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE3endEv>
 8001f70:	4603      	mov	r3, r0
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	f107 021c 	add.w	r2, r7, #28
 8001f78:	f107 0318 	add.w	r3, r7, #24
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f9a7 	bl	80022d2 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSt17_Rb_tree_iteratorIS9_E>
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	69b9      	ldr	r1, [r7, #24]
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 fbdd 	bl	800274c <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	331c      	adds	r3, #28
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	e7e3      	b.n	8001f62 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x18>
	}
 8001f9a:	bf00      	nop
 8001f9c:	3720      	adds	r7, #32
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <_ZNSaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fc01 	bl	80027b2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d012      	beq.n	8001ff0 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x36>
	  _M_erase(_S_right(__x));
 8001fca:	6838      	ldr	r0, [r7, #0]
 8001fcc:	f000 fbfc 	bl	80027c8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fff0 	bl	8001fba <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
	  _Link_type __y = _S_left(__x);
 8001fda:	6838      	ldr	r0, [r7, #0]
 8001fdc:	f000 fc00 	bl	80027e0 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001fe0:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001fe2:	6839      	ldr	r1, [r7, #0]
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fc07 	bl	80027f8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>
	  __x = __y;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001fee:	e7e9      	b.n	8001fc4 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0xa>
    }
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <_ZN9__gnu_cxx13new_allocatorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_ZN9__gnu_cxx13new_allocatorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_ZNSaISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS9_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002046:	6839      	ldr	r1, [r7, #0]
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fbe6 	bl	800281a <_ZN9__gnu_cxx13new_allocatorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSB_>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EEC1ERKSD_RKSE_>:
      _Rb_tree(const _Compare& __comp,
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8002064:	68fc      	ldr	r4, [r7, #12]
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4618      	mov	r0, r3
 800206e:	f000 fbe0 	bl	8002832 <_ZNSaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1IS9_EERKSaIT_E>
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	461a      	mov	r2, r3
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	4620      	mov	r0, r4
 800207c:	f000 fbe6 	bl	800284c <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	4618      	mov	r0, r3
 8002086:	f000 f852 	bl	800212e <_ZNSaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4618      	mov	r0, r3
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}

08002094 <_ZNKSt16initializer_listISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_ZNKSt16initializer_listISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ffed 	bl	8002094 <_ZNKSt16initializer_listISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE5beginEv>
 80020ba:	4604      	mov	r4, r0
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fbe2 	bl	8002886 <_ZNKSt16initializer_listISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4sizeEv>
 80020c2:	4602      	mov	r2, r0
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4423      	add	r3, r4
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd90      	pop	{r4, r7, pc}

080020d6 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b088      	sub	sp, #32
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	68f9      	ldr	r1, [r7, #12]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 fbd8 	bl	800289e <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_Alloc_nodeC1ERSF_>
	  for (; __first != __last; ++__first)
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d017      	beq.n	8002126 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 fbe0 	bl	80028bc <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE3endEv>
 80020fc:	4603      	mov	r3, r0
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	f107 021c 	add.w	r2, r7, #28
 8002104:	f107 0318 	add.w	r3, r7, #24
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f91a 	bl	8002344 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSt17_Rb_tree_iteratorIS9_E>
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	69b9      	ldr	r1, [r7, #24]
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 fbe0 	bl	80028de <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	331c      	adds	r3, #28
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	e7e3      	b.n	80020ee <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE22_M_insert_range_uniqueIPKS9_EENSt9enable_ifIXsrSt7is_sameIS9_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESM_SM_+0x18>
	}
 8002126:	bf00      	nop
 8002128:	3720      	adds	r7, #32
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_ZNSaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fc04 	bl	8002944 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d012      	beq.n	800217c <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x36>
	  _M_erase(_S_right(__x));
 8002156:	6838      	ldr	r0, [r7, #0]
 8002158:	f000 fbff 	bl	800295a <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 800215c:	4603      	mov	r3, r0
 800215e:	4619      	mov	r1, r3
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff fff0 	bl	8002146 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
	  _Link_type __y = _S_left(__x);
 8002166:	6838      	ldr	r0, [r7, #0]
 8002168:	f000 fc03 	bl	8002972 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 800216c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800216e:	6839      	ldr	r1, [r7, #0]
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 fc0a 	bl	800298a <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>
	  __x = __y;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800217a:	e7e9      	b.n	8002150 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0xa>
    }
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	bf0c      	ite	eq
 80021b2:	2301      	moveq	r3, #1
 80021b4:	2300      	movne	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_ZNKSt4lessI24ISDS_accOutputDataRate_tEclERKS0_S3_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	781a      	ldrb	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	bf34      	ite	cc
 80021dc:	2301      	movcc	r3, #1
 80021de:	2300      	movcs	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <_ZNSt23_Rb_tree_const_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSt17_Rb_tree_iteratorIS9_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <_ZNKSt4lessI25ISDS_gyroOutputDataRate_tEclERKS0_S3_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8002236:	b480      	push	{r7}
 8002238:	b085      	sub	sp, #20
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	bf34      	ite	cc
 800224e:	2301      	movcc	r3, #1
 8002250:	2300      	movcs	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSt17_Rb_tree_iteratorIS9_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	bf0c      	ite	eq
 8002296:	2301      	moveq	r3, #1
 8002298:	2300      	movne	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_ZNKSt4lessI19ISDS_accFullScale_tEclERKS0_S3_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	bf34      	ite	cc
 80022c0:	2301      	movcc	r3, #1
 80022c2:	2300      	movcs	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSt17_Rb_tree_iteratorIS9_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_ZNKSt4lessI20ISDS_gyroFullScale_tEclERKS0_S3_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 800231a:	b480      	push	{r7}
 800231c:	b085      	sub	sp, #20
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	781a      	ldrb	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	bf34      	ite	cc
 8002332:	2301      	movcc	r3, #1
 8002334:	2300      	movcs	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSt17_Rb_tree_iteratorIS9_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_ZN9__gnu_cxx13new_allocatorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSB_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <_ZNSaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1IS9_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f001 f85c 	bl	8003444 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1Ev>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f001 f859 	bl	800345a <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEONSt16remove_referenceIT_E4typeEOSF_>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4619      	mov	r1, r3
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f001 f85f 	bl	8003470 <_ZNSaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSB_>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f001 f868 	bl	800348c <_ZNSt20_Rb_tree_key_compareISt4lessI24ISDS_accOutputDataRate_tEEC1ERKS2_>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3304      	adds	r3, #4
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fe10 	bl	8000fe6 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <_ZNKSt16initializer_listISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4sizeEv>:
      size() const noexcept { return _M_len; }
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_Alloc_nodeC1ERSF_>:
	_Alloc_node(_Rb_tree& __t)
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	1d1a      	adds	r2, r3, #4
 8002412:	f107 030c 	add.w	r3, r7, #12
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fc0b 	bl	8002c34 <_ZNSt17_Rb_tree_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>:
    template<typename _Arg, typename _NodeGen>
#else
    template<typename _NodeGen>
#endif
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002428:	b5b0      	push	{r4, r5, r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af02      	add	r7, sp, #8
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
			const _Val& __v,
#endif
			_NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8002436:	f107 0318 	add.w	r3, r7, #24
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4618      	mov	r0, r3
 800243e:	f001 f831 	bl	80034a4 <_ZNKSt10_Select1stISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS9_>
 8002442:	4603      	mov	r3, r0
 8002444:	f107 0010 	add.w	r0, r7, #16
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	68f9      	ldr	r1, [r7, #12]
 800244c:	f000 fabc 	bl	80029c8 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_>

      if (__res.second)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00f      	beq.n	8002476 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8002456:	693c      	ldr	r4, [r7, #16]
 8002458:	697d      	ldr	r5, [r7, #20]
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f001 f82e 	bl	80034bc <_ZSt7forwardIRKSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8002460:	4602      	mov	r2, r0
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	462a      	mov	r2, r5
 800246a:	4621      	mov	r1, r4
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f001 f830 	bl	80034d2 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>
 8002472:	4603      	mov	r3, r0
			  _GLIBCXX_FORWARD(_Arg, __v),
			  __node_gen);
 8002474:	e007      	b.n	8002486 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	f107 031c 	add.w	r3, r7, #28
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fbd8 	bl	8002c34 <_ZNSt17_Rb_tree_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 8002484:	69fb      	ldr	r3, [r7, #28]
    }
 8002486:	4618      	mov	r0, r3
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bdb0      	pop	{r4, r5, r7, pc}

0800248e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80024de:	6839      	ldr	r1, [r7, #0]
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f001 f83f 	bl	8003564 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>
	_M_put_node(__p);
 80024e6:	6839      	ldr	r1, [r7, #0]
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f001 f850 	bl	800358e <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>
      }
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <_ZN9__gnu_cxx13new_allocatorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSB_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <_ZNSaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1IS9_EERKSaIT_E>:
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f001 f84a 	bl	80035b2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1Ev>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f001 f847 	bl	80035c8 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEONSt16remove_referenceIT_E4typeEOSF_>
 800253a:	4603      	mov	r3, r0
 800253c:	4619      	mov	r1, r3
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f001 f84d 	bl	80035de <_ZNSaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSB_>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	4618      	mov	r0, r3
 800254a:	f001 f856 	bl	80035fa <_ZNSt20_Rb_tree_key_compareISt4lessI25ISDS_gyroOutputDataRate_tEEC1ERKS2_>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3304      	adds	r3, #4
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fd47 	bl	8000fe6 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <_ZNKSt16initializer_listISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4sizeEv>:
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_Alloc_nodeC1ERSF_>:
	_Alloc_node(_Rb_tree& __t)
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	1d1a      	adds	r2, r3, #4
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 fc95 	bl	8002eda <_ZNSt17_Rb_tree_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80025ba:	b5b0      	push	{r4, r5, r7, lr}
 80025bc:	b08a      	sub	sp, #40	; 0x28
 80025be:	af02      	add	r7, sp, #8
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80025c8:	f107 0318 	add.w	r3, r7, #24
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 f81f 	bl	8003612 <_ZNKSt10_Select1stISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS9_>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f107 0010 	add.w	r0, r7, #16
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	68f9      	ldr	r1, [r7, #12]
 80025de:	f000 fb46 	bl	8002c6e <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_>
      if (__res.second)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00f      	beq.n	8002608 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 80025e8:	693c      	ldr	r4, [r7, #16]
 80025ea:	697d      	ldr	r5, [r7, #20]
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f001 f81c 	bl	800362a <_ZSt7forwardIRKSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 80025f2:	4602      	mov	r2, r0
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	4613      	mov	r3, r2
 80025fa:	462a      	mov	r2, r5
 80025fc:	4621      	mov	r1, r4
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f001 f81e 	bl	8003640 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>
 8002604:	4603      	mov	r3, r0
			  __node_gen);
 8002606:	e007      	b.n	8002618 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	f107 031c 	add.w	r3, r7, #28
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fc62 	bl	8002eda <_ZNSt17_Rb_tree_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 8002616:	69fb      	ldr	r3, [r7, #28]
    }
 8002618:	4618      	mov	r0, r3
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bdb0      	pop	{r4, r5, r7, pc}

08002620 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8002670:	6839      	ldr	r1, [r7, #0]
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f001 f82d 	bl	80036d2 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>
	_M_put_node(__p);
 8002678:	6839      	ldr	r1, [r7, #0]
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f001 f83e 	bl	80036fc <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>
      }
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_ZN9__gnu_cxx13new_allocatorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSB_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <_ZNSaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1IS9_EERKSaIT_E>:
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f001 f838 	bl	8003720 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1Ev>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f001 f835 	bl	8003736 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEONSt16remove_referenceIT_E4typeEOSF_>
 80026cc:	4603      	mov	r3, r0
 80026ce:	4619      	mov	r1, r3
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f001 f83b 	bl	800374c <_ZNSaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSB_>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	4618      	mov	r0, r3
 80026dc:	f001 f844 	bl	8003768 <_ZNSt20_Rb_tree_key_compareISt4lessI19ISDS_accFullScale_tEEC1ERKS2_>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3304      	adds	r3, #4
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fc7e 	bl	8000fe6 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_ZNKSt16initializer_listISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4sizeEv>:
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_Alloc_nodeC1ERSF_>:
	_Alloc_node(_Rb_tree& __t)
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	1d1a      	adds	r2, r3, #4
 8002736:	f107 030c 	add.w	r3, r7, #12
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fd1f 	bl	8003180 <_ZNSt17_Rb_tree_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800274c:	b5b0      	push	{r4, r5, r7, lr}
 800274e:	b08a      	sub	sp, #40	; 0x28
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800275a:	f107 0318 	add.w	r3, r7, #24
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4618      	mov	r0, r3
 8002762:	f001 f80d 	bl	8003780 <_ZNKSt10_Select1stISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS9_>
 8002766:	4603      	mov	r3, r0
 8002768:	f107 0010 	add.w	r0, r7, #16
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	68f9      	ldr	r1, [r7, #12]
 8002770:	f000 fbd0 	bl	8002f14 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_>
      if (__res.second)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00f      	beq.n	800279a <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800277a:	693c      	ldr	r4, [r7, #16]
 800277c:	697d      	ldr	r5, [r7, #20]
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f001 f80a 	bl	8003798 <_ZSt7forwardIRKSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8002784:	4602      	mov	r2, r0
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	4613      	mov	r3, r2
 800278c:	462a      	mov	r2, r5
 800278e:	4621      	mov	r1, r4
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f001 f80c 	bl	80037ae <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>
 8002796:	4603      	mov	r3, r0
			  __node_gen);
 8002798:	e007      	b.n	80027aa <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	f107 031c 	add.w	r3, r7, #28
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fcec 	bl	8003180 <_ZNSt17_Rb_tree_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 80027a8:	69fb      	ldr	r3, [r7, #28]
    }
 80027aa:	4618      	mov	r0, r3
 80027ac:	3720      	adds	r7, #32
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bdb0      	pop	{r4, r5, r7, pc}

080027b2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8002802:	6839      	ldr	r1, [r7, #0]
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f001 f81b 	bl	8003840 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>
	_M_put_node(__p);
 800280a:	6839      	ldr	r1, [r7, #0]
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f001 f82c 	bl	800386a <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>
      }
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <_ZN9__gnu_cxx13new_allocatorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSB_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <_ZNSaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1IS9_EERKSaIT_E>:
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f001 f826 	bl	800388e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1Ev>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1ERKSD_OSaISt13_Rb_tree_nodeIS9_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f001 f823 	bl	80038a4 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEONSt16remove_referenceIT_E4typeEOSF_>
 800285e:	4603      	mov	r3, r0
 8002860:	4619      	mov	r1, r3
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f001 f829 	bl	80038ba <_ZNSaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSB_>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	4618      	mov	r0, r3
 800286e:	f001 f832 	bl	80038d6 <_ZNSt20_Rb_tree_key_compareISt4lessI20ISDS_gyroFullScale_tEEC1ERKS2_>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3304      	adds	r3, #4
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fbb5 	bl	8000fe6 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <_ZNKSt16initializer_listISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4sizeEv>:
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_Alloc_nodeC1ERSF_>:
	_Alloc_node(_Rb_tree& __t)
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	1d1a      	adds	r2, r3, #4
 80028c8:	f107 030c 	add.w	r3, r7, #12
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fda9 	bl	8003426 <_ZNSt17_Rb_tree_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80028de:	b5b0      	push	{r4, r5, r7, lr}
 80028e0:	b08a      	sub	sp, #40	; 0x28
 80028e2:	af02      	add	r7, sp, #8
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80028ec:	f107 0318 	add.w	r3, r7, #24
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fffb 	bl	80038ee <_ZNKSt10_Select1stISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS9_>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f107 0010 	add.w	r0, r7, #16
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	68f9      	ldr	r1, [r7, #12]
 8002902:	f000 fc5a 	bl	80031ba <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_>
      if (__res.second)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00f      	beq.n	800292c <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800290c:	693c      	ldr	r4, [r7, #16]
 800290e:	697d      	ldr	r5, [r7, #20]
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fff8 	bl	8003906 <_ZSt7forwardIRKSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8002916:	4602      	mov	r2, r0
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	4613      	mov	r3, r2
 800291e:	462a      	mov	r2, r5
 8002920:	4621      	mov	r1, r4
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fffa 	bl	800391c <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>
 8002928:	4603      	mov	r3, r0
			  __node_gen);
 800292a:	e007      	b.n	800293c <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_insert_unique_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	f107 031c 	add.w	r3, r7, #28
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fd76 	bl	8003426 <_ZNSt17_Rb_tree_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 800293a:	69fb      	ldr	r3, [r7, #28]
    }
 800293c:	4618      	mov	r0, r3
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bdb0      	pop	{r4, r5, r7, pc}

08002944 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8002994:	6839      	ldr	r1, [r7, #0]
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f001 f809 	bl	80039ae <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>
	_M_put_node(__p);
 800299c:	6839      	ldr	r1, [r7, #0]
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f001 f81a 	bl	80039d8 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>
      }
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <_ZNSt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>:
      _M_valptr()
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3310      	adds	r3, #16
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 f82b 	bl	8003a14 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>
 80029be:	4603      	mov	r3, r0
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b08d      	sub	sp, #52	; 0x34
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	4618      	mov	r0, r3
 80029da:	f001 f838 	bl	8003a4e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE13_M_const_castEv>
 80029de:	4603      	mov	r3, r0
 80029e0:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80029e2:	69bc      	ldr	r4, [r7, #24]
 80029e4:	68b8      	ldr	r0, [r7, #8]
 80029e6:	f001 f809 	bl	80039fc <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_M_endEv>
 80029ea:	4603      	mov	r3, r0
 80029ec:	429c      	cmp	r4, r3
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d030      	beq.n	8002a5c <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x94>
	  if (size() > 0
 80029fa:	68b8      	ldr	r0, [r7, #8]
 80029fc:	f001 f838 	bl	8003a70 <_ZNKSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE4sizeEv>
 8002a00:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d013      	beq.n	8002a2e <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x66>
 8002a06:	68bc      	ldr	r4, [r7, #8]
 8002a08:	68b8      	ldr	r0, [r7, #8]
 8002a0a:	f001 f83d 	bl	8003a88 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f001 f844 	bl	8003aa0 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f7ff fbd0 	bl	80021c4 <_ZNKSt4lessI24ISDS_accOutputDataRate_tEclERKS0_S3_>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x66>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x68>
 8002a2e:	2300      	movs	r3, #0
	  if (size() > 0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00c      	beq.n	8002a4e <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	68b8      	ldr	r0, [r7, #8]
 8002a3a:	f001 f825 	bl	8003a88 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	f107 031c 	add.w	r3, r7, #28
 8002a44:	4619      	mov	r1, r3
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f001 f836 	bl	8003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8002a4c:	e0db      	b.n	8002c06 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f001 f845 	bl	8003ae4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_>
 8002a5a:	e0d4      	b.n	8002c06 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8002a5c:	68bc      	ldr	r4, [r7, #8]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 f81d 	bl	8003aa0 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6839      	ldr	r1, [r7, #0]
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f7ff fba9 	bl	80021c4 <_ZNKSt4lessI24ISDS_accOutputDataRate_tEclERKS0_S3_>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d057      	beq.n	8002b28 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x160>
	  iterator __before = __pos;
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8002a7c:	69bc      	ldr	r4, [r7, #24]
 8002a7e:	68b8      	ldr	r0, [r7, #8]
 8002a80:	f001 f8b5 	bl	8003bee <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_leftmostEv>
 8002a84:	4603      	mov	r3, r0
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	429c      	cmp	r4, r3
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00d      	beq.n	8002ab2 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8002a96:	68b8      	ldr	r0, [r7, #8]
 8002a98:	f001 f8a9 	bl	8003bee <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_leftmostEv>
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	68b8      	ldr	r0, [r7, #8]
 8002aa0:	f001 f8a5 	bl	8003bee <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_leftmostEv>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f001 f8ab 	bl	8003c06 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8002ab0:	e0a9      	b.n	8002c06 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8002ab2:	68bc      	ldr	r4, [r7, #8]
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f001 f8bd 	bl	8003c38 <_ZNSt17_Rb_tree_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEmmEv>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 ffec 	bl	8003aa0 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f7ff fb78 	bl	80021c4 <_ZNKSt4lessI24ISDS_accOutputDataRate_tEclERKS0_S3_>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d01f      	beq.n	8002b1a <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fce1 	bl	80024a4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x140>
		return _Res(0, __before._M_node);
 8002af2:	2300      	movs	r3, #0
 8002af4:	623b      	str	r3, [r7, #32]
 8002af6:	f107 0214 	add.w	r2, r7, #20
 8002afa:	f107 0320 	add.w	r3, r7, #32
 8002afe:	4619      	mov	r1, r3
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 ffd9 	bl	8003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8002b06:	e07e      	b.n	8002c06 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8002b08:	f107 0218 	add.w	r2, r7, #24
 8002b0c:	f107 0318 	add.w	r3, r7, #24
 8002b10:	4619      	mov	r1, r3
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f001 f877 	bl	8003c06 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8002b18:	e075      	b.n	8002c06 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 ffdf 	bl	8003ae4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_>
 8002b26:	e06e      	b.n	8002c06 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8002b28:	68bc      	ldr	r4, [r7, #8]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 ffb7 	bl	8003aa0 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002b32:	4603      	mov	r3, r0
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	4619      	mov	r1, r3
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f7ff fb43 	bl	80021c4 <_ZNKSt4lessI24ISDS_accOutputDataRate_tEclERKS0_S3_>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d056      	beq.n	8002bf2 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x22a>
	  iterator __after = __pos;
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8002b48:	69bc      	ldr	r4, [r7, #24]
 8002b4a:	68b8      	ldr	r0, [r7, #8]
 8002b4c:	f000 ff9c 	bl	8003a88 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>
 8002b50:	4603      	mov	r3, r0
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	429c      	cmp	r4, r3
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00c      	beq.n	8002b7c <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	68b8      	ldr	r0, [r7, #8]
 8002b68:	f000 ff8e 	bl	8003a88 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b72:	4619      	mov	r1, r3
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 ff9f 	bl	8003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8002b7a:	e044      	b.n	8002c06 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8002b7c:	68bc      	ldr	r4, [r7, #8]
 8002b7e:	f107 0310 	add.w	r3, r7, #16
 8002b82:	4618      	mov	r0, r3
 8002b84:	f001 f869 	bl	8003c5a <_ZNSt17_Rb_tree_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEppEv>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 ff87 	bl	8003aa0 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461a      	mov	r2, r3
 8002b96:	6839      	ldr	r1, [r7, #0]
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f7ff fb13 	bl	80021c4 <_ZNKSt4lessI24ISDS_accOutputDataRate_tEclERKS0_S3_>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d01f      	beq.n	8002be4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fc7c 	bl	80024a4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc0:	f107 0218 	add.w	r2, r7, #24
 8002bc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bc8:	4619      	mov	r1, r3
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 ff74 	bl	8003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8002bd0:	e019      	b.n	8002c06 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8002bd2:	f107 0210 	add.w	r2, r7, #16
 8002bd6:	f107 0310 	add.w	r3, r7, #16
 8002bda:	4619      	mov	r1, r3
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f001 f812 	bl	8003c06 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8002be2:	e010      	b.n	8002c06 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 ff7a 	bl	8003ae4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_>
 8002bf0:	e009      	b.n	8002c06 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002bfa:	f107 0318 	add.w	r3, r7, #24
 8002bfe:	4619      	mov	r1, r3
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f001 f83b 	bl	8003c7c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	3734      	adds	r7, #52	; 0x34
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd90      	pop	{r4, r7, pc}

08002c0e <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>:
      _S_key(_Const_Link_type __x)
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f001 f846 	bl	8003ca8 <_ZNKSt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	f107 030c 	add.w	r3, r7, #12
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 fc3d 	bl	80034a4 <_ZNKSt10_Select1stISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS9_>
 8002c2a:	4603      	mov	r3, r0
      }
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <_ZNSt17_Rb_tree_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <_ZNSt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>:
      _M_valptr()
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3310      	adds	r3, #16
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 f83c 	bl	8003cdc <_ZN9__gnu_cxx16__aligned_membufISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>
 8002c64:	4603      	mov	r3, r0
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002c6e:	b590      	push	{r4, r7, lr}
 8002c70:	b08d      	sub	sp, #52	; 0x34
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8002c7c:	1d3b      	adds	r3, r7, #4
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f001 f849 	bl	8003d16 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE13_M_const_castEv>
 8002c84:	4603      	mov	r3, r0
 8002c86:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8002c88:	69bc      	ldr	r4, [r7, #24]
 8002c8a:	68b8      	ldr	r0, [r7, #8]
 8002c8c:	f001 f81a 	bl	8003cc4 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_M_endEv>
 8002c90:	4603      	mov	r3, r0
 8002c92:	429c      	cmp	r4, r3
 8002c94:	bf0c      	ite	eq
 8002c96:	2301      	moveq	r3, #1
 8002c98:	2300      	movne	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d030      	beq.n	8002d02 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x94>
	  if (size() > 0
 8002ca0:	68b8      	ldr	r0, [r7, #8]
 8002ca2:	f001 f849 	bl	8003d38 <_ZNKSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE4sizeEv>
 8002ca6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d013      	beq.n	8002cd4 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x66>
 8002cac:	68bc      	ldr	r4, [r7, #8]
 8002cae:	68b8      	ldr	r0, [r7, #8]
 8002cb0:	f001 f84e 	bl	8003d50 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 f855 	bl	8003d68 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	f7ff fab6 	bl	8002236 <_ZNKSt4lessI25ISDS_gyroOutputDataRate_tEclERKS0_S3_>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x66>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x68>
 8002cd4:	2300      	movs	r3, #0
	  if (size() > 0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00c      	beq.n	8002cf4 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	68b8      	ldr	r0, [r7, #8]
 8002ce0:	f001 f836 	bl	8003d50 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	f107 031c 	add.w	r3, r7, #28
 8002cea:	4619      	mov	r1, r3
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 fee3 	bl	8003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8002cf2:	e0db      	b.n	8002eac <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 f840 	bl	8003d80 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_>
 8002d00:	e0d4      	b.n	8002eac <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8002d02:	68bc      	ldr	r4, [r7, #8]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f001 f82e 	bl	8003d68 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	461a      	mov	r2, r3
 8002d10:	6839      	ldr	r1, [r7, #0]
 8002d12:	4620      	mov	r0, r4
 8002d14:	f7ff fa8f 	bl	8002236 <_ZNKSt4lessI25ISDS_gyroOutputDataRate_tEclERKS0_S3_>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d057      	beq.n	8002dce <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x160>
	  iterator __before = __pos;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8002d22:	69bc      	ldr	r4, [r7, #24]
 8002d24:	68b8      	ldr	r0, [r7, #8]
 8002d26:	f001 f8b0 	bl	8003e8a <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_leftmostEv>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	429c      	cmp	r4, r3
 8002d30:	bf0c      	ite	eq
 8002d32:	2301      	moveq	r3, #1
 8002d34:	2300      	movne	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00d      	beq.n	8002d58 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8002d3c:	68b8      	ldr	r0, [r7, #8]
 8002d3e:	f001 f8a4 	bl	8003e8a <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_leftmostEv>
 8002d42:	4604      	mov	r4, r0
 8002d44:	68b8      	ldr	r0, [r7, #8]
 8002d46:	f001 f8a0 	bl	8003e8a <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_leftmostEv>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4621      	mov	r1, r4
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 ff58 	bl	8003c06 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8002d56:	e0a9      	b.n	8002eac <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8002d58:	68bc      	ldr	r4, [r7, #8]
 8002d5a:	f107 0314 	add.w	r3, r7, #20
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 f89f 	bl	8003ea2 <_ZNSt17_Rb_tree_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEmmEv>
 8002d64:	4603      	mov	r3, r0
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fffd 	bl	8003d68 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	4619      	mov	r1, r3
 8002d74:	4620      	mov	r0, r4
 8002d76:	f7ff fa5e 	bl	8002236 <_ZNKSt4lessI25ISDS_gyroOutputDataRate_tEclERKS0_S3_>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01f      	beq.n	8002dc0 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fc57 	bl	8002636 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x140>
		return _Res(0, __before._M_node);
 8002d98:	2300      	movs	r3, #0
 8002d9a:	623b      	str	r3, [r7, #32]
 8002d9c:	f107 0214 	add.w	r2, r7, #20
 8002da0:	f107 0320 	add.w	r3, r7, #32
 8002da4:	4619      	mov	r1, r3
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fe86 	bl	8003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8002dac:	e07e      	b.n	8002eac <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8002dae:	f107 0218 	add.w	r2, r7, #24
 8002db2:	f107 0318 	add.w	r3, r7, #24
 8002db6:	4619      	mov	r1, r3
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 ff24 	bl	8003c06 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8002dbe:	e075      	b.n	8002eac <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 ffda 	bl	8003d80 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_>
 8002dcc:	e06e      	b.n	8002eac <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8002dce:	68bc      	ldr	r4, [r7, #8]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 ffc8 	bl	8003d68 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4620      	mov	r0, r4
 8002de0:	f7ff fa29 	bl	8002236 <_ZNKSt4lessI25ISDS_gyroOutputDataRate_tEclERKS0_S3_>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d056      	beq.n	8002e98 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x22a>
	  iterator __after = __pos;
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8002dee:	69bc      	ldr	r4, [r7, #24]
 8002df0:	68b8      	ldr	r0, [r7, #8]
 8002df2:	f000 ffad 	bl	8003d50 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>
 8002df6:	4603      	mov	r3, r0
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	429c      	cmp	r4, r3
 8002dfc:	bf0c      	ite	eq
 8002dfe:	2301      	moveq	r3, #1
 8002e00:	2300      	movne	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00c      	beq.n	8002e22 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 8002e08:	2300      	movs	r3, #0
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0c:	68b8      	ldr	r0, [r7, #8]
 8002e0e:	f000 ff9f 	bl	8003d50 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>
 8002e12:	4602      	mov	r2, r0
 8002e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e18:	4619      	mov	r1, r3
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 fe4c 	bl	8003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8002e20:	e044      	b.n	8002eac <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8002e22:	68bc      	ldr	r4, [r7, #8]
 8002e24:	f107 0310 	add.w	r3, r7, #16
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f001 f84b 	bl	8003ec4 <_ZNSt17_Rb_tree_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEppEv>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 ff98 	bl	8003d68 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	6839      	ldr	r1, [r7, #0]
 8002e3e:	4620      	mov	r0, r4
 8002e40:	f7ff f9f9 	bl	8002236 <_ZNKSt4lessI25ISDS_gyroOutputDataRate_tEclERKS0_S3_>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d01f      	beq.n	8002e8a <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fbf2 	bl	8002636 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf0c      	ite	eq
 8002e58:	2301      	moveq	r3, #1
 8002e5a:	2300      	movne	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 8002e62:	2300      	movs	r3, #0
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e66:	f107 0218 	add.w	r2, r7, #24
 8002e6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e6e:	4619      	mov	r1, r3
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fe21 	bl	8003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8002e76:	e019      	b.n	8002eac <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8002e78:	f107 0210 	add.w	r2, r7, #16
 8002e7c:	f107 0310 	add.w	r3, r7, #16
 8002e80:	4619      	mov	r1, r3
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 febf 	bl	8003c06 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8002e88:	e010      	b.n	8002eac <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 ff75 	bl	8003d80 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_>
 8002e96:	e009      	b.n	8002eac <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 8002e98:	2300      	movs	r3, #0
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e9c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002ea0:	f107 0318 	add.w	r3, r7, #24
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fee8 	bl	8003c7c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	3734      	adds	r7, #52	; 0x34
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd90      	pop	{r4, r7, pc}

08002eb4 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>:
      _S_key(_Const_Link_type __x)
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f001 f812 	bl	8003ee6 <_ZNKSt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	f107 030c 	add.w	r3, r7, #12
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fba1 	bl	8003612 <_ZNKSt10_Select1stISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS9_>
 8002ed0:	4603      	mov	r3, r0
      }
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <_ZNSt17_Rb_tree_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <_ZNSt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>:
      _M_valptr()
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3310      	adds	r3, #16
 8002f04:	4618      	mov	r0, r3
 8002f06:	f001 f808 	bl	8003f1a <_ZN9__gnu_cxx16__aligned_membufISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b08d      	sub	sp, #52	; 0x34
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	4618      	mov	r0, r3
 8002f26:	f001 f815 	bl	8003f54 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE13_M_const_castEv>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8002f2e:	69bc      	ldr	r4, [r7, #24]
 8002f30:	68b8      	ldr	r0, [r7, #8]
 8002f32:	f000 ffe6 	bl	8003f02 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_M_endEv>
 8002f36:	4603      	mov	r3, r0
 8002f38:	429c      	cmp	r4, r3
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d030      	beq.n	8002fa8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x94>
	  if (size() > 0
 8002f46:	68b8      	ldr	r0, [r7, #8]
 8002f48:	f001 f815 	bl	8003f76 <_ZNKSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE4sizeEv>
 8002f4c:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d013      	beq.n	8002f7a <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x66>
 8002f52:	68bc      	ldr	r4, [r7, #8]
 8002f54:	68b8      	ldr	r0, [r7, #8]
 8002f56:	f001 f81a 	bl	8003f8e <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f001 f821 	bl	8003fa6 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002f64:	4603      	mov	r3, r0
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f7ff f99c 	bl	80022a8 <_ZNKSt4lessI19ISDS_accFullScale_tEclERKS0_S3_>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x66>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x68>
 8002f7a:	2300      	movs	r3, #0
	  if (size() > 0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00c      	beq.n	8002f9a <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	68b8      	ldr	r0, [r7, #8]
 8002f86:	f001 f802 	bl	8003f8e <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	f107 031c 	add.w	r3, r7, #28
 8002f90:	4619      	mov	r1, r3
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fd90 	bl	8003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8002f98:	e0db      	b.n	8003152 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f001 f80c 	bl	8003fbe <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_>
 8002fa6:	e0d4      	b.n	8003152 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8002fa8:	68bc      	ldr	r4, [r7, #8]
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fffa 	bl	8003fa6 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	6839      	ldr	r1, [r7, #0]
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f7ff f975 	bl	80022a8 <_ZNKSt4lessI19ISDS_accFullScale_tEclERKS0_S3_>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d057      	beq.n	8003074 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x160>
	  iterator __before = __pos;
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8002fc8:	69bc      	ldr	r4, [r7, #24]
 8002fca:	68b8      	ldr	r0, [r7, #8]
 8002fcc:	f001 f87c 	bl	80040c8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_leftmostEv>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	429c      	cmp	r4, r3
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00d      	beq.n	8002ffe <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8002fe2:	68b8      	ldr	r0, [r7, #8]
 8002fe4:	f001 f870 	bl	80040c8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_leftmostEv>
 8002fe8:	4604      	mov	r4, r0
 8002fea:	68b8      	ldr	r0, [r7, #8]
 8002fec:	f001 f86c 	bl	80040c8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_leftmostEv>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fe05 	bl	8003c06 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8002ffc:	e0a9      	b.n	8003152 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8002ffe:	68bc      	ldr	r4, [r7, #8]
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	4618      	mov	r0, r3
 8003006:	f001 f86b 	bl	80040e0 <_ZNSt17_Rb_tree_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEmmEv>
 800300a:	4603      	mov	r3, r0
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 ffc9 	bl	8003fa6 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003014:	4603      	mov	r3, r0
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	4619      	mov	r1, r3
 800301a:	4620      	mov	r0, r4
 800301c:	f7ff f944 	bl	80022a8 <_ZNKSt4lessI19ISDS_accFullScale_tEclERKS0_S3_>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01f      	beq.n	8003066 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fbcd 	bl	80027c8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x140>
		return _Res(0, __before._M_node);
 800303e:	2300      	movs	r3, #0
 8003040:	623b      	str	r3, [r7, #32]
 8003042:	f107 0214 	add.w	r2, r7, #20
 8003046:	f107 0320 	add.w	r3, r7, #32
 800304a:	4619      	mov	r1, r3
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fd33 	bl	8003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003052:	e07e      	b.n	8003152 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8003054:	f107 0218 	add.w	r2, r7, #24
 8003058:	f107 0318 	add.w	r3, r7, #24
 800305c:	4619      	mov	r1, r3
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fdd1 	bl	8003c06 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003064:	e075      	b.n	8003152 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 ffa6 	bl	8003fbe <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_>
 8003072:	e06e      	b.n	8003152 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8003074:	68bc      	ldr	r4, [r7, #8]
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	4618      	mov	r0, r3
 800307a:	f000 ff94 	bl	8003fa6 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800307e:	4603      	mov	r3, r0
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	4619      	mov	r1, r3
 8003084:	4620      	mov	r0, r4
 8003086:	f7ff f90f 	bl	80022a8 <_ZNKSt4lessI19ISDS_accFullScale_tEclERKS0_S3_>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d056      	beq.n	800313e <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x22a>
	  iterator __after = __pos;
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8003094:	69bc      	ldr	r4, [r7, #24]
 8003096:	68b8      	ldr	r0, [r7, #8]
 8003098:	f000 ff79 	bl	8003f8e <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>
 800309c:	4603      	mov	r3, r0
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	429c      	cmp	r4, r3
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00c      	beq.n	80030c8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
 80030b2:	68b8      	ldr	r0, [r7, #8]
 80030b4:	f000 ff6b 	bl	8003f8e <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>
 80030b8:	4602      	mov	r2, r0
 80030ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030be:	4619      	mov	r1, r3
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fcf9 	bl	8003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80030c6:	e044      	b.n	8003152 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80030c8:	68bc      	ldr	r4, [r7, #8]
 80030ca:	f107 0310 	add.w	r3, r7, #16
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 f817 	bl	8004102 <_ZNSt17_Rb_tree_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEppEv>
 80030d4:	4603      	mov	r3, r0
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 ff64 	bl	8003fa6 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	6839      	ldr	r1, [r7, #0]
 80030e4:	4620      	mov	r0, r4
 80030e6:	f7ff f8df 	bl	80022a8 <_ZNKSt4lessI19ISDS_accFullScale_tEclERKS0_S3_>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01f      	beq.n	8003130 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fb68 	bl	80027c8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	bf0c      	ite	eq
 80030fe:	2301      	moveq	r3, #1
 8003100:	2300      	movne	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00a      	beq.n	800311e <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 8003108:	2300      	movs	r3, #0
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
 800310c:	f107 0218 	add.w	r2, r7, #24
 8003110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003114:	4619      	mov	r1, r3
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fcce 	bl	8003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800311c:	e019      	b.n	8003152 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800311e:	f107 0210 	add.w	r2, r7, #16
 8003122:	f107 0310 	add.w	r3, r7, #16
 8003126:	4619      	mov	r1, r3
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fd6c 	bl	8003c06 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800312e:	e010      	b.n	8003152 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	4618      	mov	r0, r3
 8003138:	f000 ff41 	bl	8003fbe <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_>
 800313c:	e009      	b.n	8003152 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 800313e:	2300      	movs	r3, #0
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003142:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003146:	f107 0318 	add.w	r3, r7, #24
 800314a:	4619      	mov	r1, r3
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fd95 	bl	8003c7c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	3734      	adds	r7, #52	; 0x34
 8003156:	46bd      	mov	sp, r7
 8003158:	bd90      	pop	{r4, r7, pc}

0800315a <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>:
      _S_key(_Const_Link_type __x)
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 ffde 	bl	8004124 <_ZNKSt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 8003168:	4602      	mov	r2, r0
 800316a:	f107 030c 	add.w	r3, r7, #12
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fb05 	bl	8003780 <_ZNKSt10_Select1stISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS9_>
 8003176:	4603      	mov	r3, r0
      }
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <_ZNSt17_Rb_tree_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <_ZNSt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>:
      _M_valptr()
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3310      	adds	r3, #16
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 ffd4 	bl	8004158 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>
 80031b0:	4603      	mov	r3, r0
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80031ba:	b590      	push	{r4, r7, lr}
 80031bc:	b08d      	sub	sp, #52	; 0x34
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80031c8:	1d3b      	adds	r3, r7, #4
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 ffe1 	bl	8004192 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE13_M_const_castEv>
 80031d0:	4603      	mov	r3, r0
 80031d2:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80031d4:	69bc      	ldr	r4, [r7, #24]
 80031d6:	68b8      	ldr	r0, [r7, #8]
 80031d8:	f000 ffb2 	bl	8004140 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_M_endEv>
 80031dc:	4603      	mov	r3, r0
 80031de:	429c      	cmp	r4, r3
 80031e0:	bf0c      	ite	eq
 80031e2:	2301      	moveq	r3, #1
 80031e4:	2300      	movne	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d030      	beq.n	800324e <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x94>
	  if (size() > 0
 80031ec:	68b8      	ldr	r0, [r7, #8]
 80031ee:	f000 ffe1 	bl	80041b4 <_ZNKSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE4sizeEv>
 80031f2:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d013      	beq.n	8003220 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x66>
 80031f8:	68bc      	ldr	r4, [r7, #8]
 80031fa:	68b8      	ldr	r0, [r7, #8]
 80031fc:	f000 ffe6 	bl	80041cc <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>
 8003200:	4603      	mov	r3, r0
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f000 ffed 	bl	80041e4 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800320a:	4603      	mov	r3, r0
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	4619      	mov	r1, r3
 8003210:	4620      	mov	r0, r4
 8003212:	f7ff f882 	bl	800231a <_ZNKSt4lessI20ISDS_gyroFullScale_tEclERKS0_S3_>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x66>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x68>
 8003220:	2300      	movs	r3, #0
	  if (size() > 0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00c      	beq.n	8003240 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	68b8      	ldr	r0, [r7, #8]
 800322c:	f000 ffce 	bl	80041cc <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>
 8003230:	4602      	mov	r2, r0
 8003232:	f107 031c 	add.w	r3, r7, #28
 8003236:	4619      	mov	r1, r3
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 fc3d 	bl	8003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800323e:	e0db      	b.n	80033f8 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 ffd8 	bl	80041fc <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_>
 800324c:	e0d4      	b.n	80033f8 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800324e:	68bc      	ldr	r4, [r7, #8]
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 ffc6 	bl	80041e4 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	6839      	ldr	r1, [r7, #0]
 800325e:	4620      	mov	r0, r4
 8003260:	f7ff f85b 	bl	800231a <_ZNKSt4lessI20ISDS_gyroFullScale_tEclERKS0_S3_>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d057      	beq.n	800331a <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x160>
	  iterator __before = __pos;
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800326e:	69bc      	ldr	r4, [r7, #24]
 8003270:	68b8      	ldr	r0, [r7, #8]
 8003272:	f001 f848 	bl	8004306 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_leftmostEv>
 8003276:	4603      	mov	r3, r0
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	429c      	cmp	r4, r3
 800327c:	bf0c      	ite	eq
 800327e:	2301      	moveq	r3, #1
 8003280:	2300      	movne	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00d      	beq.n	80032a4 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8003288:	68b8      	ldr	r0, [r7, #8]
 800328a:	f001 f83c 	bl	8004306 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_leftmostEv>
 800328e:	4604      	mov	r4, r0
 8003290:	68b8      	ldr	r0, [r7, #8]
 8003292:	f001 f838 	bl	8004306 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_leftmostEv>
 8003296:	4603      	mov	r3, r0
 8003298:	461a      	mov	r2, r3
 800329a:	4621      	mov	r1, r4
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 fcb2 	bl	8003c06 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80032a2:	e0a9      	b.n	80033f8 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80032a4:	68bc      	ldr	r4, [r7, #8]
 80032a6:	f107 0314 	add.w	r3, r7, #20
 80032aa:	4618      	mov	r0, r3
 80032ac:	f001 f837 	bl	800431e <_ZNSt17_Rb_tree_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEmmEv>
 80032b0:	4603      	mov	r3, r0
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 ff95 	bl	80041e4 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80032ba:	4603      	mov	r3, r0
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	4619      	mov	r1, r3
 80032c0:	4620      	mov	r0, r4
 80032c2:	f7ff f82a 	bl	800231a <_ZNKSt4lessI20ISDS_gyroFullScale_tEclERKS0_S3_>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01f      	beq.n	800330c <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fb43 	bl	800295a <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	bf0c      	ite	eq
 80032da:	2301      	moveq	r3, #1
 80032dc:	2300      	movne	r3, #0
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x140>
		return _Res(0, __before._M_node);
 80032e4:	2300      	movs	r3, #0
 80032e6:	623b      	str	r3, [r7, #32]
 80032e8:	f107 0214 	add.w	r2, r7, #20
 80032ec:	f107 0320 	add.w	r3, r7, #32
 80032f0:	4619      	mov	r1, r3
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fbe0 	bl	8003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80032f8:	e07e      	b.n	80033f8 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 80032fa:	f107 0218 	add.w	r2, r7, #24
 80032fe:	f107 0318 	add.w	r3, r7, #24
 8003302:	4619      	mov	r1, r3
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fc7e 	bl	8003c06 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800330a:	e075      	b.n	80033f8 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 ff72 	bl	80041fc <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_>
 8003318:	e06e      	b.n	80033f8 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800331a:	68bc      	ldr	r4, [r7, #8]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 ff60 	bl	80041e4 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003324:	4603      	mov	r3, r0
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	4619      	mov	r1, r3
 800332a:	4620      	mov	r0, r4
 800332c:	f7fe fff5 	bl	800231a <_ZNKSt4lessI20ISDS_gyroFullScale_tEclERKS0_S3_>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d056      	beq.n	80033e4 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x22a>
	  iterator __after = __pos;
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800333a:	69bc      	ldr	r4, [r7, #24]
 800333c:	68b8      	ldr	r0, [r7, #8]
 800333e:	f000 ff45 	bl	80041cc <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>
 8003342:	4603      	mov	r3, r0
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	429c      	cmp	r4, r3
 8003348:	bf0c      	ite	eq
 800334a:	2301      	moveq	r3, #1
 800334c:	2300      	movne	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00c      	beq.n	800336e <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 8003354:	2300      	movs	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
 8003358:	68b8      	ldr	r0, [r7, #8]
 800335a:	f000 ff37 	bl	80041cc <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>
 800335e:	4602      	mov	r2, r0
 8003360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003364:	4619      	mov	r1, r3
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fba6 	bl	8003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800336c:	e044      	b.n	80033f8 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800336e:	68bc      	ldr	r4, [r7, #8]
 8003370:	f107 0310 	add.w	r3, r7, #16
 8003374:	4618      	mov	r0, r3
 8003376:	f000 ffe3 	bl	8004340 <_ZNSt17_Rb_tree_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEppEv>
 800337a:	4603      	mov	r3, r0
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 ff30 	bl	80041e4 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003384:	4603      	mov	r3, r0
 8003386:	461a      	mov	r2, r3
 8003388:	6839      	ldr	r1, [r7, #0]
 800338a:	4620      	mov	r0, r4
 800338c:	f7fe ffc5 	bl	800231a <_ZNKSt4lessI20ISDS_gyroFullScale_tEclERKS0_S3_>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01f      	beq.n	80033d6 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fade 	bl	800295a <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 80033ae:	2300      	movs	r3, #0
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b2:	f107 0218 	add.w	r2, r7, #24
 80033b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033ba:	4619      	mov	r1, r3
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 fb7b 	bl	8003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80033c2:	e019      	b.n	80033f8 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80033c4:	f107 0210 	add.w	r2, r7, #16
 80033c8:	f107 0310 	add.w	r3, r7, #16
 80033cc:	4619      	mov	r1, r3
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 fc19 	bl	8003c06 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80033d4:	e010      	b.n	80033f8 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 ff0d 	bl	80041fc <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_>
 80033e2:	e009      	b.n	80033f8 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS9_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 80033e4:	2300      	movs	r3, #0
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80033ec:	f107 0318 	add.w	r3, r7, #24
 80033f0:	4619      	mov	r1, r3
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fc42 	bl	8003c7c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	3734      	adds	r7, #52	; 0x34
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd90      	pop	{r4, r7, pc}

08003400 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>:
      _S_key(_Const_Link_type __x)
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 ffaa 	bl	8004362 <_ZNKSt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 800340e:	4602      	mov	r2, r0
 8003410:	f107 030c 	add.w	r3, r7, #12
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fa69 	bl	80038ee <_ZNKSt10_Select1stISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS9_>
 800341c:	4603      	mov	r3, r0
      }
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <_ZNSt17_Rb_tree_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEONSt16remove_referenceIT_E4typeEOSF_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <_ZNSaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSB_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800347a:	6839      	ldr	r1, [r7, #0]
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 ff7e 	bl	800437e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSD_>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <_ZNSt20_Rb_tree_key_compareISt4lessI24ISDS_accOutputDataRate_tEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
      { }
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <_ZNKSt10_Select1stISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS9_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <_ZSt7forwardIRKSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80034d2:	b5b0      	push	{r4, r5, r7, lr}
 80034d4:	b088      	sub	sp, #32
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d11a      	bne.n	800351c <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fa88 	bl	80039fc <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_M_endEv>
 80034ec:	4602      	mov	r2, r0
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d013      	beq.n	800351c <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80034f4:	68fc      	ldr	r4, [r7, #12]
 80034f6:	f107 0310 	add.w	r3, r7, #16
 80034fa:	6839      	ldr	r1, [r7, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff ffd1 	bl	80034a4 <_ZNKSt10_Select1stISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS9_>
 8003502:	4605      	mov	r5, r0
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 facb 	bl	8003aa0 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800350a:	4603      	mov	r3, r0
 800350c:	461a      	mov	r2, r3
 800350e:	4629      	mov	r1, r5
 8003510:	4620      	mov	r0, r4
 8003512:	f7fe fe57 	bl	80021c4 <_ZNKSt4lessI24ISDS_accOutputDataRate_tEclERKS0_S3_>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4e>
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x50>
 8003520:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8003522:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8003524:	6838      	ldr	r0, [r7, #0]
 8003526:	f7ff ffc9 	bl	80034bc <_ZSt7forwardIRKSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 800352a:	4603      	mov	r3, r0
 800352c:	4619      	mov	r1, r3
 800352e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003530:	f000 ff31 	bl	8004396 <_ZNKSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>
 8003534:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800353a:	7ff8      	ldrb	r0, [r7, #31]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	69b9      	ldr	r1, [r7, #24]
 8003540:	f00a fd48 	bl	800dfd4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800354e:	f107 0314 	add.w	r3, r7, #20
 8003552:	69b9      	ldr	r1, [r7, #24]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fb6d 	bl	8002c34 <_ZNSt17_Rb_tree_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 800355a:	697b      	ldr	r3, [r7, #20]
      }
 800355c:	4618      	mov	r0, r3
 800355e:	3720      	adds	r7, #32
 8003560:	46bd      	mov	sp, r7
 8003562:	bdb0      	pop	{r4, r5, r7, pc}

08003564 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003564:	b590      	push	{r4, r7, lr}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 ff25 	bl	80043be <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>
 8003574:	4604      	mov	r4, r0
 8003576:	6838      	ldr	r0, [r7, #0]
 8003578:	f7ff fa18 	bl	80029ac <_ZNSt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 800357c:	4603      	mov	r3, r0
 800357e:	4619      	mov	r1, r3
 8003580:	4620      	mov	r0, r4
 8003582:	f000 ff27 	bl	80043d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE7destroyISA_EEvRSC_PT_>
      }
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	bd90      	pop	{r4, r7, pc}

0800358e <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 ff10 	bl	80043be <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>
 800359e:	4603      	mov	r3, r0
 80035a0:	2201      	movs	r2, #1
 80035a2:	6839      	ldr	r1, [r7, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 ff22 	bl	80043ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE10deallocateERSC_PSB_j>
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1Ev>:
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4618      	mov	r0, r3
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <_ZNSaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSB_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80035e8:	6839      	ldr	r1, [r7, #0]
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 ff0e 	bl	800440c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSD_>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <_ZNSt20_Rb_tree_key_compareISt4lessI25ISDS_gyroOutputDataRate_tEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
      { }
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <_ZNKSt10_Select1stISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS9_>:
      operator()(const _Pair& __x) const
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <_ZSt7forwardIRKSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4618      	mov	r0, r3
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003640:	b5b0      	push	{r4, r5, r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d11a      	bne.n	800368a <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 fb35 	bl	8003cc4 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_M_endEv>
 800365a:	4602      	mov	r2, r0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4293      	cmp	r3, r2
 8003660:	d013      	beq.n	800368a <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8003662:	68fc      	ldr	r4, [r7, #12]
 8003664:	f107 0310 	add.w	r3, r7, #16
 8003668:	6839      	ldr	r1, [r7, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff ffd1 	bl	8003612 <_ZNKSt10_Select1stISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS9_>
 8003670:	4605      	mov	r5, r0
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fb78 	bl	8003d68 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003678:	4603      	mov	r3, r0
 800367a:	461a      	mov	r2, r3
 800367c:	4629      	mov	r1, r5
 800367e:	4620      	mov	r0, r4
 8003680:	f7fe fdd9 	bl	8002236 <_ZNKSt4lessI25ISDS_gyroOutputDataRate_tEclERKS0_S3_>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4e>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x50>
 800368e:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8003690:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8003692:	6838      	ldr	r0, [r7, #0]
 8003694:	f7ff ffc9 	bl	800362a <_ZSt7forwardIRKSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8003698:	4603      	mov	r3, r0
 800369a:	4619      	mov	r1, r3
 800369c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800369e:	f000 fec1 	bl	8004424 <_ZNKSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>
 80036a2:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80036a8:	7ff8      	ldrb	r0, [r7, #31]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	69b9      	ldr	r1, [r7, #24]
 80036ae:	f00a fc91 	bl	800dfd4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	69b9      	ldr	r1, [r7, #24]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fc09 	bl	8002eda <_ZNSt17_Rb_tree_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 80036c8:	697b      	ldr	r3, [r7, #20]
      }
 80036ca:	4618      	mov	r0, r3
 80036cc:	3720      	adds	r7, #32
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bdb0      	pop	{r4, r5, r7, pc}

080036d2 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80036d2:	b590      	push	{r4, r7, lr}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 feb5 	bl	800444c <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>
 80036e2:	4604      	mov	r4, r0
 80036e4:	6838      	ldr	r0, [r7, #0]
 80036e6:	f7ff fab4 	bl	8002c52 <_ZNSt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 80036ea:	4603      	mov	r3, r0
 80036ec:	4619      	mov	r1, r3
 80036ee:	4620      	mov	r0, r4
 80036f0:	f000 feb7 	bl	8004462 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE7destroyISA_EEvRSC_PT_>
      }
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd90      	pop	{r4, r7, pc}

080036fc <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fea0 	bl	800444c <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>
 800370c:	4603      	mov	r3, r0
 800370e:	2201      	movs	r2, #1
 8003710:	6839      	ldr	r1, [r7, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 feb2 	bl	800447c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE10deallocateERSC_PSB_j>
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1Ev>:
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4618      	mov	r0, r3
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <_ZNSaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSB_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003756:	6839      	ldr	r1, [r7, #0]
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fe9e 	bl	800449a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSD_>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <_ZNSt20_Rb_tree_key_compareISt4lessI19ISDS_accFullScale_tEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
      { }
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <_ZNKSt10_Select1stISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS9_>:
      operator()(const _Pair& __x) const
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <_ZSt7forwardIRKSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80037ae:	b5b0      	push	{r4, r5, r7, lr}
 80037b0:	b088      	sub	sp, #32
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d11a      	bne.n	80037f8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fb9d 	bl	8003f02 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_M_endEv>
 80037c8:	4602      	mov	r2, r0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d013      	beq.n	80037f8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80037d0:	68fc      	ldr	r4, [r7, #12]
 80037d2:	f107 0310 	add.w	r3, r7, #16
 80037d6:	6839      	ldr	r1, [r7, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ffd1 	bl	8003780 <_ZNKSt10_Select1stISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS9_>
 80037de:	4605      	mov	r5, r0
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fbe0 	bl	8003fa6 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461a      	mov	r2, r3
 80037ea:	4629      	mov	r1, r5
 80037ec:	4620      	mov	r0, r4
 80037ee:	f7fe fd5b 	bl	80022a8 <_ZNKSt4lessI19ISDS_accFullScale_tEclERKS0_S3_>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4e>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x50>
 80037fc:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 80037fe:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8003800:	6838      	ldr	r0, [r7, #0]
 8003802:	f7ff ffc9 	bl	8003798 <_ZSt7forwardIRKSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8003806:	4603      	mov	r3, r0
 8003808:	4619      	mov	r1, r3
 800380a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800380c:	f000 fe51 	bl	80044b2 <_ZNKSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>
 8003810:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8003816:	7ff8      	ldrb	r0, [r7, #31]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	69b9      	ldr	r1, [r7, #24]
 800381c:	f00a fbda 	bl	800dfd4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800382a:	f107 0314 	add.w	r3, r7, #20
 800382e:	69b9      	ldr	r1, [r7, #24]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fca5 	bl	8003180 <_ZNSt17_Rb_tree_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 8003836:	697b      	ldr	r3, [r7, #20]
      }
 8003838:	4618      	mov	r0, r3
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bdb0      	pop	{r4, r5, r7, pc}

08003840 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fe45 	bl	80044da <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>
 8003850:	4604      	mov	r4, r0
 8003852:	6838      	ldr	r0, [r7, #0]
 8003854:	f7ff fb50 	bl	8002ef8 <_ZNSt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 8003858:	4603      	mov	r3, r0
 800385a:	4619      	mov	r1, r3
 800385c:	4620      	mov	r0, r4
 800385e:	f000 fe47 	bl	80044f0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE7destroyISA_EEvRSC_PT_>
      }
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bd90      	pop	{r4, r7, pc}

0800386a <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fe30 	bl	80044da <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>
 800387a:	4603      	mov	r3, r0
 800387c:	2201      	movs	r2, #1
 800387e:	6839      	ldr	r1, [r7, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fe42 	bl	800450a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE10deallocateERSC_PSB_j>
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1Ev>:
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <_ZNSaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSB_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80038c4:	6839      	ldr	r1, [r7, #0]
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fe2e 	bl	8004528 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSD_>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <_ZNSt20_Rb_tree_key_compareISt4lessI20ISDS_gyroFullScale_tEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	6039      	str	r1, [r7, #0]
      { }
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <_ZNKSt10_Select1stISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS9_>:
      operator()(const _Pair& __x) const
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <_ZSt7forwardIRKSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800391c:	b5b0      	push	{r4, r5, r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d11a      	bne.n	8003966 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 fc05 	bl	8004140 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_M_endEv>
 8003936:	4602      	mov	r2, r0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800393e:	68fc      	ldr	r4, [r7, #12]
 8003940:	f107 0310 	add.w	r3, r7, #16
 8003944:	6839      	ldr	r1, [r7, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ffd1 	bl	80038ee <_ZNKSt10_Select1stISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS9_>
 800394c:	4605      	mov	r5, r0
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fc48 	bl	80041e4 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003954:	4603      	mov	r3, r0
 8003956:	461a      	mov	r2, r3
 8003958:	4629      	mov	r1, r5
 800395a:	4620      	mov	r0, r4
 800395c:	f7fe fcdd 	bl	800231a <_ZNKSt4lessI20ISDS_gyroFullScale_tEclERKS0_S3_>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x4e>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRKS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSN_OT_RT0_+0x50>
 800396a:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800396c:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800396e:	6838      	ldr	r0, [r7, #0]
 8003970:	f7ff ffc9 	bl	8003906 <_ZSt7forwardIRKSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8003974:	4603      	mov	r3, r0
 8003976:	4619      	mov	r1, r3
 8003978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800397a:	f000 fde1 	bl	8004540 <_ZNKSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>
 800397e:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8003984:	7ff8      	ldrb	r0, [r7, #31]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	69b9      	ldr	r1, [r7, #24]
 800398a:	f00a fb23 	bl	800dfd4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8003998:	f107 0314 	add.w	r3, r7, #20
 800399c:	69b9      	ldr	r1, [r7, #24]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff fd41 	bl	8003426 <_ZNSt17_Rb_tree_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 80039a4:	697b      	ldr	r3, [r7, #20]
      }
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bdb0      	pop	{r4, r5, r7, pc}

080039ae <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80039ae:	b590      	push	{r4, r7, lr}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fdd5 	bl	8004568 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>
 80039be:	4604      	mov	r4, r0
 80039c0:	6838      	ldr	r0, [r7, #0]
 80039c2:	f7ff fbec 	bl	800319e <_ZNSt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4619      	mov	r1, r3
 80039ca:	4620      	mov	r0, r4
 80039cc:	f000 fdd7 	bl	800457e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE7destroyISA_EEvRSC_PT_>
      }
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd90      	pop	{r4, r7, pc}

080039d8 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fdc0 	bl	8004568 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2201      	movs	r2, #1
 80039ec:	6839      	ldr	r1, [r7, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fdd2 	bl	8004598 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE10deallocateERSC_PSB_j>
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fdca 	bl	80045b6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>
 8003a22:	4603      	mov	r3, r0
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_get_nodeEv>:
      _M_get_node()
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fcc2 	bl	80043be <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fdc4 	bl	80045cc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE8allocateERSC_j>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	f107 030c 	add.w	r3, r7, #12
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff f8e7 	bl	8002c34 <_ZNSt17_Rb_tree_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <_ZNKSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3310      	adds	r3, #16
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff f8b0 	bl	8002c0e <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fd8c 	bl	80045ea <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003ae4:	b590      	push	{r4, r7, lr}
 8003ae6:	b08b      	sub	sp, #44	; 0x2c
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8003af0:	68b8      	ldr	r0, [r7, #8]
 8003af2:	f7fe f8f5 	bl	8001ce0 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_beginEv>
 8003af6:	4603      	mov	r3, r0
 8003af8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8003afa:	68b8      	ldr	r0, [r7, #8]
 8003afc:	f7ff ff7e 	bl	80039fc <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_M_endEv>
 8003b00:	4603      	mov	r3, r0
 8003b02:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8003b14:	68bc      	ldr	r4, [r7, #8]
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff f878 	bl	8002c0e <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	461a      	mov	r2, r3
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4620      	mov	r0, r4
 8003b26:	f7fe fb4d 	bl	80021c4 <_ZNKSt4lessI24ISDS_accOutputDataRate_tEclERKS0_S3_>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8003b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x60>
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe fcbe 	bl	80024bc <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8003b40:	4603      	mov	r3, r0
 8003b42:	e004      	b.n	8003b4e <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x6a>
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fe fcac 	bl	80024a4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8003b50:	e7db      	b.n	8003b0a <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	f107 0310 	add.w	r3, r7, #16
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff f86a 	bl	8002c34 <_ZNSt17_Rb_tree_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8003b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d01d      	beq.n	8003ba4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 8003b68:	68b8      	ldr	r0, [r7, #8]
 8003b6a:	f000 fd49 	bl	8004600 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE5beginEv>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	f107 021c 	add.w	r2, r7, #28
 8003b76:	f107 0310 	add.w	r3, r7, #16
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fe fb0d 	bl	800219c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESC_>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 8003b88:	f107 0214 	add.w	r2, r7, #20
 8003b8c:	f107 0318 	add.w	r3, r7, #24
 8003b90:	4619      	mov	r1, r3
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 fd45 	bl	8004622 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_Lb1EEEOT_OT0_>
 8003b98:	e025      	b.n	8003be6 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 8003b9a:	f107 0310 	add.w	r3, r7, #16
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 f84a 	bl	8003c38 <_ZNSt17_Rb_tree_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8003ba4:	68bc      	ldr	r4, [r7, #8]
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff79 	bl	8003aa0 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f7fe fb05 	bl	80021c4 <_ZNKSt4lessI24ISDS_accOutputDataRate_tEclERKS0_S3_>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8003bc0:	f107 0214 	add.w	r2, r7, #20
 8003bc4:	f107 0318 	add.w	r3, r7, #24
 8003bc8:	4619      	mov	r1, r3
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fd29 	bl	8004622 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_Lb1EEEOT_OT0_>
 8003bd0:	e009      	b.n	8003be6 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	623b      	str	r3, [r7, #32]
 8003bd6:	f107 0220 	add.w	r2, r7, #32
 8003bda:	f107 0310 	add.w	r3, r7, #16
 8003bde:	4619      	mov	r1, r3
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f84b 	bl	8003c7c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	372c      	adds	r7, #44	; 0x2c
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd90      	pop	{r4, r7, pc}

08003bee <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	330c      	adds	r3, #12
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b084      	sub	sp, #16
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8003c12:	68b8      	ldr	r0, [r7, #8]
 8003c14:	f000 fce9 	bl	80045ea <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fce2 	bl	80045ea <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8003c26:	4603      	mov	r3, r0
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <_ZNSt17_Rb_tree_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f00a f9c3 	bl	800dfd0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	601a      	str	r2, [r3, #0]
	return *this;
 8003c50:	687b      	ldr	r3, [r7, #4]
      }
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <_ZNSt17_Rb_tree_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f00a f9b0 	bl	800dfcc <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	601a      	str	r2, [r3, #0]
	return *this;
 8003c72:	687b      	ldr	r3, [r7, #4]
      }
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8003c88:	68b8      	ldr	r0, [r7, #8]
 8003c8a:	f000 fcae 	bl	80045ea <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <_ZNKSt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>:
      _M_valptr() const
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3310      	adds	r3, #16
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fccd 	bl	8004654 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <_ZN9__gnu_cxx16__aligned_membufISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fcc1 	bl	800466c <_ZN9__gnu_cxx16__aligned_membufISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>
 8003cea:	4603      	mov	r3, r0
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_get_nodeEv>:
      _M_get_node()
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fba5 	bl	800444c <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2101      	movs	r1, #1
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fcbb 	bl	8004682 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE8allocateERSC_j>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	f107 030c 	add.w	r3, r7, #12
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff f8d6 	bl	8002eda <_ZNSt17_Rb_tree_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <_ZNKSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	4618      	mov	r0, r3
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3310      	adds	r3, #16
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff f89f 	bl	8002eb4 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8003d76:	4603      	mov	r3, r0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b08b      	sub	sp, #44	; 0x2c
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8003d8c:	68b8      	ldr	r0, [r7, #8]
 8003d8e:	f7fe f86d 	bl	8001e6c <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_beginEv>
 8003d92:	4603      	mov	r3, r0
 8003d94:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8003d96:	68b8      	ldr	r0, [r7, #8]
 8003d98:	f7ff ff94 	bl	8003cc4 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_M_endEv>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8003da0:	2301      	movs	r3, #1
 8003da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d020      	beq.n	8003dee <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8003db0:	68bc      	ldr	r4, [r7, #8]
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff f87d 	bl	8002eb4 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f7fe fa38 	bl	8002236 <_ZNKSt4lessI25ISDS_gyroOutputDataRate_tEclERKS0_S3_>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8003dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x60>
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fe fc39 	bl	800264e <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	e004      	b.n	8003dea <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x6a>
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe fc27 	bl	8002636 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003de8:	4603      	mov	r3, r0
 8003dea:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8003dec:	e7db      	b.n	8003da6 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	f107 0310 	add.w	r3, r7, #16
 8003df4:	4611      	mov	r1, r2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff f86f 	bl	8002eda <_ZNSt17_Rb_tree_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8003dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01d      	beq.n	8003e40 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 8003e04:	68b8      	ldr	r0, [r7, #8]
 8003e06:	f000 fc4b 	bl	80046a0 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE5beginEv>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	f107 021c 	add.w	r2, r7, #28
 8003e12:	f107 0310 	add.w	r3, r7, #16
 8003e16:	4611      	mov	r1, r2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe f9f8 	bl	800220e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESC_>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 8003e24:	f107 0214 	add.w	r2, r7, #20
 8003e28:	f107 0318 	add.w	r3, r7, #24
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fc47 	bl	80046c2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_Lb1EEEOT_OT0_>
 8003e34:	e025      	b.n	8003e82 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 8003e36:	f107 0310 	add.w	r3, r7, #16
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f831 	bl	8003ea2 <_ZNSt17_Rb_tree_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8003e40:	68bc      	ldr	r4, [r7, #8]
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff8f 	bl	8003d68 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4620      	mov	r0, r4
 8003e52:	f7fe f9f0 	bl	8002236 <_ZNKSt4lessI25ISDS_gyroOutputDataRate_tEclERKS0_S3_>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8003e5c:	f107 0214 	add.w	r2, r7, #20
 8003e60:	f107 0318 	add.w	r3, r7, #24
 8003e64:	4619      	mov	r1, r3
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 fc2b 	bl	80046c2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_Lb1EEEOT_OT0_>
 8003e6c:	e009      	b.n	8003e82 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	623b      	str	r3, [r7, #32]
 8003e72:	f107 0220 	add.w	r2, r7, #32
 8003e76:	f107 0310 	add.w	r3, r7, #16
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff fefd 	bl	8003c7c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	372c      	adds	r7, #44	; 0x2c
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd90      	pop	{r4, r7, pc}

08003e8a <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	330c      	adds	r3, #12
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <_ZNSt17_Rb_tree_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f00a f88e 	bl	800dfd0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	601a      	str	r2, [r3, #0]
	return *this;
 8003eba:	687b      	ldr	r3, [r7, #4]
      }
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <_ZNSt17_Rb_tree_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f00a f87b 	bl	800dfcc <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	601a      	str	r2, [r3, #0]
	return *this;
 8003edc:	687b      	ldr	r3, [r7, #4]
      }
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <_ZNKSt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>:
      _M_valptr() const
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3310      	adds	r3, #16
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fbfe 	bl	80046f4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <_ZN9__gnu_cxx16__aligned_membufISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fbf2 	bl	800470c <_ZN9__gnu_cxx16__aligned_membufISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_get_nodeEv>:
      _M_get_node()
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 facd 	bl	80044da <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2101      	movs	r1, #1
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fbec 	bl	8004722 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE8allocateERSC_j>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	f107 030c 	add.w	r3, r7, #12
 8003f64:	4611      	mov	r1, r2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff f90a 	bl	8003180 <_ZNSt17_Rb_tree_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <_ZNKSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3310      	adds	r3, #16
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff f8d3 	bl	800315a <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003fbe:	b590      	push	{r4, r7, lr}
 8003fc0:	b08b      	sub	sp, #44	; 0x2c
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8003fca:	68b8      	ldr	r0, [r7, #8]
 8003fcc:	f7fe f814 	bl	8001ff8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_beginEv>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8003fd4:	68b8      	ldr	r0, [r7, #8]
 8003fd6:	f7ff ff94 	bl	8003f02 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_M_endEv>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d020      	beq.n	800402c <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8003fee:	68bc      	ldr	r4, [r7, #8]
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff f8b1 	bl	800315a <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4620      	mov	r0, r4
 8004000:	f7fe f952 	bl	80022a8 <_ZNKSt4lessI19ISDS_accFullScale_tEclERKS0_S3_>
 8004004:	4603      	mov	r3, r0
 8004006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800400a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x60>
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	4618      	mov	r0, r3
 8004016:	f7fe fbe3 	bl	80027e0 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 800401a:	4603      	mov	r3, r0
 800401c:	e004      	b.n	8004028 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x6a>
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	4618      	mov	r0, r3
 8004022:	f7fe fbd1 	bl	80027c8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004026:	4603      	mov	r3, r0
 8004028:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800402a:	e7db      	b.n	8003fe4 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	f107 0310 	add.w	r3, r7, #16
 8004032:	4611      	mov	r1, r2
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff f8a3 	bl	8003180 <_ZNSt17_Rb_tree_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800403a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01d      	beq.n	800407e <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 8004042:	68b8      	ldr	r0, [r7, #8]
 8004044:	f000 fb7c 	bl	8004740 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE5beginEv>
 8004048:	4603      	mov	r3, r0
 800404a:	61fb      	str	r3, [r7, #28]
 800404c:	f107 021c 	add.w	r2, r7, #28
 8004050:	f107 0310 	add.w	r3, r7, #16
 8004054:	4611      	mov	r1, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe f912 	bl	8002280 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESC_>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d008      	beq.n	8004074 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 8004062:	f107 0214 	add.w	r2, r7, #20
 8004066:	f107 0318 	add.w	r3, r7, #24
 800406a:	4619      	mov	r1, r3
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fb78 	bl	8004762 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_Lb1EEEOT_OT0_>
 8004072:	e025      	b.n	80040c0 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 8004074:	f107 0310 	add.w	r3, r7, #16
 8004078:	4618      	mov	r0, r3
 800407a:	f000 f831 	bl	80040e0 <_ZNSt17_Rb_tree_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800407e:	68bc      	ldr	r4, [r7, #8]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff ff8f 	bl	8003fa6 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004088:	4603      	mov	r3, r0
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4619      	mov	r1, r3
 800408e:	4620      	mov	r0, r4
 8004090:	f7fe f90a 	bl	80022a8 <_ZNKSt4lessI19ISDS_accFullScale_tEclERKS0_S3_>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d008      	beq.n	80040ac <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 800409a:	f107 0214 	add.w	r2, r7, #20
 800409e:	f107 0318 	add.w	r3, r7, #24
 80040a2:	4619      	mov	r1, r3
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fb5c 	bl	8004762 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_Lb1EEEOT_OT0_>
 80040aa:	e009      	b.n	80040c0 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 80040ac:	2300      	movs	r3, #0
 80040ae:	623b      	str	r3, [r7, #32]
 80040b0:	f107 0220 	add.w	r2, r7, #32
 80040b4:	f107 0310 	add.w	r3, r7, #16
 80040b8:	4619      	mov	r1, r3
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7ff fdde 	bl	8003c7c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	372c      	adds	r7, #44	; 0x2c
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd90      	pop	{r4, r7, pc}

080040c8 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	330c      	adds	r3, #12
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <_ZNSt17_Rb_tree_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f009 ff6f 	bl	800dfd0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80040f2:	4602      	mov	r2, r0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	601a      	str	r2, [r3, #0]
	return *this;
 80040f8:	687b      	ldr	r3, [r7, #4]
      }
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <_ZNSt17_Rb_tree_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f009 ff5c 	bl	800dfcc <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8004114:	4602      	mov	r2, r0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	601a      	str	r2, [r3, #0]
	return *this;
 800411a:	687b      	ldr	r3, [r7, #4]
      }
 800411c:	4618      	mov	r0, r3
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <_ZNKSt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>:
      _M_valptr() const
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3310      	adds	r3, #16
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fb2f 	bl	8004794 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>
 8004136:	4603      	mov	r3, r0
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fb23 	bl	80047ac <_ZN9__gnu_cxx16__aligned_membufISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>
 8004166:	4603      	mov	r3, r0
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_get_nodeEv>:
      _M_get_node()
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f9f5 	bl	8004568 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>
 800417e:	4603      	mov	r3, r0
 8004180:	2101      	movs	r1, #1
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fb1d 	bl	80047c2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE8allocateERSC_j>
 8004188:	4603      	mov	r3, r0
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	f107 030c 	add.w	r3, r7, #12
 80041a2:	4611      	mov	r1, r2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff f93e 	bl	8003426 <_ZNSt17_Rb_tree_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <_ZNKSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3310      	adds	r3, #16
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff f907 	bl	8003400 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 80041f2:	4603      	mov	r3, r0
 80041f4:	4618      	mov	r0, r3
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b08b      	sub	sp, #44	; 0x2c
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8004208:	68b8      	ldr	r0, [r7, #8]
 800420a:	f7fd ffbb 	bl	8002184 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_M_beginEv>
 800420e:	4603      	mov	r3, r0
 8004210:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8004212:	68b8      	ldr	r0, [r7, #8]
 8004214:	f7ff ff94 	bl	8004140 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_M_endEv>
 8004218:	4603      	mov	r3, r0
 800421a:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d020      	beq.n	800426a <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800422c:	68bc      	ldr	r4, [r7, #8]
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff f8e5 	bl	8003400 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8004236:	4603      	mov	r3, r0
 8004238:	461a      	mov	r2, r3
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4620      	mov	r0, r4
 800423e:	f7fe f86c 	bl	800231a <_ZNKSt4lessI20ISDS_gyroFullScale_tEclERKS0_S3_>
 8004242:	4603      	mov	r3, r0
 8004244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x60>
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fe fb8d 	bl	8002972 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004258:	4603      	mov	r3, r0
 800425a:	e004      	b.n	8004266 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x6a>
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe fb7b 	bl	800295a <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004264:	4603      	mov	r3, r0
 8004266:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004268:	e7db      	b.n	8004222 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	f107 0310 	add.w	r3, r7, #16
 8004270:	4611      	mov	r1, r2
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff f8d7 	bl	8003426 <_ZNSt17_Rb_tree_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01d      	beq.n	80042bc <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 8004280:	68b8      	ldr	r0, [r7, #8]
 8004282:	f000 faad 	bl	80047e0 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE5beginEv>
 8004286:	4603      	mov	r3, r0
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	f107 021c 	add.w	r2, r7, #28
 800428e:	f107 0310 	add.w	r3, r7, #16
 8004292:	4611      	mov	r1, r2
 8004294:	4618      	mov	r0, r3
 8004296:	f7fe f82c 	bl	80022f2 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESC_>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 80042a0:	f107 0214 	add.w	r2, r7, #20
 80042a4:	f107 0318 	add.w	r3, r7, #24
 80042a8:	4619      	mov	r1, r3
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 faa9 	bl	8004802 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_Lb1EEEOT_OT0_>
 80042b0:	e025      	b.n	80042fe <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 80042b2:	f107 0310 	add.w	r3, r7, #16
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 f831 	bl	800431e <_ZNSt17_Rb_tree_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80042bc:	68bc      	ldr	r4, [r7, #8]
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff8f 	bl	80041e4 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80042c6:	4603      	mov	r3, r0
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	4619      	mov	r1, r3
 80042cc:	4620      	mov	r0, r4
 80042ce:	f7fe f824 	bl	800231a <_ZNKSt4lessI20ISDS_gyroFullScale_tEclERKS0_S3_>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 80042d8:	f107 0214 	add.w	r2, r7, #20
 80042dc:	f107 0318 	add.w	r3, r7, #24
 80042e0:	4619      	mov	r1, r3
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 fa8d 	bl	8004802 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_Lb1EEEOT_OT0_>
 80042e8:	e009      	b.n	80042fe <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 80042ea:	2300      	movs	r3, #0
 80042ec:	623b      	str	r3, [r7, #32]
 80042ee:	f107 0220 	add.w	r2, r7, #32
 80042f2:	f107 0310 	add.w	r3, r7, #16
 80042f6:	4619      	mov	r1, r3
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff fcbf 	bl	8003c7c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	372c      	adds	r7, #44	; 0x2c
 8004302:	46bd      	mov	sp, r7
 8004304:	bd90      	pop	{r4, r7, pc}

08004306 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	330c      	adds	r3, #12
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <_ZNSt17_Rb_tree_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f009 fe50 	bl	800dfd0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8004330:	4602      	mov	r2, r0
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	601a      	str	r2, [r3, #0]
	return *this;
 8004336:	687b      	ldr	r3, [r7, #4]
      }
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <_ZNSt17_Rb_tree_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f009 fe3d 	bl	800dfcc <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8004352:	4602      	mov	r2, r0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	601a      	str	r2, [r3, #0]
	return *this;
 8004358:	687b      	ldr	r3, [r7, #4]
      }
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <_ZNKSt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>:
      _M_valptr() const
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3310      	adds	r3, #16
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fa60 	bl	8004834 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>
 8004374:	4603      	mov	r3, r0
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSD_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <_ZNKSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>:
	  operator()(_Arg&& __arg) const
 8004396:	b590      	push	{r4, r7, lr}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681c      	ldr	r4, [r3, #0]
 80043a4:	6838      	ldr	r0, [r7, #0]
 80043a6:	f7ff f889 	bl	80034bc <_ZSt7forwardIRKSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 80043aa:	4603      	mov	r3, r0
 80043ac:	4619      	mov	r1, r3
 80043ae:	4620      	mov	r0, r4
 80043b0:	f000 fa4c 	bl	800484c <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>
 80043b4:	4603      	mov	r3, r0
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd90      	pop	{r4, r7, pc}

080043be <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE7destroyISA_EEvRSC_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 80043de:	6839      	ldr	r1, [r7, #0]
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fa4a 	bl	800487a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7destroyISB_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 fa47 	bl	8004892 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateEPSC_j>
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSD_>:
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <_ZNKSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>:
	  operator()(_Arg&& __arg) const
 8004424:	b590      	push	{r4, r7, lr}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681c      	ldr	r4, [r3, #0]
 8004432:	6838      	ldr	r0, [r7, #0]
 8004434:	f7ff f8f9 	bl	800362a <_ZSt7forwardIRKSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004438:	4603      	mov	r3, r0
 800443a:	4619      	mov	r1, r3
 800443c:	4620      	mov	r0, r4
 800443e:	f000 fa3a 	bl	80048b6 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>
 8004442:	4603      	mov	r3, r0
 8004444:	4618      	mov	r0, r3
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bd90      	pop	{r4, r7, pc}

0800444c <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4618      	mov	r0, r3
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE7destroyISA_EEvRSC_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800446c:	6839      	ldr	r1, [r7, #0]
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fa38 	bl	80048e4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7destroyISB_EEvPT_>
	}
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fa35 	bl	80048fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateEPSC_j>
 8004492:	bf00      	nop
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSD_>:
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4618      	mov	r0, r3
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <_ZNKSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>:
	  operator()(_Arg&& __arg) const
 80044b2:	b590      	push	{r4, r7, lr}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681c      	ldr	r4, [r3, #0]
 80044c0:	6838      	ldr	r0, [r7, #0]
 80044c2:	f7ff f969 	bl	8003798 <_ZSt7forwardIRKSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 80044c6:	4603      	mov	r3, r0
 80044c8:	4619      	mov	r1, r3
 80044ca:	4620      	mov	r0, r4
 80044cc:	f000 fa28 	bl	8004920 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd90      	pop	{r4, r7, pc}

080044da <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE7destroyISA_EEvRSC_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80044fa:	6839      	ldr	r1, [r7, #0]
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fa26 	bl	800494e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7destroyISB_EEvPT_>
	}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fa23 	bl	8004966 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateEPSC_j>
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSD_>:
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4618      	mov	r0, r3
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <_ZNKSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_Alloc_nodeclIRKS9_EEPSt13_Rb_tree_nodeIS9_EOT_>:
	  operator()(_Arg&& __arg) const
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681c      	ldr	r4, [r3, #0]
 800454e:	6838      	ldr	r0, [r7, #0]
 8004550:	f7ff f9d9 	bl	8003906 <_ZSt7forwardIRKSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004554:	4603      	mov	r3, r0
 8004556:	4619      	mov	r1, r3
 8004558:	4620      	mov	r0, r4
 800455a:	f000 fa16 	bl	800498a <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>
 800455e:	4603      	mov	r3, r0
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	bd90      	pop	{r4, r7, pc}

08004568 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE7destroyISA_EEvRSC_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8004588:	6839      	ldr	r1, [r7, #0]
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fa14 	bl	80049b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7destroyISB_EEvPT_>
	}
 8004590:	bf00      	nop
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fa11 	bl	80049d0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateEPSC_j>
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>:
      _M_addr() noexcept
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4618      	mov	r0, r3
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80045d6:	2200      	movs	r2, #0
 80045d8:	6839      	ldr	r1, [r7, #0]
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fa0a 	bl	80049f4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv>
 80045e0:	4603      	mov	r3, r0
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	f107 030c 	add.w	r3, r7, #12
 8004610:	4611      	mov	r1, r2
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe fb0e 	bl	8002c34 <_ZNSt17_Rb_tree_iteratorISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004622:	b580      	push	{r7, lr}
 8004624:	b084      	sub	sp, #16
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800462e:	68b8      	ldr	r0, [r7, #8]
 8004630:	f000 fa00 	bl	8004a34 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISE_E4typeE>
 8004634:	4603      	mov	r3, r0
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff ffd4 	bl	80045ea <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004642:	4603      	mov	r3, r0
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	605a      	str	r2, [r3, #4]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f9f4 	bl	8004a4a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>
 8004662:	4603      	mov	r3, r0
 8004664:	4618      	mov	r0, r3
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <_ZN9__gnu_cxx16__aligned_membufISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>:
      _M_addr() noexcept
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4618      	mov	r0, r3
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800468c:	2200      	movs	r2, #0
 800468e:	6839      	ldr	r1, [r7, #0]
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f9e5 	bl	8004a60 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv>
 8004696:	4603      	mov	r3, r0
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	f107 030c 	add.w	r3, r7, #12
 80046b0:	4611      	mov	r1, r2
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fe fc11 	bl	8002eda <_ZNSt17_Rb_tree_iteratorISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80046ce:	68b8      	ldr	r0, [r7, #8]
 80046d0:	f000 f9e6 	bl	8004aa0 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISE_E4typeE>
 80046d4:	4603      	mov	r3, r0
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff ff84 	bl	80045ea <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80046e2:	4603      	mov	r3, r0
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f9da 	bl	8004ab6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>
 8004702:	4603      	mov	r3, r0
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <_ZN9__gnu_cxx16__aligned_membufISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>:
      _M_addr() noexcept
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800472c:	2200      	movs	r2, #0
 800472e:	6839      	ldr	r1, [r7, #0]
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f9cb 	bl	8004acc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv>
 8004736:	4603      	mov	r3, r0
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	f107 030c 	add.w	r3, r7, #12
 8004750:	4611      	mov	r1, r2
 8004752:	4618      	mov	r0, r3
 8004754:	f7fe fd14 	bl	8003180 <_ZNSt17_Rb_tree_iteratorISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800476e:	68b8      	ldr	r0, [r7, #8]
 8004770:	f000 f9cc 	bl	8004b0c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISE_E4typeE>
 8004774:	4603      	mov	r3, r0
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff ff34 	bl	80045ea <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004782:	4603      	mov	r3, r0
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f9c0 	bl	8004b22 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>
 80047a2:	4603      	mov	r3, r0
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <_ZN9__gnu_cxx16__aligned_membufISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>:
      _M_addr() noexcept
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4618      	mov	r0, r3
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80047cc:	2200      	movs	r2, #0
 80047ce:	6839      	ldr	r1, [r7, #0]
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f9b1 	bl	8004b38 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv>
 80047d6:	4603      	mov	r3, r0
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	f107 030c 	add.w	r3, r7, #12
 80047f0:	4611      	mov	r1, r2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe fe17 	bl	8003426 <_ZNSt17_Rb_tree_iteratorISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800480e:	68b8      	ldr	r0, [r7, #8]
 8004810:	f000 f9b2 	bl	8004b78 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISE_E4typeE>
 8004814:	4603      	mov	r3, r0
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff fee4 	bl	80045ea <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004822:	4603      	mov	r3, r0
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f9a6 	bl	8004b8e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>
 8004842:	4603      	mov	r3, r0
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff f8e8 	bl	8003a2c <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_get_nodeEv>
 800485c:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800485e:	6838      	ldr	r0, [r7, #0]
 8004860:	f7fe fe2c 	bl	80034bc <_ZSt7forwardIRKSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004864:	4603      	mov	r3, r0
 8004866:	461a      	mov	r2, r3
 8004868:	68f9      	ldr	r1, [r7, #12]
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f99a 	bl	8004ba4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>
	  return __tmp;
 8004870:	68fb      	ldr	r3, [r7, #12]
	}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7destroyISB_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 800487a:	b580      	push	{r7, lr}
 800487c:	b082      	sub	sp, #8
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8004884:	6838      	ldr	r0, [r7, #0]
 8004886:	f7fc fbd3 	bl	8001030 <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateEPSC_j>:
      deallocate(_Tp* __p, size_type __t)
 8004892:	b580      	push	{r7, lr}
 8004894:	b084      	sub	sp, #16
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	222c      	movs	r2, #44	; 0x2c
 80048a2:	fb02 f303 	mul.w	r3, r2, r3
 80048a6:	4619      	mov	r1, r3
 80048a8:	68b8      	ldr	r0, [r7, #8]
 80048aa:	f009 fb26 	bl	800defa <_ZdlPvj>
      }
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff fa17 	bl	8003cf4 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_get_nodeEv>
 80048c6:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80048c8:	6838      	ldr	r0, [r7, #0]
 80048ca:	f7fe feae 	bl	800362a <_ZSt7forwardIRKSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 80048ce:	4603      	mov	r3, r0
 80048d0:	461a      	mov	r2, r3
 80048d2:	68f9      	ldr	r1, [r7, #12]
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f985 	bl	8004be4 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>
	  return __tmp;
 80048da:	68fb      	ldr	r3, [r7, #12]
	}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7destroyISB_EEvPT_>:
	destroy(_Up* __p)
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80048ee:	6838      	ldr	r0, [r7, #0]
 80048f0:	f7fc fc86 	bl	8001200 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 80048f4:	bf00      	nop
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateEPSC_j>:
      deallocate(_Tp* __p, size_type __t)
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	222c      	movs	r2, #44	; 0x2c
 800490c:	fb02 f303 	mul.w	r3, r2, r3
 8004910:	4619      	mov	r1, r3
 8004912:	68b8      	ldr	r0, [r7, #8]
 8004914:	f009 faf1 	bl	800defa <_ZdlPvj>
      }
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff fb01 	bl	8003f32 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_get_nodeEv>
 8004930:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8004932:	6838      	ldr	r0, [r7, #0]
 8004934:	f7fe ff30 	bl	8003798 <_ZSt7forwardIRKSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004938:	4603      	mov	r3, r0
 800493a:	461a      	mov	r2, r3
 800493c:	68f9      	ldr	r1, [r7, #12]
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f970 	bl	8004c24 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>
	  return __tmp;
 8004944:	68fb      	ldr	r3, [r7, #12]
	}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7destroyISB_EEvPT_>:
	destroy(_Up* __p)
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8004958:	6838      	ldr	r0, [r7, #0]
 800495a:	f7fc fd39 	bl	80013d0 <_ZNSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateEPSC_j>:
      deallocate(_Tp* __p, size_type __t)
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	222c      	movs	r2, #44	; 0x2c
 8004976:	fb02 f303 	mul.w	r3, r2, r3
 800497a:	4619      	mov	r1, r3
 800497c:	68b8      	ldr	r0, [r7, #8]
 800497e:	f009 fabc 	bl	800defa <_ZdlPvj>
      }
 8004982:	bf00      	nop
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE14_M_create_nodeIJRKS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7ff fbeb 	bl	8004170 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_get_nodeEv>
 800499a:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800499c:	6838      	ldr	r0, [r7, #0]
 800499e:	f7fe ffb2 	bl	8003906 <_ZSt7forwardIRKSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 80049a2:	4603      	mov	r3, r0
 80049a4:	461a      	mov	r2, r3
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f95b 	bl	8004c64 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>
	  return __tmp;
 80049ae:	68fb      	ldr	r3, [r7, #12]
	}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7destroyISB_EEvPT_>:
	destroy(_Up* __p)
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80049c2:	6838      	ldr	r0, [r7, #0]
 80049c4:	f7fc fd9a 	bl	80014fc <_ZNSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateEPSC_j>:
      deallocate(_Tp* __p, size_type __t)
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	222c      	movs	r2, #44	; 0x2c
 80049e0:	fb02 f303 	mul.w	r3, r2, r3
 80049e4:	4619      	mov	r1, r3
 80049e6:	68b8      	ldr	r0, [r7, #8]
 80049e8:	f009 fa87 	bl	800defa <_ZdlPvj>
      }
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f94f 	bl	8004ca4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE11_M_max_sizeEv>
 8004a06:	4602      	mov	r2, r0
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	bf8c      	ite	hi
 8004a0e:	2301      	movhi	r3, #1
 8004a10:	2300      	movls	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004a18:	f009 fb37 	bl	800e08a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	222c      	movs	r2, #44	; 0x2c
 8004a20:	fb02 f303 	mul.w	r3, r2, r3
 8004a24:	4618      	mov	r0, r3
 8004a26:	f009 fa6a 	bl	800defe <_Znwj>
 8004a2a:	4603      	mov	r3, r0
      }
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>:
      _M_addr() const noexcept
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f927 	bl	8004cc0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE11_M_max_sizeEv>
 8004a72:	4602      	mov	r2, r0
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4293      	cmp	r3, r2
 8004a78:	bf8c      	ite	hi
 8004a7a:	2301      	movhi	r3, #1
 8004a7c:	2300      	movls	r3, #0
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004a84:	f009 fb01 	bl	800e08a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	222c      	movs	r2, #44	; 0x2c
 8004a8c:	fb02 f303 	mul.w	r3, r2, r3
 8004a90:	4618      	mov	r0, r3
 8004a92:	f009 fa34 	bl	800defe <_Znwj>
 8004a96:	4603      	mov	r3, r0
      }
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>:
      _M_addr() const noexcept
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f8ff 	bl	8004cdc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE11_M_max_sizeEv>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	bf8c      	ite	hi
 8004ae6:	2301      	movhi	r3, #1
 8004ae8:	2300      	movls	r3, #0
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004af0:	f009 facb 	bl	800e08a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	222c      	movs	r2, #44	; 0x2c
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	4618      	mov	r0, r3
 8004afe:	f009 f9fe 	bl	800defe <_Znwj>
 8004b02:	4603      	mov	r3, r0
      }
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4618      	mov	r0, r3
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>:
      _M_addr() const noexcept
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f8d7 	bl	8004cf8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE11_M_max_sizeEv>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	bf8c      	ite	hi
 8004b52:	2301      	movhi	r3, #1
 8004b54:	2300      	movls	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004b5c:	f009 fa95 	bl	800e08a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	222c      	movs	r2, #44	; 0x2c
 8004b64:	fb02 f303 	mul.w	r3, r2, r3
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f009 f9c8 	bl	800defe <_Znwj>
 8004b6e:	4603      	mov	r3, r0
      }
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>:
      _M_addr() const noexcept
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8004ba4:	b5b0      	push	{r4, r5, r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	202c      	movs	r0, #44	; 0x2c
 8004bb6:	f7fc fa0a 	bl	8000fce <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f7ff fbff 	bl	80043be <_ZNSt8_Rb_treeI24ISDS_accOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	68b8      	ldr	r0, [r7, #8]
 8004bc4:	f7fd fef2 	bl	80029ac <_ZNSt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 8004bc8:	4605      	mov	r5, r0
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fe fc76 	bl	80034bc <_ZSt7forwardIRKSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f000 f89c 	bl	8004d14 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>
	}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bdb0      	pop	{r4, r5, r7, pc}

08004be4 <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8004be4:	b5b0      	push	{r4, r5, r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	202c      	movs	r0, #44	; 0x2c
 8004bf6:	f7fc f9ea 	bl	8000fce <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f7ff fc26 	bl	800444c <_ZNSt8_Rb_treeI25ISDS_gyroOutputDataRate_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>
 8004c00:	4604      	mov	r4, r0
 8004c02:	68b8      	ldr	r0, [r7, #8]
 8004c04:	f7fe f825 	bl	8002c52 <_ZNSt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 8004c08:	4605      	mov	r5, r0
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fe fd0d 	bl	800362a <_ZSt7forwardIRKSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004c10:	4603      	mov	r3, r0
 8004c12:	461a      	mov	r2, r3
 8004c14:	4629      	mov	r1, r5
 8004c16:	4620      	mov	r0, r4
 8004c18:	f000 f88f 	bl	8004d3a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>
	}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bdb0      	pop	{r4, r5, r7, pc}

08004c24 <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8004c24:	b5b0      	push	{r4, r5, r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4619      	mov	r1, r3
 8004c34:	202c      	movs	r0, #44	; 0x2c
 8004c36:	f7fc f9ca 	bl	8000fce <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f7ff fc4d 	bl	80044da <_ZNSt8_Rb_treeI19ISDS_accFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>
 8004c40:	4604      	mov	r4, r0
 8004c42:	68b8      	ldr	r0, [r7, #8]
 8004c44:	f7fe f958 	bl	8002ef8 <_ZNSt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 8004c48:	4605      	mov	r5, r0
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fe fda4 	bl	8003798 <_ZSt7forwardIRKSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004c50:	4603      	mov	r3, r0
 8004c52:	461a      	mov	r2, r3
 8004c54:	4629      	mov	r1, r5
 8004c56:	4620      	mov	r0, r4
 8004c58:	f000 f882 	bl	8004d60 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>
	}
 8004c5c:	bf00      	nop
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bdb0      	pop	{r4, r5, r7, pc}

08004c64 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE17_M_construct_nodeIJRKS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8004c64:	b5b0      	push	{r4, r5, r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4619      	mov	r1, r3
 8004c74:	202c      	movs	r0, #44	; 0x2c
 8004c76:	f7fc f9aa 	bl	8000fce <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f7ff fc74 	bl	8004568 <_ZNSt8_Rb_treeI20ISDS_gyroFullScale_tSt4pairIKS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE21_M_get_Node_allocatorEv>
 8004c80:	4604      	mov	r4, r0
 8004c82:	68b8      	ldr	r0, [r7, #8]
 8004c84:	f7fe fa8b 	bl	800319e <_ZNSt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 8004c88:	4605      	mov	r5, r0
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fe fe3b 	bl	8003906 <_ZSt7forwardIRKSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004c90:	4603      	mov	r3, r0
 8004c92:	461a      	mov	r2, r3
 8004c94:	4629      	mov	r1, r5
 8004c96:	4620      	mov	r0, r4
 8004c98:	f000 f875 	bl	8004d86 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>
	}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bdb0      	pop	{r4, r5, r7, pc}

08004ca4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004cac:	4b03      	ldr	r3, [pc, #12]	; (8004cbc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	02e8ba2e 	.word	0x02e8ba2e

08004cc0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004cc8:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE11_M_max_sizeEv+0x18>)
      }
 8004cca:	4618      	mov	r0, r3
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	02e8ba2e 	.word	0x02e8ba2e

08004cdc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004ce4:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE11_M_max_sizeEv+0x18>)
      }
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	02e8ba2e 	.word	0x02e8ba2e

08004cf8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004d00:	4b03      	ldr	r3, [pc, #12]	; (8004d10 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE11_M_max_sizeEv+0x18>)
      }
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	02e8ba2e 	.word	0x02e8ba2e

08004d14 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fe fbcb 	bl	80034bc <_ZSt7forwardIRKSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004d26:	4603      	mov	r3, r0
 8004d28:	461a      	mov	r2, r3
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f853 	bl	8004dd8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructISB_JRKSB_EEEvPT_DpOT0_>
	}
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fe fc6f 	bl	800362a <_ZSt7forwardIRKSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f86e 	bl	8004e34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructISB_JRKSB_EEEvPT_DpOT0_>
	}
 8004d58:	bf00      	nop
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fe fd13 	bl	8003798 <_ZSt7forwardIRKSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004d72:	4603      	mov	r3, r0
 8004d74:	461a      	mov	r2, r3
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f889 	bl	8004e90 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructISB_JRKSB_EEEvPT_DpOT0_>
	}
 8004d7e:	bf00      	nop
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE9constructISA_JRKSA_EEEvRSC_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fe fdb7 	bl	8003906 <_ZSt7forwardIRKSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f8a4 	bl	8004eec <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructISB_JRKSB_EEEvPT_DpOT0_>
	}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS8_>:
      constexpr pair(const pair&) = default;	///< Copy constructor
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781a      	ldrb	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	1d1a      	adds	r2, r3, #4
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4610      	mov	r0, r2
 8004dca:	f009 f9d5 	bl	800e178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructISB_JRKSB_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004dd8:	b590      	push	{r4, r7, lr}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7fe fb69 	bl	80034bc <_ZSt7forwardIRKSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004dea:	4604      	mov	r4, r0
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4619      	mov	r1, r3
 8004df0:	201c      	movs	r0, #28
 8004df2:	f7fc f8ec 	bl	8000fce <_ZnwjPv>
 8004df6:	4603      	mov	r3, r0
 8004df8:	4621      	mov	r1, r4
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff ffd6 	bl	8004dac <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS8_>
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd90      	pop	{r4, r7, pc}

08004e08 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS8_>:
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781a      	ldrb	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	1d1a      	adds	r2, r3, #4
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	3304      	adds	r3, #4
 8004e22:	4619      	mov	r1, r3
 8004e24:	4610      	mov	r0, r2
 8004e26:	f009 f9a7 	bl	800e178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructISB_JRKSB_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004e34:	b590      	push	{r4, r7, lr}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7fe fbf2 	bl	800362a <_ZSt7forwardIRKSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004e46:	4604      	mov	r4, r0
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	201c      	movs	r0, #28
 8004e4e:	f7fc f8be 	bl	8000fce <_ZnwjPv>
 8004e52:	4603      	mov	r3, r0
 8004e54:	4621      	mov	r1, r4
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff ffd6 	bl	8004e08 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS8_>
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd90      	pop	{r4, r7, pc}

08004e64 <_ZNSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS8_>:
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781a      	ldrb	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	701a      	strb	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	1d1a      	adds	r2, r3, #4
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4610      	mov	r0, r2
 8004e82:	f009 f979 	bl	800e178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructISB_JRKSB_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7fe fc7b 	bl	8003798 <_ZSt7forwardIRKSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	201c      	movs	r0, #28
 8004eaa:	f7fc f890 	bl	8000fce <_ZnwjPv>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff ffd6 	bl	8004e64 <_ZNSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS8_>
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd90      	pop	{r4, r7, pc}

08004ec0 <_ZNSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS8_>:
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781a      	ldrb	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	1d1a      	adds	r2, r3, #4
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f009 f94b 	bl	800e178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructISB_JRKSB_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7fe fd04 	bl	8003906 <_ZSt7forwardIRKSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004efe:	4604      	mov	r4, r0
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4619      	mov	r1, r3
 8004f04:	201c      	movs	r0, #28
 8004f06:	f7fc f862 	bl	8000fce <_ZnwjPv>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff ffd6 	bl	8004ec0 <_ZNSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS8_>
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd90      	pop	{r4, r7, pc}

08004f1c <_Z41__static_initialization_and_destruction_0ii>:
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
		return status;
	} else {
		return HAL_I2C_Mem_Write(i2c_handler, i2c_device_addr, regAddr, i2cMemAddSize, data, numBytesToWrite, I2C_TIMEOUT);
	}
}
 8004f1c:	b590      	push	{r4, r7, lr}
 8004f1e:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 8004f22:	af02      	add	r7, sp, #8
 8004f24:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004f28:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004f2c:	6018      	str	r0, [r3, #0]
 8004f2e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004f32:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004f36:	6019      	str	r1, [r3, #0]
 8004f38:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004f3c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	f040 82b4 	bne.w	80054b0 <_Z41__static_initialization_and_destruction_0ii+0x594>
 8004f48:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004f4c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f56:	4293      	cmp	r3, r2
 8004f58:	f040 82aa 	bne.w	80054b0 <_Z41__static_initialization_and_destruction_0ii+0x594>
    {ISDS_accOdrOff, "Off"},
 8004f5c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004f60:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_accOutputDataRate_t, std::string> accOdr_str_map = {
 8004f68:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 8004f6c:	f107 0314 	add.w	r3, r7, #20
 8004f70:	4ad9      	ldr	r2, [pc, #868]	; (80052d8 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fc f86a 	bl	800104c <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA4_KcLb1EEEOT_OT0_>
    {ISDS_accOdr12Hz5, "12.5 Hz"},
 8004f78:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004f7c:	f2a3 23ab 	subw	r3, r3, #683	; 0x2ab
 8004f80:	2201      	movs	r2, #1
 8004f82:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_accOutputDataRate_t, std::string> accOdr_str_map = {
 8004f84:	f207 1165 	addw	r1, r7, #357	; 0x165
 8004f88:	f107 0314 	add.w	r3, r7, #20
 8004f8c:	331c      	adds	r3, #28
 8004f8e:	4ad3      	ldr	r2, [pc, #844]	; (80052dc <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fc f884 	bl	800109e <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA8_KcLb1EEEOT_OT0_>
    {ISDS_accOdr26Hz, "26 Hz"},
 8004f96:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004f9a:	f2a3 23aa 	subw	r3, r3, #682	; 0x2aa
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_accOutputDataRate_t, std::string> accOdr_str_map = {
 8004fa2:	f507 71b3 	add.w	r1, r7, #358	; 0x166
 8004fa6:	f107 0314 	add.w	r3, r7, #20
 8004faa:	3338      	adds	r3, #56	; 0x38
 8004fac:	4acc      	ldr	r2, [pc, #816]	; (80052e0 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fc f89e 	bl	80010f0 <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA6_KcLb1EEEOT_OT0_>
    {ISDS_accOdr52Hz, "52 Hz"},
 8004fb4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004fb8:	f2a3 23a9 	subw	r3, r3, #681	; 0x2a9
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_accOutputDataRate_t, std::string> accOdr_str_map = {
 8004fc0:	f207 1167 	addw	r1, r7, #359	; 0x167
 8004fc4:	f107 0314 	add.w	r3, r7, #20
 8004fc8:	3354      	adds	r3, #84	; 0x54
 8004fca:	4ac6      	ldr	r2, [pc, #792]	; (80052e4 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fc f88f 	bl	80010f0 <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA6_KcLb1EEEOT_OT0_>
    {ISDS_accOdr104Hz, "104 Hz"},
 8004fd2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004fd6:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8004fda:	2204      	movs	r2, #4
 8004fdc:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_accOutputDataRate_t, std::string> accOdr_str_map = {
 8004fde:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8004fe2:	f107 0314 	add.w	r3, r7, #20
 8004fe6:	3370      	adds	r3, #112	; 0x70
 8004fe8:	4abf      	ldr	r2, [pc, #764]	; (80052e8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fc f8a9 	bl	8001142 <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA7_KcLb1EEEOT_OT0_>
    {ISDS_accOdr208Hz, "208 Hz"},
 8004ff0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004ff4:	f2a3 23a7 	subw	r3, r3, #679	; 0x2a7
 8004ff8:	2205      	movs	r2, #5
 8004ffa:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_accOutputDataRate_t, std::string> accOdr_str_map = {
 8004ffc:	f207 1169 	addw	r1, r7, #361	; 0x169
 8005000:	f107 0314 	add.w	r3, r7, #20
 8005004:	338c      	adds	r3, #140	; 0x8c
 8005006:	4ab9      	ldr	r2, [pc, #740]	; (80052ec <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8005008:	4618      	mov	r0, r3
 800500a:	f7fc f89a 	bl	8001142 <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA7_KcLb1EEEOT_OT0_>
    {ISDS_accOdr416Hz, "416 Hz"},
 800500e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005012:	f2a3 23a6 	subw	r3, r3, #678	; 0x2a6
 8005016:	2206      	movs	r2, #6
 8005018:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_accOutputDataRate_t, std::string> accOdr_str_map = {
 800501a:	f507 71b5 	add.w	r1, r7, #362	; 0x16a
 800501e:	f107 0314 	add.w	r3, r7, #20
 8005022:	33a8      	adds	r3, #168	; 0xa8
 8005024:	4ab2      	ldr	r2, [pc, #712]	; (80052f0 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8005026:	4618      	mov	r0, r3
 8005028:	f7fc f88b 	bl	8001142 <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA7_KcLb1EEEOT_OT0_>
    {ISDS_accOdr833Hz, "833 Hz"},
 800502c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005030:	f2a3 23a5 	subw	r3, r3, #677	; 0x2a5
 8005034:	2207      	movs	r2, #7
 8005036:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_accOutputDataRate_t, std::string> accOdr_str_map = {
 8005038:	f207 116b 	addw	r1, r7, #363	; 0x16b
 800503c:	f107 0314 	add.w	r3, r7, #20
 8005040:	33c4      	adds	r3, #196	; 0xc4
 8005042:	4aac      	ldr	r2, [pc, #688]	; (80052f4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8005044:	4618      	mov	r0, r3
 8005046:	f7fc f87c 	bl	8001142 <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA7_KcLb1EEEOT_OT0_>
    {ISDS_accOdr1k66Hz, "1.66 kHz"},
 800504a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800504e:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8005052:	2208      	movs	r2, #8
 8005054:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_accOutputDataRate_t, std::string> accOdr_str_map = {
 8005056:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 800505a:	f107 0314 	add.w	r3, r7, #20
 800505e:	33e0      	adds	r3, #224	; 0xe0
 8005060:	4aa5      	ldr	r2, [pc, #660]	; (80052f8 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8005062:	4618      	mov	r0, r3
 8005064:	f7fc f896 	bl	8001194 <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA9_KcLb1EEEOT_OT0_>
    {ISDS_accOdr3k33Hz, "3.33 kHz"},
 8005068:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800506c:	f2a3 23a3 	subw	r3, r3, #675	; 0x2a3
 8005070:	2209      	movs	r2, #9
 8005072:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_accOutputDataRate_t, std::string> accOdr_str_map = {
 8005074:	f207 116d 	addw	r1, r7, #365	; 0x16d
 8005078:	f107 0314 	add.w	r3, r7, #20
 800507c:	33fc      	adds	r3, #252	; 0xfc
 800507e:	4a9f      	ldr	r2, [pc, #636]	; (80052fc <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8005080:	4618      	mov	r0, r3
 8005082:	f7fc f887 	bl	8001194 <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA9_KcLb1EEEOT_OT0_>
    {ISDS_accOdr6k66Hz, "6.66 kHz"},
 8005086:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800508a:	f2a3 23a2 	subw	r3, r3, #674	; 0x2a2
 800508e:	220a      	movs	r2, #10
 8005090:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_accOutputDataRate_t, std::string> accOdr_str_map = {
 8005092:	f507 71b7 	add.w	r1, r7, #366	; 0x16e
 8005096:	f107 0314 	add.w	r3, r7, #20
 800509a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800509e:	4a98      	ldr	r2, [pc, #608]	; (8005300 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fc f877 	bl	8001194 <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA9_KcLb1EEEOT_OT0_>
    {ISDS_accOdr1Hz6, "1.6 Hz"}
 80050a6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80050aa:	f2a3 23a1 	subw	r3, r3, #673	; 0x2a1
 80050ae:	220b      	movs	r2, #11
 80050b0:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_accOutputDataRate_t, std::string> accOdr_str_map = {
 80050b2:	f207 116f 	addw	r1, r7, #367	; 0x16f
 80050b6:	f107 0314 	add.w	r3, r7, #20
 80050ba:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80050be:	4a91      	ldr	r2, [pc, #580]	; (8005304 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fc f83e 	bl	8001142 <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA7_KcLb1EEEOT_OT0_>
 80050c6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80050ca:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80050ce:	f107 0214 	add.w	r2, r7, #20
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80050d8:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80050dc:	220c      	movs	r2, #12
 80050de:	605a      	str	r2, [r3, #4]
 80050e0:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fc fb71 	bl	80017cc <_ZNSaISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 80050ea:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 80050ee:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80050f2:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 80050f6:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	460b      	mov	r3, r1
 80050fe:	ca06      	ldmia	r2, {r1, r2}
 8005100:	4881      	ldr	r0, [pc, #516]	; (8005308 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 8005102:	f7fc fb7b 	bl	80017fc <_ZNSt3mapI24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS0_ESaISt4pairIKS0_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 8005106:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800510a:	4618      	mov	r0, r3
 800510c:	f7fc fb6a 	bl	80017e4 <_ZNSaISt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>
};
 8005110:	f107 0414 	add.w	r4, r7, #20
 8005114:	f504 74a8 	add.w	r4, r4, #336	; 0x150
static std::map<ISDS_accOutputDataRate_t, std::string> accOdr_str_map = {
 8005118:	f107 0314 	add.w	r3, r7, #20
 800511c:	429c      	cmp	r4, r3
 800511e:	d004      	beq.n	800512a <_Z41__static_initialization_and_destruction_0ii+0x20e>
};
 8005120:	3c1c      	subs	r4, #28
 8005122:	4620      	mov	r0, r4
 8005124:	f7fb ff84 	bl	8001030 <_ZNSt4pairIK24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
static std::map<ISDS_accOutputDataRate_t, std::string> accOdr_str_map = {
 8005128:	e7f6      	b.n	8005118 <_Z41__static_initialization_and_destruction_0ii+0x1fc>
    {ISDS_gyroOdrOff, "Off"},
 800512a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800512e:	f2a3 135b 	subw	r3, r3, #347	; 0x15b
 8005132:	2200      	movs	r2, #0
 8005134:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_gyroOutputDataRate_t, std::string> gyroOdr_str_map = {
 8005136:	f207 21b5 	addw	r1, r7, #693	; 0x2b5
 800513a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800513e:	4a66      	ldr	r2, [pc, #408]	; (80052d8 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8005140:	4618      	mov	r0, r3
 8005142:	f7fc f86b 	bl	800121c <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA4_KcLb1EEEOT_OT0_>
    {ISDS_gyroOdr12Hz5, "12.5 Hz"},
 8005146:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800514a:	f5a3 73ad 	sub.w	r3, r3, #346	; 0x15a
 800514e:	2201      	movs	r2, #1
 8005150:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_gyroOutputDataRate_t, std::string> gyroOdr_str_map = {
 8005152:	f207 21b6 	addw	r1, r7, #694	; 0x2b6
 8005156:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800515a:	331c      	adds	r3, #28
 800515c:	4a5f      	ldr	r2, [pc, #380]	; (80052dc <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 800515e:	4618      	mov	r0, r3
 8005160:	f7fc f885 	bl	800126e <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA8_KcLb1EEEOT_OT0_>
    {ISDS_gyroOdr26Hz, "26 Hz"},
 8005164:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005168:	f2a3 1359 	subw	r3, r3, #345	; 0x159
 800516c:	2202      	movs	r2, #2
 800516e:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_gyroOutputDataRate_t, std::string> gyroOdr_str_map = {
 8005170:	f207 21b7 	addw	r1, r7, #695	; 0x2b7
 8005174:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005178:	3338      	adds	r3, #56	; 0x38
 800517a:	4a59      	ldr	r2, [pc, #356]	; (80052e0 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 800517c:	4618      	mov	r0, r3
 800517e:	f7fc f89f 	bl	80012c0 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA6_KcLb1EEEOT_OT0_>
    {ISDS_gyroOdr52Hz, "52 Hz"},
 8005182:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005186:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800518a:	2203      	movs	r2, #3
 800518c:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_gyroOutputDataRate_t, std::string> gyroOdr_str_map = {
 800518e:	f507 712e 	add.w	r1, r7, #696	; 0x2b8
 8005192:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005196:	3354      	adds	r3, #84	; 0x54
 8005198:	4a52      	ldr	r2, [pc, #328]	; (80052e4 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 800519a:	4618      	mov	r0, r3
 800519c:	f7fc f890 	bl	80012c0 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA6_KcLb1EEEOT_OT0_>
    {ISDS_gyroOdr104Hz, "104 Hz"},
 80051a0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80051a4:	f2a3 1357 	subw	r3, r3, #343	; 0x157
 80051a8:	2204      	movs	r2, #4
 80051aa:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_gyroOutputDataRate_t, std::string> gyroOdr_str_map = {
 80051ac:	f207 21b9 	addw	r1, r7, #697	; 0x2b9
 80051b0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80051b4:	3370      	adds	r3, #112	; 0x70
 80051b6:	4a4c      	ldr	r2, [pc, #304]	; (80052e8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fc f8aa 	bl	8001312 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA7_KcLb1EEEOT_OT0_>
    {ISDS_gyroOdr208Hz, "208 Hz"},
 80051be:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80051c2:	f5a3 73ab 	sub.w	r3, r3, #342	; 0x156
 80051c6:	2205      	movs	r2, #5
 80051c8:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_gyroOutputDataRate_t, std::string> gyroOdr_str_map = {
 80051ca:	f207 21ba 	addw	r1, r7, #698	; 0x2ba
 80051ce:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80051d2:	338c      	adds	r3, #140	; 0x8c
 80051d4:	4a45      	ldr	r2, [pc, #276]	; (80052ec <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fc f89b 	bl	8001312 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA7_KcLb1EEEOT_OT0_>
    {ISDS_gyroOdr416Hz, "416 Hz"},
 80051dc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80051e0:	f2a3 1355 	subw	r3, r3, #341	; 0x155
 80051e4:	2206      	movs	r2, #6
 80051e6:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_gyroOutputDataRate_t, std::string> gyroOdr_str_map = {
 80051e8:	f207 21bb 	addw	r1, r7, #699	; 0x2bb
 80051ec:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80051f0:	33a8      	adds	r3, #168	; 0xa8
 80051f2:	4a3f      	ldr	r2, [pc, #252]	; (80052f0 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fc f88c 	bl	8001312 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA7_KcLb1EEEOT_OT0_>
    {ISDS_gyroOdr833Hz, "833 Hz"},
 80051fa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80051fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005202:	2207      	movs	r2, #7
 8005204:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_gyroOutputDataRate_t, std::string> gyroOdr_str_map = {
 8005206:	f507 712f 	add.w	r1, r7, #700	; 0x2bc
 800520a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800520e:	33c4      	adds	r3, #196	; 0xc4
 8005210:	4a38      	ldr	r2, [pc, #224]	; (80052f4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8005212:	4618      	mov	r0, r3
 8005214:	f7fc f87d 	bl	8001312 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA7_KcLb1EEEOT_OT0_>
    {ISDS_gyroOdr1k66Hz, "1.66 kHz"},
 8005218:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800521c:	f2a3 1353 	subw	r3, r3, #339	; 0x153
 8005220:	2208      	movs	r2, #8
 8005222:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_gyroOutputDataRate_t, std::string> gyroOdr_str_map = {
 8005224:	f207 21bd 	addw	r1, r7, #701	; 0x2bd
 8005228:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800522c:	33e0      	adds	r3, #224	; 0xe0
 800522e:	4a32      	ldr	r2, [pc, #200]	; (80052f8 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8005230:	4618      	mov	r0, r3
 8005232:	f7fc f897 	bl	8001364 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA9_KcLb1EEEOT_OT0_>
    {ISDS_gyroOdr3k33Hz, "3.33 kHz"},
 8005236:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800523a:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 800523e:	2209      	movs	r2, #9
 8005240:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_gyroOutputDataRate_t, std::string> gyroOdr_str_map = {
 8005242:	f207 21be 	addw	r1, r7, #702	; 0x2be
 8005246:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800524a:	33fc      	adds	r3, #252	; 0xfc
 800524c:	4a2b      	ldr	r2, [pc, #172]	; (80052fc <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 800524e:	4618      	mov	r0, r3
 8005250:	f7fc f888 	bl	8001364 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA9_KcLb1EEEOT_OT0_>
    {ISDS_gyroOdr6k66Hz, "6.66 kHz"}
 8005254:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005258:	f2a3 1351 	subw	r3, r3, #337	; 0x151
 800525c:	220a      	movs	r2, #10
 800525e:	701a      	strb	r2, [r3, #0]
static std::map<ISDS_gyroOutputDataRate_t, std::string> gyroOdr_str_map = {
 8005260:	f207 21bf 	addw	r1, r7, #703	; 0x2bf
 8005264:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005268:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800526c:	4a24      	ldr	r2, [pc, #144]	; (8005300 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 800526e:	4618      	mov	r0, r3
 8005270:	f7fc f878 	bl	8001364 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA9_KcLb1EEEOT_OT0_>
 8005274:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005278:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800527c:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005286:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800528a:	220b      	movs	r2, #11
 800528c:	605a      	str	r2, [r3, #4]
 800528e:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8005292:	4618      	mov	r0, r3
 8005294:	f7fc fb0e 	bl	80018b4 <_ZNSaISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8005298:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 800529c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80052a0:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 80052a4:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	460b      	mov	r3, r1
 80052ac:	ca06      	ldmia	r2, {r1, r2}
 80052ae:	4817      	ldr	r0, [pc, #92]	; (800530c <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 80052b0:	f7fc fb18 	bl	80018e4 <_ZNSt3mapI25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS0_ESaISt4pairIKS0_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80052b4:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fc fb07 	bl	80018cc <_ZNSaISt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>
};
 80052be:	f507 74c0 	add.w	r4, r7, #384	; 0x180
 80052c2:	f504 749a 	add.w	r4, r4, #308	; 0x134
static std::map<ISDS_gyroOutputDataRate_t, std::string> gyroOdr_str_map = {
 80052c6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80052ca:	429c      	cmp	r4, r3
 80052cc:	d020      	beq.n	8005310 <_Z41__static_initialization_and_destruction_0ii+0x3f4>
};
 80052ce:	3c1c      	subs	r4, #28
 80052d0:	4620      	mov	r0, r4
 80052d2:	f7fb ff95 	bl	8001200 <_ZNSt4pairIK25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
static std::map<ISDS_gyroOutputDataRate_t, std::string> gyroOdr_str_map = {
 80052d6:	e7f6      	b.n	80052c6 <_Z41__static_initialization_and_destruction_0ii+0x3aa>
 80052d8:	08011730 	.word	0x08011730
 80052dc:	08011734 	.word	0x08011734
 80052e0:	0801173c 	.word	0x0801173c
 80052e4:	08011744 	.word	0x08011744
 80052e8:	0801174c 	.word	0x0801174c
 80052ec:	08011754 	.word	0x08011754
 80052f0:	0801175c 	.word	0x0801175c
 80052f4:	08011764 	.word	0x08011764
 80052f8:	0801176c 	.word	0x0801176c
 80052fc:	08011778 	.word	0x08011778
 8005300:	08011784 	.word	0x08011784
 8005304:	08011790 	.word	0x08011790
 8005308:	200001f8 	.word	0x200001f8
 800530c:	20000210 	.word	0x20000210
    {ISDS_accFullScaleTwoG, "2G"},
 8005310:	2300      	movs	r3, #0
 8005312:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
static std::map<ISDS_accFullScale_t, std::string> accFullScale_str_map = {
 8005316:	f207 315f 	addw	r1, r7, #863	; 0x35f
 800531a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800531e:	4a75      	ldr	r2, [pc, #468]	; (80054f4 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 8005320:	4618      	mov	r0, r3
 8005322:	f7fc f863 	bl	80013ec <_ZNSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA3_KcLb1EEEOT_OT0_>
    {ISDS_accFullScaleSixteenG, "16G"},
 8005326:	2301      	movs	r3, #1
 8005328:	f887 3360 	strb.w	r3, [r7, #864]	; 0x360
static std::map<ISDS_accFullScale_t, std::string> accFullScale_str_map = {
 800532c:	f507 7158 	add.w	r1, r7, #864	; 0x360
 8005330:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005334:	331c      	adds	r3, #28
 8005336:	4a70      	ldr	r2, [pc, #448]	; (80054f8 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8005338:	4618      	mov	r0, r3
 800533a:	f7fc f880 	bl	800143e <_ZNSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA4_KcLb1EEEOT_OT0_>
    {ISDS_accFullScaleFourG, "4G"},
 800533e:	2302      	movs	r3, #2
 8005340:	f887 3361 	strb.w	r3, [r7, #865]	; 0x361
static std::map<ISDS_accFullScale_t, std::string> accFullScale_str_map = {
 8005344:	f207 3161 	addw	r1, r7, #865	; 0x361
 8005348:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800534c:	3338      	adds	r3, #56	; 0x38
 800534e:	4a6b      	ldr	r2, [pc, #428]	; (80054fc <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 8005350:	4618      	mov	r0, r3
 8005352:	f7fc f84b 	bl	80013ec <_ZNSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA3_KcLb1EEEOT_OT0_>
    {ISDS_accFullScaleEightG, "8G"},
 8005356:	2303      	movs	r3, #3
 8005358:	f887 3362 	strb.w	r3, [r7, #866]	; 0x362
static std::map<ISDS_accFullScale_t, std::string> accFullScale_str_map = {
 800535c:	f207 3162 	addw	r1, r7, #866	; 0x362
 8005360:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005364:	3354      	adds	r3, #84	; 0x54
 8005366:	4a66      	ldr	r2, [pc, #408]	; (8005500 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8005368:	4618      	mov	r0, r3
 800536a:	f7fc f83f 	bl	80013ec <_ZNSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA3_KcLb1EEEOT_OT0_>
    {ISDS_accFullScaleInvalid, "Invalid"}
 800536e:	2304      	movs	r3, #4
 8005370:	f887 3363 	strb.w	r3, [r7, #867]	; 0x363
static std::map<ISDS_accFullScale_t, std::string> accFullScale_str_map = {
 8005374:	f207 3163 	addw	r1, r7, #867	; 0x363
 8005378:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800537c:	3370      	adds	r3, #112	; 0x70
 800537e:	4a61      	ldr	r2, [pc, #388]	; (8005504 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 8005380:	4618      	mov	r0, r3
 8005382:	f7fc f885 	bl	8001490 <_ZNSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA8_KcLb1EEEOT_OT0_>
 8005386:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800538a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800538e:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005398:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800539c:	2205      	movs	r2, #5
 800539e:	605a      	str	r2, [r3, #4]
 80053a0:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fc fb04 	bl	80019b2 <_ZNSaISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 80053aa:	f507 7159 	add.w	r1, r7, #868	; 0x364
 80053ae:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80053b2:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 80053b6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	460b      	mov	r3, r1
 80053be:	ca06      	ldmia	r2, {r1, r2}
 80053c0:	4851      	ldr	r0, [pc, #324]	; (8005508 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 80053c2:	f7fc fb0e 	bl	80019e2 <_ZNSt3mapI19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS0_ESaISt4pairIKS0_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 80053c6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fc fafd 	bl	80019ca <_ZNSaISt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>
};
 80053d0:	f507 7434 	add.w	r4, r7, #720	; 0x2d0
 80053d4:	348c      	adds	r4, #140	; 0x8c
static std::map<ISDS_accFullScale_t, std::string> accFullScale_str_map = {
 80053d6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80053da:	429c      	cmp	r4, r3
 80053dc:	d004      	beq.n	80053e8 <_Z41__static_initialization_and_destruction_0ii+0x4cc>
};
 80053de:	3c1c      	subs	r4, #28
 80053e0:	4620      	mov	r0, r4
 80053e2:	f7fb fff5 	bl	80013d0 <_ZNSt4pairIK19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
static std::map<ISDS_accFullScale_t, std::string> accFullScale_str_map = {
 80053e6:	e7f6      	b.n	80053d6 <_Z41__static_initialization_and_destruction_0ii+0x4ba>
    {ISDS_gyroFullScale250dps, "250 dps"},
 80053e8:	2300      	movs	r3, #0
 80053ea:	f887 3403 	strb.w	r3, [r7, #1027]	; 0x403
static std::map<ISDS_gyroFullScale_t, std::string> gyroFullScale_str_map = {
 80053ee:	f207 4103 	addw	r1, r7, #1027	; 0x403
 80053f2:	f507 735d 	add.w	r3, r7, #884	; 0x374
 80053f6:	4a45      	ldr	r2, [pc, #276]	; (800550c <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fc f88d 	bl	8001518 <_ZNSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA8_KcLb1EEEOT_OT0_>
    {ISDS_gyroFullScale125dps, "125 dps"},
 80053fe:	2301      	movs	r3, #1
 8005400:	f887 3404 	strb.w	r3, [r7, #1028]	; 0x404
static std::map<ISDS_gyroFullScale_t, std::string> gyroFullScale_str_map = {
 8005404:	f207 4104 	addw	r1, r7, #1028	; 0x404
 8005408:	f507 735d 	add.w	r3, r7, #884	; 0x374
 800540c:	331c      	adds	r3, #28
 800540e:	4a40      	ldr	r2, [pc, #256]	; (8005510 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 8005410:	4618      	mov	r0, r3
 8005412:	f7fc f881 	bl	8001518 <_ZNSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA8_KcLb1EEEOT_OT0_>
    {ISDS_gyroFullScale500dps, "500 dps"},
 8005416:	2302      	movs	r3, #2
 8005418:	f887 3405 	strb.w	r3, [r7, #1029]	; 0x405
static std::map<ISDS_gyroFullScale_t, std::string> gyroFullScale_str_map = {
 800541c:	f207 4105 	addw	r1, r7, #1029	; 0x405
 8005420:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8005424:	3338      	adds	r3, #56	; 0x38
 8005426:	4a3b      	ldr	r2, [pc, #236]	; (8005514 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8005428:	4618      	mov	r0, r3
 800542a:	f7fc f875 	bl	8001518 <_ZNSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA8_KcLb1EEEOT_OT0_>
    {ISDS_gyroFullScale1000dps, "1000 dps"},
 800542e:	2304      	movs	r3, #4
 8005430:	f887 3406 	strb.w	r3, [r7, #1030]	; 0x406
static std::map<ISDS_gyroFullScale_t, std::string> gyroFullScale_str_map = {
 8005434:	f207 4106 	addw	r1, r7, #1030	; 0x406
 8005438:	f507 735d 	add.w	r3, r7, #884	; 0x374
 800543c:	3354      	adds	r3, #84	; 0x54
 800543e:	4a36      	ldr	r2, [pc, #216]	; (8005518 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8005440:	4618      	mov	r0, r3
 8005442:	f7fc f892 	bl	800156a <_ZNSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA9_KcLb1EEEOT_OT0_>
    {ISDS_gyroFullScale2000dps, "2000 dps"}
 8005446:	2306      	movs	r3, #6
 8005448:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
static std::map<ISDS_gyroFullScale_t, std::string> gyroFullScale_str_map = {
 800544c:	f207 4107 	addw	r1, r7, #1031	; 0x407
 8005450:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8005454:	3370      	adds	r3, #112	; 0x70
 8005456:	4a31      	ldr	r2, [pc, #196]	; (800551c <_Z41__static_initialization_and_destruction_0ii+0x600>)
 8005458:	4618      	mov	r0, r3
 800545a:	f7fc f886 	bl	800156a <_ZNSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS0_RA9_KcLb1EEEOT_OT0_>
 800545e:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8005462:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005466:	2305      	movs	r3, #5
 8005468:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 800546c:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8005470:	4618      	mov	r0, r3
 8005472:	f7fc fb12 	bl	8001a9a <_ZNSaISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8005476:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800547a:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8005486:	ca06      	ldmia	r2, {r1, r2}
 8005488:	4825      	ldr	r0, [pc, #148]	; (8005520 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800548a:	f7fc fb1e 	bl	8001aca <_ZNSt3mapI20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS0_ESaISt4pairIKS0_S6_EEEC1ESt16initializer_listISB_ERKS8_RKSC_>
 800548e:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8005492:	4618      	mov	r0, r3
 8005494:	f7fc fb0d 	bl	8001ab2 <_ZNSaISt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>
};
 8005498:	f507 745d 	add.w	r4, r7, #884	; 0x374
 800549c:	348c      	adds	r4, #140	; 0x8c
static std::map<ISDS_gyroFullScale_t, std::string> gyroFullScale_str_map = {
 800549e:	f507 735d 	add.w	r3, r7, #884	; 0x374
 80054a2:	429c      	cmp	r4, r3
 80054a4:	d004      	beq.n	80054b0 <_Z41__static_initialization_and_destruction_0ii+0x594>
};
 80054a6:	3c1c      	subs	r4, #28
 80054a8:	4620      	mov	r0, r4
 80054aa:	f7fc f827 	bl	80014fc <_ZNSt4pairIK20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
static std::map<ISDS_gyroFullScale_t, std::string> gyroFullScale_str_map = {
 80054ae:	e7f6      	b.n	800549e <_Z41__static_initialization_and_destruction_0ii+0x582>
 80054b0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80054b4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d114      	bne.n	80054e8 <_Z41__static_initialization_and_destruction_0ii+0x5cc>
 80054be:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80054c2:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d10b      	bne.n	80054e8 <_Z41__static_initialization_and_destruction_0ii+0x5cc>
 80054d0:	4813      	ldr	r0, [pc, #76]	; (8005520 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 80054d2:	f7fc f873 	bl	80015bc <_ZNSt3mapI20ISDS_gyroFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS0_ESaISt4pairIKS0_S6_EEED1Ev>
static std::map<ISDS_accFullScale_t, std::string> accFullScale_str_map = {
 80054d6:	480c      	ldr	r0, [pc, #48]	; (8005508 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 80054d8:	f7fc f803 	bl	80014e2 <_ZNSt3mapI19ISDS_accFullScale_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS0_ESaISt4pairIKS0_S6_EEED1Ev>
static std::map<ISDS_gyroOutputDataRate_t, std::string> gyroOdr_str_map = {
 80054dc:	4811      	ldr	r0, [pc, #68]	; (8005524 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 80054de:	f7fb ff6a 	bl	80013b6 <_ZNSt3mapI25ISDS_gyroOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS0_ESaISt4pairIKS0_S6_EEED1Ev>
static std::map<ISDS_accOutputDataRate_t, std::string> accOdr_str_map = {
 80054e2:	4811      	ldr	r0, [pc, #68]	; (8005528 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80054e4:	f7fb fe7f 	bl	80011e6 <_ZNSt3mapI24ISDS_accOutputDataRate_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS0_ESaISt4pairIKS0_S6_EEED1Ev>
}
 80054e8:	bf00      	nop
 80054ea:	f207 4714 	addw	r7, r7, #1044	; 0x414
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd90      	pop	{r4, r7, pc}
 80054f2:	bf00      	nop
 80054f4:	08011798 	.word	0x08011798
 80054f8:	0801179c 	.word	0x0801179c
 80054fc:	080117a0 	.word	0x080117a0
 8005500:	080117a4 	.word	0x080117a4
 8005504:	080117a8 	.word	0x080117a8
 8005508:	20000228 	.word	0x20000228
 800550c:	080117b0 	.word	0x080117b0
 8005510:	080117b8 	.word	0x080117b8
 8005514:	080117c0 	.word	0x080117c0
 8005518:	080117c8 	.word	0x080117c8
 800551c:	080117d4 	.word	0x080117d4
 8005520:	20000240 	.word	0x20000240
 8005524:	20000210 	.word	0x20000210
 8005528:	200001f8 	.word	0x200001f8

0800552c <_GLOBAL__sub_I__ZN18IMU_6DIM_WSEN_ISDSC2EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
 8005530:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005534:	2001      	movs	r0, #1
 8005536:	f7ff fcf1 	bl	8004f1c <_Z41__static_initialization_and_destruction_0ii>
 800553a:	bd80      	pop	{r7, pc}

0800553c <_GLOBAL__sub_D__ZN18IMU_6DIM_WSEN_ISDSC2EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
 8005540:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005544:	2000      	movs	r0, #0
 8005546:	f7ff fce9 	bl	8004f1c <_Z41__static_initialization_and_destruction_0ii>
 800554a:	bd80      	pop	{r7, pc}

0800554c <_ZN18Pressure_WSEN_PADSC1EP17I2C_HandleTypeDefh>:
static const uint32_t I2C_TIMEOUT = 100;

// ***** public funcitions *****


Pressure_WSEN_PADS::Pressure_WSEN_PADS(I2C_HandleTypeDef* _i2c_handler, uint8_t SAO): i2c_handler(_i2c_handler)
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	4613      	mov	r3, r2
 8005558:	71fb      	strb	r3, [r7, #7]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2201      	movs	r2, #1
 8005564:	80da      	strh	r2, [r3, #6]
{
    i2c_device_addr = (SAO == 0) ? PADS_ADDRESS_I2C_0 : PADS_ADDRESS_I2C_1;
 8005566:	79fb      	ldrb	r3, [r7, #7]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <_ZN18Pressure_WSEN_PADSC1EP17I2C_HandleTypeDefh+0x24>
 800556c:	22b8      	movs	r2, #184	; 0xb8
 800556e:	e000      	b.n	8005572 <_ZN18Pressure_WSEN_PADSC1EP17I2C_HandleTypeDefh+0x26>
 8005570:	22ba      	movs	r2, #186	; 0xba
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	711a      	strb	r2, [r3, #4]
}
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <_ZN18Pressure_WSEN_PADS20isCommunicationReadyEv>:

    return true;
}

bool Pressure_WSEN_PADS::isCommunicationReady()
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
    uint8_t device_ID = 0;
 800558c:	2300      	movs	r3, #0
 800558e:	73bb      	strb	r3, [r7, #14]

    HAL_StatusTypeDef rv;

    rv = getDeviceID(&device_ID);
 8005590:	f107 030e 	add.w	r3, r7, #14
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f81c 	bl	80055d4 <_ZN18Pressure_WSEN_PADS11getDeviceIDEPh>
 800559c:	4603      	mov	r3, r0
 800559e:	73fb      	strb	r3, [r7, #15]
	if (device_ID == PADS_DEVICE_ID_VALUE) {
 80055a0:	7bbb      	ldrb	r3, [r7, #14]
 80055a2:	2bb3      	cmp	r3, #179	; 0xb3
 80055a4:	d107      	bne.n	80055b6 <_ZN18Pressure_WSEN_PADS20isCommunicationReadyEv+0x32>
		debug_print<uint8_t>("WSEN PADS: device ID = 0x%x. Communication is successful.\r\n", device_ID);
 80055a6:	f107 030e 	add.w	r3, r7, #14
 80055aa:	4619      	mov	r1, r3
 80055ac:	4807      	ldr	r0, [pc, #28]	; (80055cc <_ZN18Pressure_WSEN_PADS20isCommunicationReadyEv+0x48>)
 80055ae:	f001 f8ff 	bl	80067b0 <_Z11debug_printIhEvPKcRKT_>
		return true;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e006      	b.n	80055c4 <_ZN18Pressure_WSEN_PADS20isCommunicationReadyEv+0x40>
	} else {
		debug_print<uint8_t>("WSEN PADS: device ID = 0x%x. Communication is failed.\r\n", device_ID);
 80055b6:	f107 030e 	add.w	r3, r7, #14
 80055ba:	4619      	mov	r1, r3
 80055bc:	4804      	ldr	r0, [pc, #16]	; (80055d0 <_ZN18Pressure_WSEN_PADS20isCommunicationReadyEv+0x4c>)
 80055be:	f001 f8f7 	bl	80067b0 <_Z11debug_printIhEvPKcRKT_>
		return false;
 80055c2:	2300      	movs	r3, #0
	}
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	08011944 	.word	0x08011944
 80055d0:	08011980 	.word	0x08011980

080055d4 <_ZN18Pressure_WSEN_PADS11getDeviceIDEPh>:

HAL_StatusTypeDef Pressure_WSEN_PADS::getDeviceID(uint8_t *device_ID)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
    return PADS_ReadReg(PADS_DEVICE_ID_REG, 1, device_ID);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2201      	movs	r2, #1
 80055e2:	210f      	movs	r1, #15
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f805 	bl	80055f4 <_ZN18Pressure_WSEN_PADS12PADS_ReadRegEttPh>
 80055ea:	4603      	mov	r3, r0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <_ZN18Pressure_WSEN_PADS12PADS_ReadRegEttPh>:
{
    return (rawPres * 25600) / 4096;
}

inline HAL_StatusTypeDef Pressure_WSEN_PADS::PADS_ReadReg(uint16_t regAddr, uint16_t numBytesToRead, uint8_t *buf)
{
 80055f4:	b590      	push	{r4, r7, lr}
 80055f6:	b089      	sub	sp, #36	; 0x24
 80055f8:	af04      	add	r7, sp, #16
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	607b      	str	r3, [r7, #4]
 80055fe:	460b      	mov	r3, r1
 8005600:	817b      	strh	r3, [r7, #10]
 8005602:	4613      	mov	r3, r2
 8005604:	813b      	strh	r3, [r7, #8]
    // HAL_I2C_Mem_Read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t Timeout)
    return HAL_I2C_Mem_Read(i2c_handler, i2c_device_addr, regAddr, i2cMemAddSize, buf, numBytesToRead, I2C_TIMEOUT);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	791b      	ldrb	r3, [r3, #4]
 800560e:	b299      	uxth	r1, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	88dc      	ldrh	r4, [r3, #6]
 8005614:	897a      	ldrh	r2, [r7, #10]
 8005616:	2364      	movs	r3, #100	; 0x64
 8005618:	9302      	str	r3, [sp, #8]
 800561a:	893b      	ldrh	r3, [r7, #8]
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	4623      	mov	r3, r4
 8005624:	f002 f9a2 	bl	800796c <HAL_I2C_Mem_Read>
 8005628:	4603      	mov	r3, r0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	bd90      	pop	{r4, r7, pc}
	...

08005634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 800563a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  bool ready = false;
 800563c:	2300      	movs	r3, #0
 800563e:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  uint8_t addr[128] = {};
 8005642:	2300      	movs	r3, #0
 8005644:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 8005648:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800564c:	227c      	movs	r2, #124	; 0x7c
 800564e:	2100      	movs	r1, #0
 8005650:	4618      	mov	r0, r3
 8005652:	f008 fe4f 	bl	800e2f4 <memset>
  uint8_t num = 0;
 8005656:	2300      	movs	r3, #0
 8005658:	f887 351e 	strb.w	r3, [r7, #1310]	; 0x51e
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800565c:	f001 f94e 	bl	80068fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005660:	f000 f8d8 	bl	8005814 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005664:	f000 fb0c 	bl	8005c80 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8005668:	f000 fae2 	bl	8005c30 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 800566c:	f000 f954 	bl	8005918 <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 8005670:	f000 f986 	bl	8005980 <_ZL12MX_I2C2_Initv>
  MX_SDIO_SD_Init();
 8005674:	f000 f9b8 	bl	80059e8 <_ZL15MX_SDIO_SD_Initv>
  MX_SPI1_Init();
 8005678:	f000 f9d8 	bl	8005a2c <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 800567c:	f000 fa12 	bl	8005aa4 <_ZL12MX_SPI2_Initv>
  MX_UART4_Init();
 8005680:	f000 fa4c 	bl	8005b1c <_ZL13MX_UART4_Initv>
  MX_USART1_UART_Init();
 8005684:	f000 fa78 	bl	8005b78 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 8005688:	f000 faa4 	bl	8005bd4 <_ZL19MX_USART2_UART_Initv>
  MX_FATFS_Init();
 800568c:	f007 fd1e 	bl	800d0cc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  FATFS fs;
  FIL fil;
  FRESULT fresult;

  fresult = f_mount(&fs, "/", 1);
 8005690:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8005694:	2201      	movs	r2, #1
 8005696:	494e      	ldr	r1, [pc, #312]	; (80057d0 <main+0x19c>)
 8005698:	4618      	mov	r0, r3
 800569a:	f008 fb8d 	bl	800ddb8 <f_mount>
 800569e:	4603      	mov	r3, r0
 80056a0:	f887 351d 	strb.w	r3, [r7, #1309]	; 0x51d

  i2c_addr_scan(&hi2c1);
 80056a4:	484b      	ldr	r0, [pc, #300]	; (80057d4 <main+0x1a0>)
 80056a6:	f001 f8a1 	bl	80067ec <_Z13i2c_addr_scanP17I2C_HandleTypeDef>
  i2c_addr_scan(&hi2c2);
 80056aa:	484b      	ldr	r0, [pc, #300]	; (80057d8 <main+0x1a4>)
 80056ac:	f001 f89e 	bl	80067ec <_Z13i2c_addr_scanP17I2C_HandleTypeDef>


  HAL_Delay(100);
 80056b0:	2064      	movs	r0, #100	; 0x64
 80056b2:	f001 f995 	bl	80069e0 <HAL_Delay>
  debug_print("Test start.\r\n");
 80056b6:	4849      	ldr	r0, [pc, #292]	; (80057dc <main+0x1a8>)
 80056b8:	f001 f860 	bl	800677c <_Z11debug_printPKc>

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80056bc:	2201      	movs	r2, #1
 80056be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056c2:	4847      	ldr	r0, [pc, #284]	; (80057e0 <main+0x1ac>)
 80056c4:	f001 fff4 	bl	80076b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80056c8:	2201      	movs	r2, #1
 80056ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056ce:	4845      	ldr	r0, [pc, #276]	; (80057e4 <main+0x1b0>)
 80056d0:	f001 ffee 	bl	80076b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80056d4:	2201      	movs	r2, #1
 80056d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056da:	4842      	ldr	r0, [pc, #264]	; (80057e4 <main+0x1b0>)
 80056dc:	f001 ffe8 	bl	80076b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80056e0:	2201      	movs	r2, #1
 80056e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056e6:	483f      	ldr	r0, [pc, #252]	; (80057e4 <main+0x1b0>)
 80056e8:	f001 ffe2 	bl	80076b0 <HAL_GPIO_WritePin>

  ready = altimeter_WE.isCommunicationReady();
 80056ec:	483e      	ldr	r0, [pc, #248]	; (80057e8 <main+0x1b4>)
 80056ee:	f7ff ff49 	bl	8005584 <_ZN18Pressure_WSEN_PADS20isCommunicationReadyEv>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (ready == false)
 80056f8:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d108      	bne.n	8005712 <main+0xde>
  {
    debug_print("WE altimeter communicates fails.\r\n");
 8005700:	483a      	ldr	r0, [pc, #232]	; (80057ec <main+0x1b8>)
 8005702:	f001 f83b 	bl	800677c <_Z11debug_printPKc>
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8005706:	2200      	movs	r2, #0
 8005708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800570c:	4834      	ldr	r0, [pc, #208]	; (80057e0 <main+0x1ac>)
 800570e:	f001 ffcf 	bl	80076b0 <HAL_GPIO_WritePin>
  }
  ready = IMU_WE.isCommunicationReady();
 8005712:	4837      	ldr	r0, [pc, #220]	; (80057f0 <main+0x1bc>)
 8005714:	f7fb ff82 	bl	800161c <_ZN18IMU_6DIM_WSEN_ISDS20isCommunicationReadyEv>
 8005718:	4603      	mov	r3, r0
 800571a:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (ready == false)
 800571e:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8005722:	2b00      	cmp	r3, #0
 8005724:	d108      	bne.n	8005738 <main+0x104>
  {
    debug_print("WE 6-dim IMU communicates fails\r\n");
 8005726:	4833      	ldr	r0, [pc, #204]	; (80057f4 <main+0x1c0>)
 8005728:	f001 f828 	bl	800677c <_Z11debug_printPKc>
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800572c:	2200      	movs	r2, #0
 800572e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005732:	482c      	ldr	r0, [pc, #176]	; (80057e4 <main+0x1b0>)
 8005734:	f001 ffbc 	bl	80076b0 <HAL_GPIO_WritePin>
  }
  ready = accelerator_WE.isCommunicationReady();
 8005738:	482f      	ldr	r0, [pc, #188]	; (80057f8 <main+0x1c4>)
 800573a:	f7fb fbf3 	bl	8000f24 <_ZN18IMU_3DIM_WSEN_ITDS20isCommunicationReadyEv>
 800573e:	4603      	mov	r3, r0
 8005740:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (ready == false)
 8005744:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8005748:	2b00      	cmp	r3, #0
 800574a:	d108      	bne.n	800575e <main+0x12a>
  {
    debug_print("WE 3-dim IMU communicates fails\r\n");
 800574c:	482b      	ldr	r0, [pc, #172]	; (80057fc <main+0x1c8>)
 800574e:	f001 f815 	bl	800677c <_Z11debug_printPKc>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8005752:	2200      	movs	r2, #0
 8005754:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005758:	4822      	ldr	r0, [pc, #136]	; (80057e4 <main+0x1b0>)
 800575a:	f001 ffa9 	bl	80076b0 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GNSS_EN_GPIO_Port, GNSS_EN_Pin, GPIO_PIN_SET);
 800575e:	2201      	movs	r2, #1
 8005760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005764:	4826      	ldr	r0, [pc, #152]	; (8005800 <main+0x1cc>)
 8005766:	f001 ffa3 	bl	80076b0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800576a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800576e:	f001 f937 	bl	80069e0 <HAL_Delay>
  HAL_GPIO_WritePin(GNSS_ON_OFF_GPIO_Port, GNSS_ON_OFF_Pin, GPIO_PIN_RESET);
 8005772:	2200      	movs	r2, #0
 8005774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005778:	481a      	ldr	r0, [pc, #104]	; (80057e4 <main+0x1b0>)
 800577a:	f001 ff99 	bl	80076b0 <HAL_GPIO_WritePin>
  char text[50];
  int num_text;
  num_text = sprintf(text, "$PSRF101,0,0,0,0,0,0,12,1*15");
 800577e:	463b      	mov	r3, r7
 8005780:	4920      	ldr	r1, [pc, #128]	; (8005804 <main+0x1d0>)
 8005782:	4618      	mov	r0, r3
 8005784:	f009 fb5c 	bl	800ee40 <siprintf>
 8005788:	f8c7 0518 	str.w	r0, [r7, #1304]	; 0x518
  HAL_UART_Transmit(&huart1, (unsigned char *)text, num_text, 10);
 800578c:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8005790:	b29a      	uxth	r2, r3
 8005792:	4639      	mov	r1, r7
 8005794:	230a      	movs	r3, #10
 8005796:	481c      	ldr	r0, [pc, #112]	; (8005808 <main+0x1d4>)
 8005798:	f006 f933 	bl	800ba02 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_DMA (&huart1, Rx_data, 10);
 800579c:	220a      	movs	r2, #10
 800579e:	491b      	ldr	r1, [pc, #108]	; (800580c <main+0x1d8>)
 80057a0:	4819      	ldr	r0, [pc, #100]	; (8005808 <main+0x1d4>)
 80057a2:	f006 f9c0 	bl	800bb26 <HAL_UART_Receive_DMA>
  HAL_StatusTypeDef rv;
  num_text = sprintf(text, "$PSRF125*21");
 80057a6:	463b      	mov	r3, r7
 80057a8:	4919      	ldr	r1, [pc, #100]	; (8005810 <main+0x1dc>)
 80057aa:	4618      	mov	r0, r3
 80057ac:	f009 fb48 	bl	800ee40 <siprintf>
 80057b0:	f8c7 0518 	str.w	r0, [r7, #1304]	; 0x518
  while (1)
  {
	rv = HAL_UART_Transmit(&huart1, (unsigned char *)text, 11, 10);
 80057b4:	4639      	mov	r1, r7
 80057b6:	230a      	movs	r3, #10
 80057b8:	220b      	movs	r2, #11
 80057ba:	4813      	ldr	r0, [pc, #76]	; (8005808 <main+0x1d4>)
 80057bc:	f006 f921 	bl	800ba02 <HAL_UART_Transmit>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f887 3517 	strb.w	r3, [r7, #1303]	; 0x517
    // HAL_UART_Transmit(&huart2, (unsigned char *)text, 12, 10);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(100);
 80057c6:	2064      	movs	r0, #100	; 0x64
 80057c8:	f001 f90a 	bl	80069e0 <HAL_Delay>
	rv = HAL_UART_Transmit(&huart1, (unsigned char *)text, 11, 10);
 80057cc:	e7f2      	b.n	80057b4 <main+0x180>
 80057ce:	bf00      	nop
 80057d0:	08011b48 	.word	0x08011b48
 80057d4:	20000258 	.word	0x20000258
 80057d8:	200002ac 	.word	0x200002ac
 80057dc:	08011b4c 	.word	0x08011b4c
 80057e0:	40020400 	.word	0x40020400
 80057e4:	40020800 	.word	0x40020800
 80057e8:	200005c0 	.word	0x200005c0
 80057ec:	08011b5c 	.word	0x08011b5c
 80057f0:	200005d4 	.word	0x200005d4
 80057f4:	08011b80 	.word	0x08011b80
 80057f8:	200005c8 	.word	0x200005c8
 80057fc:	08011ba4 	.word	0x08011ba4
 8005800:	40020000 	.word	0x40020000
 8005804:	08011bc8 	.word	0x08011bc8
 8005808:	20000538 	.word	0x20000538
 800580c:	200005f0 	.word	0x200005f0
 8005810:	08011be8 	.word	0x08011be8

08005814 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b094      	sub	sp, #80	; 0x50
 8005818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800581a:	f107 031c 	add.w	r3, r7, #28
 800581e:	2234      	movs	r2, #52	; 0x34
 8005820:	2100      	movs	r1, #0
 8005822:	4618      	mov	r0, r3
 8005824:	f008 fd66 	bl	800e2f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005828:	f107 0308 	add.w	r3, r7, #8
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	605a      	str	r2, [r3, #4]
 8005832:	609a      	str	r2, [r3, #8]
 8005834:	60da      	str	r2, [r3, #12]
 8005836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005838:	2300      	movs	r3, #0
 800583a:	607b      	str	r3, [r7, #4]
 800583c:	4b34      	ldr	r3, [pc, #208]	; (8005910 <_Z18SystemClock_Configv+0xfc>)
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	4a33      	ldr	r2, [pc, #204]	; (8005910 <_Z18SystemClock_Configv+0xfc>)
 8005842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005846:	6413      	str	r3, [r2, #64]	; 0x40
 8005848:	4b31      	ldr	r3, [pc, #196]	; (8005910 <_Z18SystemClock_Configv+0xfc>)
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005850:	607b      	str	r3, [r7, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005854:	2300      	movs	r3, #0
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	4b2e      	ldr	r3, [pc, #184]	; (8005914 <_Z18SystemClock_Configv+0x100>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a2d      	ldr	r2, [pc, #180]	; (8005914 <_Z18SystemClock_Configv+0x100>)
 800585e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	4b2b      	ldr	r3, [pc, #172]	; (8005914 <_Z18SystemClock_Configv+0x100>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800586c:	603b      	str	r3, [r7, #0]
 800586e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005870:	2301      	movs	r3, #1
 8005872:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005878:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800587a:	2302      	movs	r3, #2
 800587c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800587e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005882:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005884:	2308      	movs	r3, #8
 8005886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005888:	23b4      	movs	r3, #180	; 0xb4
 800588a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800588c:	2302      	movs	r3, #2
 800588e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005890:	2308      	movs	r3, #8
 8005892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005894:	2302      	movs	r3, #2
 8005896:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005898:	f107 031c 	add.w	r3, r7, #28
 800589c:	4618      	mov	r0, r3
 800589e:	f003 fcff 	bl	80092a0 <HAL_RCC_OscConfig>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80058b2:	f000 fac5 	bl	8005e40 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80058b6:	f002 fe31 	bl	800851c <HAL_PWREx_EnableOverDrive>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80058ca:	f000 fab9 	bl	8005e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80058ce:	230f      	movs	r3, #15
 80058d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058d2:	2302      	movs	r3, #2
 80058d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058d6:	2300      	movs	r3, #0
 80058d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80058da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80058de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80058e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80058e6:	f107 0308 	add.w	r3, r7, #8
 80058ea:	2105      	movs	r1, #5
 80058ec:	4618      	mov	r0, r3
 80058ee:	f002 fe65 	bl	80085bc <HAL_RCC_ClockConfig>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	bf14      	ite	ne
 80058f8:	2301      	movne	r3, #1
 80058fa:	2300      	moveq	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 8005902:	f000 fa9d 	bl	8005e40 <Error_Handler>
  }
}
 8005906:	bf00      	nop
 8005908:	3750      	adds	r7, #80	; 0x50
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800
 8005914:	40007000 	.word	0x40007000

08005918 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800591c:	4b15      	ldr	r3, [pc, #84]	; (8005974 <_ZL12MX_I2C1_Initv+0x5c>)
 800591e:	4a16      	ldr	r2, [pc, #88]	; (8005978 <_ZL12MX_I2C1_Initv+0x60>)
 8005920:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005922:	4b14      	ldr	r3, [pc, #80]	; (8005974 <_ZL12MX_I2C1_Initv+0x5c>)
 8005924:	4a15      	ldr	r2, [pc, #84]	; (800597c <_ZL12MX_I2C1_Initv+0x64>)
 8005926:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005928:	4b12      	ldr	r3, [pc, #72]	; (8005974 <_ZL12MX_I2C1_Initv+0x5c>)
 800592a:	2200      	movs	r2, #0
 800592c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800592e:	4b11      	ldr	r3, [pc, #68]	; (8005974 <_ZL12MX_I2C1_Initv+0x5c>)
 8005930:	2200      	movs	r2, #0
 8005932:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005934:	4b0f      	ldr	r3, [pc, #60]	; (8005974 <_ZL12MX_I2C1_Initv+0x5c>)
 8005936:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800593a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800593c:	4b0d      	ldr	r3, [pc, #52]	; (8005974 <_ZL12MX_I2C1_Initv+0x5c>)
 800593e:	2200      	movs	r2, #0
 8005940:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005942:	4b0c      	ldr	r3, [pc, #48]	; (8005974 <_ZL12MX_I2C1_Initv+0x5c>)
 8005944:	2200      	movs	r2, #0
 8005946:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005948:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <_ZL12MX_I2C1_Initv+0x5c>)
 800594a:	2200      	movs	r2, #0
 800594c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800594e:	4b09      	ldr	r3, [pc, #36]	; (8005974 <_ZL12MX_I2C1_Initv+0x5c>)
 8005950:	2200      	movs	r2, #0
 8005952:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005954:	4807      	ldr	r0, [pc, #28]	; (8005974 <_ZL12MX_I2C1_Initv+0x5c>)
 8005956:	f001 fec5 	bl	80076e4 <HAL_I2C_Init>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	bf14      	ite	ne
 8005960:	2301      	movne	r3, #1
 8005962:	2300      	moveq	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800596a:	f000 fa69 	bl	8005e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800596e:	bf00      	nop
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20000258 	.word	0x20000258
 8005978:	40005400 	.word	0x40005400
 800597c:	000186a0 	.word	0x000186a0

08005980 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005984:	4b15      	ldr	r3, [pc, #84]	; (80059dc <_ZL12MX_I2C2_Initv+0x5c>)
 8005986:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <_ZL12MX_I2C2_Initv+0x60>)
 8005988:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800598a:	4b14      	ldr	r3, [pc, #80]	; (80059dc <_ZL12MX_I2C2_Initv+0x5c>)
 800598c:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <_ZL12MX_I2C2_Initv+0x64>)
 800598e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005990:	4b12      	ldr	r3, [pc, #72]	; (80059dc <_ZL12MX_I2C2_Initv+0x5c>)
 8005992:	2200      	movs	r2, #0
 8005994:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005996:	4b11      	ldr	r3, [pc, #68]	; (80059dc <_ZL12MX_I2C2_Initv+0x5c>)
 8005998:	2200      	movs	r2, #0
 800599a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800599c:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <_ZL12MX_I2C2_Initv+0x5c>)
 800599e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80059a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80059a4:	4b0d      	ldr	r3, [pc, #52]	; (80059dc <_ZL12MX_I2C2_Initv+0x5c>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80059aa:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <_ZL12MX_I2C2_Initv+0x5c>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80059b0:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <_ZL12MX_I2C2_Initv+0x5c>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80059b6:	4b09      	ldr	r3, [pc, #36]	; (80059dc <_ZL12MX_I2C2_Initv+0x5c>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80059bc:	4807      	ldr	r0, [pc, #28]	; (80059dc <_ZL12MX_I2C2_Initv+0x5c>)
 80059be:	f001 fe91 	bl	80076e4 <HAL_I2C_Init>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	bf14      	ite	ne
 80059c8:	2301      	movne	r3, #1
 80059ca:	2300      	moveq	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80059d2:	f000 fa35 	bl	8005e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80059d6:	bf00      	nop
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	200002ac 	.word	0x200002ac
 80059e0:	40005800 	.word	0x40005800
 80059e4:	000186a0 	.word	0x000186a0

080059e8 <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80059ec:	4b0d      	ldr	r3, [pc, #52]	; (8005a24 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 80059ee:	4a0e      	ldr	r2, [pc, #56]	; (8005a28 <_ZL15MX_SDIO_SD_Initv+0x40>)
 80059f0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80059f2:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80059f8:	4b0a      	ldr	r3, [pc, #40]	; (8005a24 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80059fe:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8005a04:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 8005a06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a0a:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005a0c:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8005a12:	4b04      	ldr	r3, [pc, #16]	; (8005a24 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 8005a14:	2204      	movs	r2, #4
 8005a16:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8005a18:	bf00      	nop
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20000300 	.word	0x20000300
 8005a28:	40012c00 	.word	0x40012c00

08005a2c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005a30:	4b1a      	ldr	r3, [pc, #104]	; (8005a9c <_ZL12MX_SPI1_Initv+0x70>)
 8005a32:	4a1b      	ldr	r2, [pc, #108]	; (8005aa0 <_ZL12MX_SPI1_Initv+0x74>)
 8005a34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005a36:	4b19      	ldr	r3, [pc, #100]	; (8005a9c <_ZL12MX_SPI1_Initv+0x70>)
 8005a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005a3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005a3e:	4b17      	ldr	r3, [pc, #92]	; (8005a9c <_ZL12MX_SPI1_Initv+0x70>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005a44:	4b15      	ldr	r3, [pc, #84]	; (8005a9c <_ZL12MX_SPI1_Initv+0x70>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a4a:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <_ZL12MX_SPI1_Initv+0x70>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005a50:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <_ZL12MX_SPI1_Initv+0x70>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005a56:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <_ZL12MX_SPI1_Initv+0x70>)
 8005a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005a5e:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <_ZL12MX_SPI1_Initv+0x70>)
 8005a60:	2228      	movs	r2, #40	; 0x28
 8005a62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005a64:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <_ZL12MX_SPI1_Initv+0x70>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005a6a:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <_ZL12MX_SPI1_Initv+0x70>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <_ZL12MX_SPI1_Initv+0x70>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005a76:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <_ZL12MX_SPI1_Initv+0x70>)
 8005a78:	220a      	movs	r2, #10
 8005a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005a7c:	4807      	ldr	r0, [pc, #28]	; (8005a9c <_ZL12MX_SPI1_Initv+0x70>)
 8005a7e:	f005 f9ca 	bl	800ae16 <HAL_SPI_Init>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	bf14      	ite	ne
 8005a88:	2301      	movne	r3, #1
 8005a8a:	2300      	moveq	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8005a92:	f000 f9d5 	bl	8005e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005a96:	bf00      	nop
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20000444 	.word	0x20000444
 8005aa0:	40013000 	.word	0x40013000

08005aa4 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005aa8:	4b1a      	ldr	r3, [pc, #104]	; (8005b14 <_ZL12MX_SPI2_Initv+0x70>)
 8005aaa:	4a1b      	ldr	r2, [pc, #108]	; (8005b18 <_ZL12MX_SPI2_Initv+0x74>)
 8005aac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005aae:	4b19      	ldr	r3, [pc, #100]	; (8005b14 <_ZL12MX_SPI2_Initv+0x70>)
 8005ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ab4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005ab6:	4b17      	ldr	r3, [pc, #92]	; (8005b14 <_ZL12MX_SPI2_Initv+0x70>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005abc:	4b15      	ldr	r3, [pc, #84]	; (8005b14 <_ZL12MX_SPI2_Initv+0x70>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ac2:	4b14      	ldr	r3, [pc, #80]	; (8005b14 <_ZL12MX_SPI2_Initv+0x70>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005ac8:	4b12      	ldr	r3, [pc, #72]	; (8005b14 <_ZL12MX_SPI2_Initv+0x70>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005ace:	4b11      	ldr	r3, [pc, #68]	; (8005b14 <_ZL12MX_SPI2_Initv+0x70>)
 8005ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ad6:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <_ZL12MX_SPI2_Initv+0x70>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005adc:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <_ZL12MX_SPI2_Initv+0x70>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ae2:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <_ZL12MX_SPI2_Initv+0x70>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <_ZL12MX_SPI2_Initv+0x70>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005aee:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <_ZL12MX_SPI2_Initv+0x70>)
 8005af0:	220a      	movs	r2, #10
 8005af2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005af4:	4807      	ldr	r0, [pc, #28]	; (8005b14 <_ZL12MX_SPI2_Initv+0x70>)
 8005af6:	f005 f98e 	bl	800ae16 <HAL_SPI_Init>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	bf14      	ite	ne
 8005b00:	2301      	movne	r3, #1
 8005b02:	2300      	moveq	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8005b0a:	f000 f999 	bl	8005e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005b0e:	bf00      	nop
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	2000049c 	.word	0x2000049c
 8005b18:	40003800 	.word	0x40003800

08005b1c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005b20:	4b13      	ldr	r3, [pc, #76]	; (8005b70 <_ZL13MX_UART4_Initv+0x54>)
 8005b22:	4a14      	ldr	r2, [pc, #80]	; (8005b74 <_ZL13MX_UART4_Initv+0x58>)
 8005b24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005b26:	4b12      	ldr	r3, [pc, #72]	; (8005b70 <_ZL13MX_UART4_Initv+0x54>)
 8005b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b2c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005b2e:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <_ZL13MX_UART4_Initv+0x54>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005b34:	4b0e      	ldr	r3, [pc, #56]	; (8005b70 <_ZL13MX_UART4_Initv+0x54>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005b3a:	4b0d      	ldr	r3, [pc, #52]	; (8005b70 <_ZL13MX_UART4_Initv+0x54>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005b40:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <_ZL13MX_UART4_Initv+0x54>)
 8005b42:	220c      	movs	r2, #12
 8005b44:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b46:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <_ZL13MX_UART4_Initv+0x54>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b4c:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <_ZL13MX_UART4_Initv+0x54>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005b52:	4807      	ldr	r0, [pc, #28]	; (8005b70 <_ZL13MX_UART4_Initv+0x54>)
 8005b54:	f005 ff08 	bl	800b968 <HAL_UART_Init>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	bf14      	ite	ne
 8005b5e:	2301      	movne	r3, #1
 8005b60:	2300      	moveq	r3, #0
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8005b68:	f000 f96a 	bl	8005e40 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005b6c:	bf00      	nop
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	200004f4 	.word	0x200004f4
 8005b74:	40004c00 	.word	0x40004c00

08005b78 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005b7c:	4b13      	ldr	r3, [pc, #76]	; (8005bcc <_ZL19MX_USART1_UART_Initv+0x54>)
 8005b7e:	4a14      	ldr	r2, [pc, #80]	; (8005bd0 <_ZL19MX_USART1_UART_Initv+0x58>)
 8005b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 8005b82:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <_ZL19MX_USART1_UART_Initv+0x54>)
 8005b84:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8005b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005b8a:	4b10      	ldr	r3, [pc, #64]	; (8005bcc <_ZL19MX_USART1_UART_Initv+0x54>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005b90:	4b0e      	ldr	r3, [pc, #56]	; (8005bcc <_ZL19MX_USART1_UART_Initv+0x54>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005b96:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <_ZL19MX_USART1_UART_Initv+0x54>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <_ZL19MX_USART1_UART_Initv+0x54>)
 8005b9e:	220c      	movs	r2, #12
 8005ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <_ZL19MX_USART1_UART_Initv+0x54>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ba8:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <_ZL19MX_USART1_UART_Initv+0x54>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005bae:	4807      	ldr	r0, [pc, #28]	; (8005bcc <_ZL19MX_USART1_UART_Initv+0x54>)
 8005bb0:	f005 feda 	bl	800b968 <HAL_UART_Init>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	bf14      	ite	ne
 8005bba:	2301      	movne	r3, #1
 8005bbc:	2300      	moveq	r3, #0
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8005bc4:	f000 f93c 	bl	8005e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005bc8:	bf00      	nop
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	20000538 	.word	0x20000538
 8005bd0:	40011000 	.word	0x40011000

08005bd4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005bd8:	4b13      	ldr	r3, [pc, #76]	; (8005c28 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005bda:	4a14      	ldr	r2, [pc, #80]	; (8005c2c <_ZL19MX_USART2_UART_Initv+0x58>)
 8005bdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005bde:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005be4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005be6:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005bec:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005bfa:	220c      	movs	r2, #12
 8005bfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bfe:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c04:	4b08      	ldr	r3, [pc, #32]	; (8005c28 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c0a:	4807      	ldr	r0, [pc, #28]	; (8005c28 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005c0c:	f005 feac 	bl	800b968 <HAL_UART_Init>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	bf14      	ite	ne
 8005c16:	2301      	movne	r3, #1
 8005c18:	2300      	moveq	r3, #0
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8005c20:	f000 f90e 	bl	8005e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005c24:	bf00      	nop
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	2000057c 	.word	0x2000057c
 8005c2c:	40004400 	.word	0x40004400

08005c30 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005c36:	2300      	movs	r3, #0
 8005c38:	607b      	str	r3, [r7, #4]
 8005c3a:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <_ZL11MX_DMA_Initv+0x4c>)
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3e:	4a0f      	ldr	r2, [pc, #60]	; (8005c7c <_ZL11MX_DMA_Initv+0x4c>)
 8005c40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c44:	6313      	str	r3, [r2, #48]	; 0x30
 8005c46:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <_ZL11MX_DMA_Initv+0x4c>)
 8005c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4e:	607b      	str	r3, [r7, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8005c52:	2200      	movs	r2, #0
 8005c54:	2100      	movs	r1, #0
 8005c56:	203b      	movs	r0, #59	; 0x3b
 8005c58:	f000 ffc1 	bl	8006bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005c5c:	203b      	movs	r0, #59	; 0x3b
 8005c5e:	f000 ffda 	bl	8006c16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8005c62:	2200      	movs	r2, #0
 8005c64:	2100      	movs	r1, #0
 8005c66:	2045      	movs	r0, #69	; 0x45
 8005c68:	f000 ffb9 	bl	8006bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8005c6c:	2045      	movs	r0, #69	; 0x45
 8005c6e:	f000 ffd2 	bl	8006c16 <HAL_NVIC_EnableIRQ>

}
 8005c72:	bf00      	nop
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40023800 	.word	0x40023800

08005c80 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08a      	sub	sp, #40	; 0x28
 8005c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c86:	f107 0314 	add.w	r3, r7, #20
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	605a      	str	r2, [r3, #4]
 8005c90:	609a      	str	r2, [r3, #8]
 8005c92:	60da      	str	r2, [r3, #12]
 8005c94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c96:	2300      	movs	r3, #0
 8005c98:	613b      	str	r3, [r7, #16]
 8005c9a:	4b65      	ldr	r3, [pc, #404]	; (8005e30 <_ZL12MX_GPIO_Initv+0x1b0>)
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9e:	4a64      	ldr	r2, [pc, #400]	; (8005e30 <_ZL12MX_GPIO_Initv+0x1b0>)
 8005ca0:	f043 0304 	orr.w	r3, r3, #4
 8005ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ca6:	4b62      	ldr	r3, [pc, #392]	; (8005e30 <_ZL12MX_GPIO_Initv+0x1b0>)
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	613b      	str	r3, [r7, #16]
 8005cb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	4b5e      	ldr	r3, [pc, #376]	; (8005e30 <_ZL12MX_GPIO_Initv+0x1b0>)
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cba:	4a5d      	ldr	r2, [pc, #372]	; (8005e30 <_ZL12MX_GPIO_Initv+0x1b0>)
 8005cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8005cc2:	4b5b      	ldr	r3, [pc, #364]	; (8005e30 <_ZL12MX_GPIO_Initv+0x1b0>)
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60bb      	str	r3, [r7, #8]
 8005cd2:	4b57      	ldr	r3, [pc, #348]	; (8005e30 <_ZL12MX_GPIO_Initv+0x1b0>)
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd6:	4a56      	ldr	r2, [pc, #344]	; (8005e30 <_ZL12MX_GPIO_Initv+0x1b0>)
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8005cde:	4b54      	ldr	r3, [pc, #336]	; (8005e30 <_ZL12MX_GPIO_Initv+0x1b0>)
 8005ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	60bb      	str	r3, [r7, #8]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cea:	2300      	movs	r3, #0
 8005cec:	607b      	str	r3, [r7, #4]
 8005cee:	4b50      	ldr	r3, [pc, #320]	; (8005e30 <_ZL12MX_GPIO_Initv+0x1b0>)
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	4a4f      	ldr	r2, [pc, #316]	; (8005e30 <_ZL12MX_GPIO_Initv+0x1b0>)
 8005cf4:	f043 0302 	orr.w	r3, r3, #2
 8005cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8005cfa:	4b4d      	ldr	r3, [pc, #308]	; (8005e30 <_ZL12MX_GPIO_Initv+0x1b0>)
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	607b      	str	r3, [r7, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d06:	2300      	movs	r3, #0
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	4b49      	ldr	r3, [pc, #292]	; (8005e30 <_ZL12MX_GPIO_Initv+0x1b0>)
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	4a48      	ldr	r2, [pc, #288]	; (8005e30 <_ZL12MX_GPIO_Initv+0x1b0>)
 8005d10:	f043 0308 	orr.w	r3, r3, #8
 8005d14:	6313      	str	r3, [r2, #48]	; 0x30
 8005d16:	4b46      	ldr	r3, [pc, #280]	; (8005e30 <_ZL12MX_GPIO_Initv+0x1b0>)
 8005d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	603b      	str	r3, [r7, #0]
 8005d20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED3_Pin|LED4_Pin|GNSS_RESET_Pin
 8005d22:	2200      	movs	r2, #0
 8005d24:	f24e 0141 	movw	r1, #57409	; 0xe041
 8005d28:	4842      	ldr	r0, [pc, #264]	; (8005e34 <_ZL12MX_GPIO_Initv+0x1b4>)
 8005d2a:	f001 fcc1 	bl	80076b0 <HAL_GPIO_WritePin>
                          |SX1280_NSS_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_NSS_GPIO_Port, IMU_NSS_Pin, GPIO_PIN_SET);
 8005d2e:	2201      	movs	r2, #1
 8005d30:	2110      	movs	r1, #16
 8005d32:	4841      	ldr	r0, [pc, #260]	; (8005e38 <_ZL12MX_GPIO_Initv+0x1b8>)
 8005d34:	f001 fcbc 	bl	80076b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SX1280_NSS_1_Pin|LED1_Pin, GPIO_PIN_RESET);
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8005d3e:	483f      	ldr	r0, [pc, #252]	; (8005e3c <_ZL12MX_GPIO_Initv+0x1bc>)
 8005d40:	f001 fcb6 	bl	80076b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GNSS_EN_GPIO_Port, GNSS_EN_Pin, GPIO_PIN_RESET);
 8005d44:	2200      	movs	r2, #0
 8005d46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d4a:	483b      	ldr	r0, [pc, #236]	; (8005e38 <_ZL12MX_GPIO_Initv+0x1b8>)
 8005d4c:	f001 fcb0 	bl	80076b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GNSS_ON_OFF_GPIO_Port, GNSS_ON_OFF_Pin, GPIO_PIN_SET);
 8005d50:	2201      	movs	r2, #1
 8005d52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d56:	4837      	ldr	r0, [pc, #220]	; (8005e34 <_ZL12MX_GPIO_Initv+0x1b4>)
 8005d58:	f001 fcaa 	bl	80076b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED4_Pin GNSS_RESET_Pin
                           SX1280_NSS_2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED4_Pin|GNSS_RESET_Pin
 8005d5c:	f24e 0341 	movw	r3, #57409	; 0xe041
 8005d60:	617b      	str	r3, [r7, #20]
                          |SX1280_NSS_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d62:	2301      	movs	r3, #1
 8005d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d6e:	f107 0314 	add.w	r3, r7, #20
 8005d72:	4619      	mov	r1, r3
 8005d74:	482f      	ldr	r0, [pc, #188]	; (8005e34 <_ZL12MX_GPIO_Initv+0x1b4>)
 8005d76:	f001 fb07 	bl	8007388 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_NSS_Pin */
  GPIO_InitStruct.Pin = IMU_NSS_Pin;
 8005d7a:	2310      	movs	r3, #16
 8005d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d82:	2300      	movs	r3, #0
 8005d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d86:	2303      	movs	r3, #3
 8005d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_NSS_GPIO_Port, &GPIO_InitStruct);
 8005d8a:	f107 0314 	add.w	r3, r7, #20
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4829      	ldr	r0, [pc, #164]	; (8005e38 <_ZL12MX_GPIO_Initv+0x1b8>)
 8005d92:	f001 faf9 	bl	8007388 <HAL_GPIO_Init>

  /*Configure GPIO pins : BARO_INT_Pin SENSOR_INT_Pin SX1280_INT_Pin */
  GPIO_InitStruct.Pin = BARO_INT_Pin|SENSOR_INT_Pin|SX1280_INT_Pin;
 8005d96:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8005d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005d9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005da2:	2300      	movs	r3, #0
 8005da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005da6:	f107 0314 	add.w	r3, r7, #20
 8005daa:	4619      	mov	r1, r3
 8005dac:	4823      	ldr	r0, [pc, #140]	; (8005e3c <_ZL12MX_GPIO_Initv+0x1bc>)
 8005dae:	f001 faeb 	bl	8007388 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX1280_NSS_1_Pin LED1_Pin */
  GPIO_InitStruct.Pin = SX1280_NSS_1_Pin|LED1_Pin;
 8005db2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8005db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005db8:	2301      	movs	r3, #1
 8005dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dc4:	f107 0314 	add.w	r3, r7, #20
 8005dc8:	4619      	mov	r1, r3
 8005dca:	481c      	ldr	r0, [pc, #112]	; (8005e3c <_ZL12MX_GPIO_Initv+0x1bc>)
 8005dcc:	f001 fadc 	bl	8007388 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_EN_Pin */
  GPIO_InitStruct.Pin = GNSS_EN_Pin;
 8005dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dde:	2300      	movs	r3, #0
 8005de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GNSS_EN_GPIO_Port, &GPIO_InitStruct);
 8005de2:	f107 0314 	add.w	r3, r7, #20
 8005de6:	4619      	mov	r1, r3
 8005de8:	4813      	ldr	r0, [pc, #76]	; (8005e38 <_ZL12MX_GPIO_Initv+0x1b8>)
 8005dea:	f001 facd 	bl	8007388 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPSS_WAKE_UP_Pin */
  GPIO_InitStruct.Pin = GPSS_WAKE_UP_Pin;
 8005dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005df4:	2300      	movs	r3, #0
 8005df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPSS_WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 8005dfc:	f107 0314 	add.w	r3, r7, #20
 8005e00:	4619      	mov	r1, r3
 8005e02:	480d      	ldr	r0, [pc, #52]	; (8005e38 <_ZL12MX_GPIO_Initv+0x1b8>)
 8005e04:	f001 fac0 	bl	8007388 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_ON_OFF_Pin */
  GPIO_InitStruct.Pin = GNSS_ON_OFF_Pin;
 8005e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e16:	2302      	movs	r3, #2
 8005e18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GNSS_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8005e1a:	f107 0314 	add.w	r3, r7, #20
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4804      	ldr	r0, [pc, #16]	; (8005e34 <_ZL12MX_GPIO_Initv+0x1b4>)
 8005e22:	f001 fab1 	bl	8007388 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005e26:	bf00      	nop
 8005e28:	3728      	adds	r7, #40	; 0x28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40023800 	.word	0x40023800
 8005e34:	40020800 	.word	0x40020800
 8005e38:	40020000 	.word	0x40020000
 8005e3c:	40020400 	.word	0x40020400

08005e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005e44:	b672      	cpsid	i
}
 8005e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005e48:	e7fe      	b.n	8005e48 <Error_Handler+0x8>
	...

08005e4c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d114      	bne.n	8005e86 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d10f      	bne.n	8005e86 <_Z41__static_initialization_and_destruction_0ii+0x3a>
Pressure_WSEN_PADS altimeter_WE(&hi2c1, WSEN_PADS_SAO);
 8005e66:	2200      	movs	r2, #0
 8005e68:	4909      	ldr	r1, [pc, #36]	; (8005e90 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8005e6a:	480a      	ldr	r0, [pc, #40]	; (8005e94 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8005e6c:	f7ff fb6e 	bl	800554c <_ZN18Pressure_WSEN_PADSC1EP17I2C_HandleTypeDefh>
IMU_3DIM_WSEN_ITDS accelerator_WE(&hi2c1, WSEN_ITDS_SAO);
 8005e70:	2200      	movs	r2, #0
 8005e72:	4907      	ldr	r1, [pc, #28]	; (8005e90 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8005e74:	4808      	ldr	r0, [pc, #32]	; (8005e98 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005e76:	f7fb f839 	bl	8000eec <_ZN18IMU_3DIM_WSEN_ITDSC1EP17I2C_HandleTypeDefh>
IMU_6DIM_WSEN_ISDS IMU_WE(&hspi1, WSEN_ISDS_CS_PORT, WSEN_ISDS_CS_PIN);
 8005e7a:	2310      	movs	r3, #16
 8005e7c:	4a07      	ldr	r2, [pc, #28]	; (8005e9c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005e7e:	4908      	ldr	r1, [pc, #32]	; (8005ea0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8005e80:	4808      	ldr	r0, [pc, #32]	; (8005ea4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8005e82:	f7fb fba8 	bl	80015d6 <_ZN18IMU_6DIM_WSEN_ISDSC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
}
 8005e86:	bf00      	nop
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000258 	.word	0x20000258
 8005e94:	200005c0 	.word	0x200005c0
 8005e98:	200005c8 	.word	0x200005c8
 8005e9c:	40020000 	.word	0x40020000
 8005ea0:	20000444 	.word	0x20000444
 8005ea4:	200005d4 	.word	0x200005d4

08005ea8 <_GLOBAL__sub_I_hi2c1>:
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	f7ff ffcb 	bl	8005e4c <_Z41__static_initialization_and_destruction_0ii>
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	607b      	str	r3, [r7, #4]
 8005ec2:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <HAL_MspInit+0x4c>)
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec6:	4a0f      	ldr	r2, [pc, #60]	; (8005f04 <HAL_MspInit+0x4c>)
 8005ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8005ece:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <HAL_MspInit+0x4c>)
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ed6:	607b      	str	r3, [r7, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005eda:	2300      	movs	r3, #0
 8005edc:	603b      	str	r3, [r7, #0]
 8005ede:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <HAL_MspInit+0x4c>)
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	4a08      	ldr	r2, [pc, #32]	; (8005f04 <HAL_MspInit+0x4c>)
 8005ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eea:	4b06      	ldr	r3, [pc, #24]	; (8005f04 <HAL_MspInit+0x4c>)
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40023800 	.word	0x40023800

08005f08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08c      	sub	sp, #48	; 0x30
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f10:	f107 031c 	add.w	r3, r7, #28
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	60da      	str	r2, [r3, #12]
 8005f1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a42      	ldr	r2, [pc, #264]	; (8006030 <HAL_I2C_MspInit+0x128>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d12c      	bne.n	8005f84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	61bb      	str	r3, [r7, #24]
 8005f2e:	4b41      	ldr	r3, [pc, #260]	; (8006034 <HAL_I2C_MspInit+0x12c>)
 8005f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f32:	4a40      	ldr	r2, [pc, #256]	; (8006034 <HAL_I2C_MspInit+0x12c>)
 8005f34:	f043 0302 	orr.w	r3, r3, #2
 8005f38:	6313      	str	r3, [r2, #48]	; 0x30
 8005f3a:	4b3e      	ldr	r3, [pc, #248]	; (8006034 <HAL_I2C_MspInit+0x12c>)
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	61bb      	str	r3, [r7, #24]
 8005f44:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005f46:	23c0      	movs	r3, #192	; 0xc0
 8005f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f4a:	2312      	movs	r3, #18
 8005f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f52:	2303      	movs	r3, #3
 8005f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005f56:	2304      	movs	r3, #4
 8005f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f5a:	f107 031c 	add.w	r3, r7, #28
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4835      	ldr	r0, [pc, #212]	; (8006038 <HAL_I2C_MspInit+0x130>)
 8005f62:	f001 fa11 	bl	8007388 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	4b32      	ldr	r3, [pc, #200]	; (8006034 <HAL_I2C_MspInit+0x12c>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	4a31      	ldr	r2, [pc, #196]	; (8006034 <HAL_I2C_MspInit+0x12c>)
 8005f70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f74:	6413      	str	r3, [r2, #64]	; 0x40
 8005f76:	4b2f      	ldr	r3, [pc, #188]	; (8006034 <HAL_I2C_MspInit+0x12c>)
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005f82:	e050      	b.n	8006026 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a2c      	ldr	r2, [pc, #176]	; (800603c <HAL_I2C_MspInit+0x134>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d14b      	bne.n	8006026 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f8e:	2300      	movs	r3, #0
 8005f90:	613b      	str	r3, [r7, #16]
 8005f92:	4b28      	ldr	r3, [pc, #160]	; (8006034 <HAL_I2C_MspInit+0x12c>)
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	4a27      	ldr	r2, [pc, #156]	; (8006034 <HAL_I2C_MspInit+0x12c>)
 8005f98:	f043 0302 	orr.w	r3, r3, #2
 8005f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f9e:	4b25      	ldr	r3, [pc, #148]	; (8006034 <HAL_I2C_MspInit+0x12c>)
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	4b21      	ldr	r3, [pc, #132]	; (8006034 <HAL_I2C_MspInit+0x12c>)
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb2:	4a20      	ldr	r2, [pc, #128]	; (8006034 <HAL_I2C_MspInit+0x12c>)
 8005fb4:	f043 0304 	orr.w	r3, r3, #4
 8005fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8005fba:	4b1e      	ldr	r3, [pc, #120]	; (8006034 <HAL_I2C_MspInit+0x12c>)
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbe:	f003 0304 	and.w	r3, r3, #4
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005fcc:	2312      	movs	r3, #18
 8005fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005fd8:	2304      	movs	r3, #4
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fdc:	f107 031c 	add.w	r3, r7, #28
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4815      	ldr	r0, [pc, #84]	; (8006038 <HAL_I2C_MspInit+0x130>)
 8005fe4:	f001 f9d0 	bl	8007388 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005fee:	2312      	movs	r3, #18
 8005ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005ffa:	2304      	movs	r3, #4
 8005ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ffe:	f107 031c 	add.w	r3, r7, #28
 8006002:	4619      	mov	r1, r3
 8006004:	480e      	ldr	r0, [pc, #56]	; (8006040 <HAL_I2C_MspInit+0x138>)
 8006006:	f001 f9bf 	bl	8007388 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800600a:	2300      	movs	r3, #0
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	4b09      	ldr	r3, [pc, #36]	; (8006034 <HAL_I2C_MspInit+0x12c>)
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	4a08      	ldr	r2, [pc, #32]	; (8006034 <HAL_I2C_MspInit+0x12c>)
 8006014:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006018:	6413      	str	r3, [r2, #64]	; 0x40
 800601a:	4b06      	ldr	r3, [pc, #24]	; (8006034 <HAL_I2C_MspInit+0x12c>)
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006022:	60bb      	str	r3, [r7, #8]
 8006024:	68bb      	ldr	r3, [r7, #8]
}
 8006026:	bf00      	nop
 8006028:	3730      	adds	r7, #48	; 0x30
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40005400 	.word	0x40005400
 8006034:	40023800 	.word	0x40023800
 8006038:	40020400 	.word	0x40020400
 800603c:	40005800 	.word	0x40005800
 8006040:	40020800 	.word	0x40020800

08006044 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b0a2      	sub	sp, #136	; 0x88
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800604c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	605a      	str	r2, [r3, #4]
 8006056:	609a      	str	r2, [r3, #8]
 8006058:	60da      	str	r2, [r3, #12]
 800605a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800605c:	f107 0318 	add.w	r3, r7, #24
 8006060:	225c      	movs	r2, #92	; 0x5c
 8006062:	2100      	movs	r1, #0
 8006064:	4618      	mov	r0, r3
 8006066:	f008 f945 	bl	800e2f4 <memset>
  if(hsd->Instance==SDIO)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a83      	ldr	r2, [pc, #524]	; (800627c <HAL_SD_MspInit+0x238>)
 8006070:	4293      	cmp	r3, r2
 8006072:	f040 80fe 	bne.w	8006272 <HAL_SD_MspInit+0x22e>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8006076:	f44f 7340 	mov.w	r3, #768	; 0x300
 800607a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800607c:	2300      	movs	r3, #0
 800607e:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8006080:	2300      	movs	r3, #0
 8006082:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006084:	f107 0318 	add.w	r3, r7, #24
 8006088:	4618      	mov	r0, r3
 800608a:	f002 fbb1 	bl	80087f0 <HAL_RCCEx_PeriphCLKConfig>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8006094:	f7ff fed4 	bl	8005e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006098:	2300      	movs	r3, #0
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	4b78      	ldr	r3, [pc, #480]	; (8006280 <HAL_SD_MspInit+0x23c>)
 800609e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a0:	4a77      	ldr	r2, [pc, #476]	; (8006280 <HAL_SD_MspInit+0x23c>)
 80060a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060a6:	6453      	str	r3, [r2, #68]	; 0x44
 80060a8:	4b75      	ldr	r3, [pc, #468]	; (8006280 <HAL_SD_MspInit+0x23c>)
 80060aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060b4:	2300      	movs	r3, #0
 80060b6:	613b      	str	r3, [r7, #16]
 80060b8:	4b71      	ldr	r3, [pc, #452]	; (8006280 <HAL_SD_MspInit+0x23c>)
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	4a70      	ldr	r2, [pc, #448]	; (8006280 <HAL_SD_MspInit+0x23c>)
 80060be:	f043 0302 	orr.w	r3, r3, #2
 80060c2:	6313      	str	r3, [r2, #48]	; 0x30
 80060c4:	4b6e      	ldr	r3, [pc, #440]	; (8006280 <HAL_SD_MspInit+0x23c>)
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	4b6a      	ldr	r3, [pc, #424]	; (8006280 <HAL_SD_MspInit+0x23c>)
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	4a69      	ldr	r2, [pc, #420]	; (8006280 <HAL_SD_MspInit+0x23c>)
 80060da:	f043 0304 	orr.w	r3, r3, #4
 80060de:	6313      	str	r3, [r2, #48]	; 0x30
 80060e0:	4b67      	ldr	r3, [pc, #412]	; (8006280 <HAL_SD_MspInit+0x23c>)
 80060e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060ec:	2300      	movs	r3, #0
 80060ee:	60bb      	str	r3, [r7, #8]
 80060f0:	4b63      	ldr	r3, [pc, #396]	; (8006280 <HAL_SD_MspInit+0x23c>)
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	4a62      	ldr	r2, [pc, #392]	; (8006280 <HAL_SD_MspInit+0x23c>)
 80060f6:	f043 0308 	orr.w	r3, r3, #8
 80060fa:	6313      	str	r3, [r2, #48]	; 0x30
 80060fc:	4b60      	ldr	r3, [pc, #384]	; (8006280 <HAL_SD_MspInit+0x23c>)
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	60bb      	str	r3, [r7, #8]
 8006106:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8006108:	2307      	movs	r3, #7
 800610a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800610c:	2302      	movs	r3, #2
 800610e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006110:	2300      	movs	r3, #0
 8006112:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006114:	2303      	movs	r3, #3
 8006116:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800611a:	230c      	movs	r3, #12
 800611c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006120:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006124:	4619      	mov	r1, r3
 8006126:	4857      	ldr	r0, [pc, #348]	; (8006284 <HAL_SD_MspInit+0x240>)
 8006128:	f001 f92e 	bl	8007388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800612c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006130:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006132:	2302      	movs	r3, #2
 8006134:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006136:	2300      	movs	r3, #0
 8006138:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800613a:	2303      	movs	r3, #3
 800613c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006140:	230c      	movs	r3, #12
 8006142:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006146:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800614a:	4619      	mov	r1, r3
 800614c:	484e      	ldr	r0, [pc, #312]	; (8006288 <HAL_SD_MspInit+0x244>)
 800614e:	f001 f91b 	bl	8007388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006152:	2304      	movs	r3, #4
 8006154:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006156:	2302      	movs	r3, #2
 8006158:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800615a:	2300      	movs	r3, #0
 800615c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800615e:	2303      	movs	r3, #3
 8006160:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006164:	230c      	movs	r3, #12
 8006166:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800616a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800616e:	4619      	mov	r1, r3
 8006170:	4846      	ldr	r0, [pc, #280]	; (800628c <HAL_SD_MspInit+0x248>)
 8006172:	f001 f909 	bl	8007388 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8006176:	4b46      	ldr	r3, [pc, #280]	; (8006290 <HAL_SD_MspInit+0x24c>)
 8006178:	4a46      	ldr	r2, [pc, #280]	; (8006294 <HAL_SD_MspInit+0x250>)
 800617a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800617c:	4b44      	ldr	r3, [pc, #272]	; (8006290 <HAL_SD_MspInit+0x24c>)
 800617e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006182:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006184:	4b42      	ldr	r3, [pc, #264]	; (8006290 <HAL_SD_MspInit+0x24c>)
 8006186:	2240      	movs	r2, #64	; 0x40
 8006188:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800618a:	4b41      	ldr	r3, [pc, #260]	; (8006290 <HAL_SD_MspInit+0x24c>)
 800618c:	2200      	movs	r2, #0
 800618e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006190:	4b3f      	ldr	r3, [pc, #252]	; (8006290 <HAL_SD_MspInit+0x24c>)
 8006192:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006196:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006198:	4b3d      	ldr	r3, [pc, #244]	; (8006290 <HAL_SD_MspInit+0x24c>)
 800619a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800619e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80061a0:	4b3b      	ldr	r3, [pc, #236]	; (8006290 <HAL_SD_MspInit+0x24c>)
 80061a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061a6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80061a8:	4b39      	ldr	r3, [pc, #228]	; (8006290 <HAL_SD_MspInit+0x24c>)
 80061aa:	2220      	movs	r2, #32
 80061ac:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80061ae:	4b38      	ldr	r3, [pc, #224]	; (8006290 <HAL_SD_MspInit+0x24c>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80061b4:	4b36      	ldr	r3, [pc, #216]	; (8006290 <HAL_SD_MspInit+0x24c>)
 80061b6:	2204      	movs	r2, #4
 80061b8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80061ba:	4b35      	ldr	r3, [pc, #212]	; (8006290 <HAL_SD_MspInit+0x24c>)
 80061bc:	2203      	movs	r2, #3
 80061be:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80061c0:	4b33      	ldr	r3, [pc, #204]	; (8006290 <HAL_SD_MspInit+0x24c>)
 80061c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80061c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80061c8:	4b31      	ldr	r3, [pc, #196]	; (8006290 <HAL_SD_MspInit+0x24c>)
 80061ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80061d0:	482f      	ldr	r0, [pc, #188]	; (8006290 <HAL_SD_MspInit+0x24c>)
 80061d2:	f000 fd3b 	bl	8006c4c <HAL_DMA_Init>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 80061dc:	f7ff fe30 	bl	8005e40 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a2b      	ldr	r2, [pc, #172]	; (8006290 <HAL_SD_MspInit+0x24c>)
 80061e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80061e6:	4a2a      	ldr	r2, [pc, #168]	; (8006290 <HAL_SD_MspInit+0x24c>)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 80061ec:	4b2a      	ldr	r3, [pc, #168]	; (8006298 <HAL_SD_MspInit+0x254>)
 80061ee:	4a2b      	ldr	r2, [pc, #172]	; (800629c <HAL_SD_MspInit+0x258>)
 80061f0:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80061f2:	4b29      	ldr	r3, [pc, #164]	; (8006298 <HAL_SD_MspInit+0x254>)
 80061f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061f8:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061fa:	4b27      	ldr	r3, [pc, #156]	; (8006298 <HAL_SD_MspInit+0x254>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006200:	4b25      	ldr	r3, [pc, #148]	; (8006298 <HAL_SD_MspInit+0x254>)
 8006202:	2200      	movs	r2, #0
 8006204:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006206:	4b24      	ldr	r3, [pc, #144]	; (8006298 <HAL_SD_MspInit+0x254>)
 8006208:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800620c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800620e:	4b22      	ldr	r3, [pc, #136]	; (8006298 <HAL_SD_MspInit+0x254>)
 8006210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006214:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006216:	4b20      	ldr	r3, [pc, #128]	; (8006298 <HAL_SD_MspInit+0x254>)
 8006218:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800621c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800621e:	4b1e      	ldr	r3, [pc, #120]	; (8006298 <HAL_SD_MspInit+0x254>)
 8006220:	2220      	movs	r2, #32
 8006222:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006224:	4b1c      	ldr	r3, [pc, #112]	; (8006298 <HAL_SD_MspInit+0x254>)
 8006226:	2200      	movs	r2, #0
 8006228:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800622a:	4b1b      	ldr	r3, [pc, #108]	; (8006298 <HAL_SD_MspInit+0x254>)
 800622c:	2204      	movs	r2, #4
 800622e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006230:	4b19      	ldr	r3, [pc, #100]	; (8006298 <HAL_SD_MspInit+0x254>)
 8006232:	2203      	movs	r2, #3
 8006234:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006236:	4b18      	ldr	r3, [pc, #96]	; (8006298 <HAL_SD_MspInit+0x254>)
 8006238:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800623c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800623e:	4b16      	ldr	r3, [pc, #88]	; (8006298 <HAL_SD_MspInit+0x254>)
 8006240:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006244:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006246:	4814      	ldr	r0, [pc, #80]	; (8006298 <HAL_SD_MspInit+0x254>)
 8006248:	f000 fd00 	bl	8006c4c <HAL_DMA_Init>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <HAL_SD_MspInit+0x212>
    {
      Error_Handler();
 8006252:	f7ff fdf5 	bl	8005e40 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a0f      	ldr	r2, [pc, #60]	; (8006298 <HAL_SD_MspInit+0x254>)
 800625a:	641a      	str	r2, [r3, #64]	; 0x40
 800625c:	4a0e      	ldr	r2, [pc, #56]	; (8006298 <HAL_SD_MspInit+0x254>)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006262:	2200      	movs	r2, #0
 8006264:	2100      	movs	r1, #0
 8006266:	2031      	movs	r0, #49	; 0x31
 8006268:	f000 fcb9 	bl	8006bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800626c:	2031      	movs	r0, #49	; 0x31
 800626e:	f000 fcd2 	bl	8006c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006272:	bf00      	nop
 8006274:	3788      	adds	r7, #136	; 0x88
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40023800 	.word	0x40023800
 8006284:	40020400 	.word	0x40020400
 8006288:	40020800 	.word	0x40020800
 800628c:	40020c00 	.word	0x40020c00
 8006290:	20000384 	.word	0x20000384
 8006294:	40026458 	.word	0x40026458
 8006298:	200003e4 	.word	0x200003e4
 800629c:	400264a0 	.word	0x400264a0

080062a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08c      	sub	sp, #48	; 0x30
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062a8:	f107 031c 	add.w	r3, r7, #28
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	605a      	str	r2, [r3, #4]
 80062b2:	609a      	str	r2, [r3, #8]
 80062b4:	60da      	str	r2, [r3, #12]
 80062b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a42      	ldr	r2, [pc, #264]	; (80063c8 <HAL_SPI_MspInit+0x128>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d13c      	bne.n	800633c <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80062c2:	2300      	movs	r3, #0
 80062c4:	61bb      	str	r3, [r7, #24]
 80062c6:	4b41      	ldr	r3, [pc, #260]	; (80063cc <HAL_SPI_MspInit+0x12c>)
 80062c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ca:	4a40      	ldr	r2, [pc, #256]	; (80063cc <HAL_SPI_MspInit+0x12c>)
 80062cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062d0:	6453      	str	r3, [r2, #68]	; 0x44
 80062d2:	4b3e      	ldr	r3, [pc, #248]	; (80063cc <HAL_SPI_MspInit+0x12c>)
 80062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062da:	61bb      	str	r3, [r7, #24]
 80062dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062de:	2300      	movs	r3, #0
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	4b3a      	ldr	r3, [pc, #232]	; (80063cc <HAL_SPI_MspInit+0x12c>)
 80062e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e6:	4a39      	ldr	r2, [pc, #228]	; (80063cc <HAL_SPI_MspInit+0x12c>)
 80062e8:	f043 0301 	orr.w	r3, r3, #1
 80062ec:	6313      	str	r3, [r2, #48]	; 0x30
 80062ee:	4b37      	ldr	r3, [pc, #220]	; (80063cc <HAL_SPI_MspInit+0x12c>)
 80062f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80062fa:	23a0      	movs	r3, #160	; 0xa0
 80062fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062fe:	2302      	movs	r3, #2
 8006300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006302:	2300      	movs	r3, #0
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006306:	2303      	movs	r3, #3
 8006308:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800630a:	2305      	movs	r3, #5
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800630e:	f107 031c 	add.w	r3, r7, #28
 8006312:	4619      	mov	r1, r3
 8006314:	482e      	ldr	r0, [pc, #184]	; (80063d0 <HAL_SPI_MspInit+0x130>)
 8006316:	f001 f837 	bl	8007388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800631a:	2340      	movs	r3, #64	; 0x40
 800631c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800631e:	2302      	movs	r3, #2
 8006320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006322:	2301      	movs	r3, #1
 8006324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006326:	2303      	movs	r3, #3
 8006328:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800632a:	2305      	movs	r3, #5
 800632c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800632e:	f107 031c 	add.w	r3, r7, #28
 8006332:	4619      	mov	r1, r3
 8006334:	4826      	ldr	r0, [pc, #152]	; (80063d0 <HAL_SPI_MspInit+0x130>)
 8006336:	f001 f827 	bl	8007388 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800633a:	e040      	b.n	80063be <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI2)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a24      	ldr	r2, [pc, #144]	; (80063d4 <HAL_SPI_MspInit+0x134>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d13b      	bne.n	80063be <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006346:	2300      	movs	r3, #0
 8006348:	613b      	str	r3, [r7, #16]
 800634a:	4b20      	ldr	r3, [pc, #128]	; (80063cc <HAL_SPI_MspInit+0x12c>)
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	4a1f      	ldr	r2, [pc, #124]	; (80063cc <HAL_SPI_MspInit+0x12c>)
 8006350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006354:	6413      	str	r3, [r2, #64]	; 0x40
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <HAL_SPI_MspInit+0x12c>)
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	4b19      	ldr	r3, [pc, #100]	; (80063cc <HAL_SPI_MspInit+0x12c>)
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	4a18      	ldr	r2, [pc, #96]	; (80063cc <HAL_SPI_MspInit+0x12c>)
 800636c:	f043 0304 	orr.w	r3, r3, #4
 8006370:	6313      	str	r3, [r2, #48]	; 0x30
 8006372:	4b16      	ldr	r3, [pc, #88]	; (80063cc <HAL_SPI_MspInit+0x12c>)
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	f003 0304 	and.w	r3, r3, #4
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800637e:	2302      	movs	r3, #2
 8006380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006382:	2302      	movs	r3, #2
 8006384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006386:	2300      	movs	r3, #0
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800638a:	2303      	movs	r3, #3
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800638e:	2307      	movs	r3, #7
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006392:	f107 031c 	add.w	r3, r7, #28
 8006396:	4619      	mov	r1, r3
 8006398:	480f      	ldr	r0, [pc, #60]	; (80063d8 <HAL_SPI_MspInit+0x138>)
 800639a:	f000 fff5 	bl	8007388 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 800639e:	2384      	movs	r3, #132	; 0x84
 80063a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063a2:	2302      	movs	r3, #2
 80063a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063aa:	2303      	movs	r3, #3
 80063ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80063ae:	2305      	movs	r3, #5
 80063b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063b2:	f107 031c 	add.w	r3, r7, #28
 80063b6:	4619      	mov	r1, r3
 80063b8:	4807      	ldr	r0, [pc, #28]	; (80063d8 <HAL_SPI_MspInit+0x138>)
 80063ba:	f000 ffe5 	bl	8007388 <HAL_GPIO_Init>
}
 80063be:	bf00      	nop
 80063c0:	3730      	adds	r7, #48	; 0x30
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40013000 	.word	0x40013000
 80063cc:	40023800 	.word	0x40023800
 80063d0:	40020000 	.word	0x40020000
 80063d4:	40003800 	.word	0x40003800
 80063d8:	40020800 	.word	0x40020800

080063dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08e      	sub	sp, #56	; 0x38
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	605a      	str	r2, [r3, #4]
 80063ee:	609a      	str	r2, [r3, #8]
 80063f0:	60da      	str	r2, [r3, #12]
 80063f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a4b      	ldr	r2, [pc, #300]	; (8006528 <HAL_UART_MspInit+0x14c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d12c      	bne.n	8006458 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80063fe:	2300      	movs	r3, #0
 8006400:	623b      	str	r3, [r7, #32]
 8006402:	4b4a      	ldr	r3, [pc, #296]	; (800652c <HAL_UART_MspInit+0x150>)
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	4a49      	ldr	r2, [pc, #292]	; (800652c <HAL_UART_MspInit+0x150>)
 8006408:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800640c:	6413      	str	r3, [r2, #64]	; 0x40
 800640e:	4b47      	ldr	r3, [pc, #284]	; (800652c <HAL_UART_MspInit+0x150>)
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006416:	623b      	str	r3, [r7, #32]
 8006418:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800641a:	2300      	movs	r3, #0
 800641c:	61fb      	str	r3, [r7, #28]
 800641e:	4b43      	ldr	r3, [pc, #268]	; (800652c <HAL_UART_MspInit+0x150>)
 8006420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006422:	4a42      	ldr	r2, [pc, #264]	; (800652c <HAL_UART_MspInit+0x150>)
 8006424:	f043 0301 	orr.w	r3, r3, #1
 8006428:	6313      	str	r3, [r2, #48]	; 0x30
 800642a:	4b40      	ldr	r3, [pc, #256]	; (800652c <HAL_UART_MspInit+0x150>)
 800642c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006436:	2303      	movs	r3, #3
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800643a:	2302      	movs	r3, #2
 800643c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800643e:	2300      	movs	r3, #0
 8006440:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006442:	2303      	movs	r3, #3
 8006444:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006446:	2308      	movs	r3, #8
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800644a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800644e:	4619      	mov	r1, r3
 8006450:	4837      	ldr	r0, [pc, #220]	; (8006530 <HAL_UART_MspInit+0x154>)
 8006452:	f000 ff99 	bl	8007388 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006456:	e063      	b.n	8006520 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART1)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a35      	ldr	r2, [pc, #212]	; (8006534 <HAL_UART_MspInit+0x158>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d12d      	bne.n	80064be <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006462:	2300      	movs	r3, #0
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	4b31      	ldr	r3, [pc, #196]	; (800652c <HAL_UART_MspInit+0x150>)
 8006468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800646a:	4a30      	ldr	r2, [pc, #192]	; (800652c <HAL_UART_MspInit+0x150>)
 800646c:	f043 0310 	orr.w	r3, r3, #16
 8006470:	6453      	str	r3, [r2, #68]	; 0x44
 8006472:	4b2e      	ldr	r3, [pc, #184]	; (800652c <HAL_UART_MspInit+0x150>)
 8006474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006476:	f003 0310 	and.w	r3, r3, #16
 800647a:	61bb      	str	r3, [r7, #24]
 800647c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800647e:	2300      	movs	r3, #0
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	4b2a      	ldr	r3, [pc, #168]	; (800652c <HAL_UART_MspInit+0x150>)
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	4a29      	ldr	r2, [pc, #164]	; (800652c <HAL_UART_MspInit+0x150>)
 8006488:	f043 0301 	orr.w	r3, r3, #1
 800648c:	6313      	str	r3, [r2, #48]	; 0x30
 800648e:	4b27      	ldr	r3, [pc, #156]	; (800652c <HAL_UART_MspInit+0x150>)
 8006490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800649a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064a0:	2302      	movs	r3, #2
 80064a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a4:	2300      	movs	r3, #0
 80064a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064a8:	2303      	movs	r3, #3
 80064aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80064ac:	2307      	movs	r3, #7
 80064ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064b4:	4619      	mov	r1, r3
 80064b6:	481e      	ldr	r0, [pc, #120]	; (8006530 <HAL_UART_MspInit+0x154>)
 80064b8:	f000 ff66 	bl	8007388 <HAL_GPIO_Init>
}
 80064bc:	e030      	b.n	8006520 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a1d      	ldr	r2, [pc, #116]	; (8006538 <HAL_UART_MspInit+0x15c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d12b      	bne.n	8006520 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART2_CLK_ENABLE();
 80064c8:	2300      	movs	r3, #0
 80064ca:	613b      	str	r3, [r7, #16]
 80064cc:	4b17      	ldr	r3, [pc, #92]	; (800652c <HAL_UART_MspInit+0x150>)
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	4a16      	ldr	r2, [pc, #88]	; (800652c <HAL_UART_MspInit+0x150>)
 80064d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064d6:	6413      	str	r3, [r2, #64]	; 0x40
 80064d8:	4b14      	ldr	r3, [pc, #80]	; (800652c <HAL_UART_MspInit+0x150>)
 80064da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	4b10      	ldr	r3, [pc, #64]	; (800652c <HAL_UART_MspInit+0x150>)
 80064ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ec:	4a0f      	ldr	r2, [pc, #60]	; (800652c <HAL_UART_MspInit+0x150>)
 80064ee:	f043 0301 	orr.w	r3, r3, #1
 80064f2:	6313      	str	r3, [r2, #48]	; 0x30
 80064f4:	4b0d      	ldr	r3, [pc, #52]	; (800652c <HAL_UART_MspInit+0x150>)
 80064f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006500:	230c      	movs	r3, #12
 8006502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006504:	2302      	movs	r3, #2
 8006506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006508:	2300      	movs	r3, #0
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800650c:	2303      	movs	r3, #3
 800650e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006510:	2307      	movs	r3, #7
 8006512:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006518:	4619      	mov	r1, r3
 800651a:	4805      	ldr	r0, [pc, #20]	; (8006530 <HAL_UART_MspInit+0x154>)
 800651c:	f000 ff34 	bl	8007388 <HAL_GPIO_Init>
}
 8006520:	bf00      	nop
 8006522:	3738      	adds	r7, #56	; 0x38
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40004c00 	.word	0x40004c00
 800652c:	40023800 	.word	0x40023800
 8006530:	40020000 	.word	0x40020000
 8006534:	40011000 	.word	0x40011000
 8006538:	40004400 	.word	0x40004400

0800653c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006540:	e7fe      	b.n	8006540 <NMI_Handler+0x4>

08006542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006542:	b480      	push	{r7}
 8006544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006546:	e7fe      	b.n	8006546 <HardFault_Handler+0x4>

08006548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800654c:	e7fe      	b.n	800654c <MemManage_Handler+0x4>

0800654e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800654e:	b480      	push	{r7}
 8006550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006552:	e7fe      	b.n	8006552 <BusFault_Handler+0x4>

08006554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006558:	e7fe      	b.n	8006558 <UsageFault_Handler+0x4>

0800655a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800655a:	b480      	push	{r7}
 800655c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800655e:	bf00      	nop
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800656c:	bf00      	nop
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006576:	b480      	push	{r7}
 8006578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800657a:	bf00      	nop
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006588:	f000 fa0a 	bl	80069a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800658c:	bf00      	nop
 800658e:	bd80      	pop	{r7, pc}

08006590 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006594:	4802      	ldr	r0, [pc, #8]	; (80065a0 <SDIO_IRQHandler+0x10>)
 8006596:	f003 fb93 	bl	8009cc0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800659a:	bf00      	nop
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	20000300 	.word	0x20000300

080065a4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80065a8:	4802      	ldr	r0, [pc, #8]	; (80065b4 <DMA2_Stream3_IRQHandler+0x10>)
 80065aa:	f000 fc77 	bl	8006e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80065ae:	bf00      	nop
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000384 	.word	0x20000384

080065b8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80065bc:	4802      	ldr	r0, [pc, #8]	; (80065c8 <DMA2_Stream6_IRQHandler+0x10>)
 80065be:	f000 fc6d 	bl	8006e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80065c2:	bf00      	nop
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	200003e4 	.word	0x200003e4

080065cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  return 1;
 80065d0:	2301      	movs	r3, #1
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <_kill>:

int _kill(int pid, int sig)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80065e6:	f007 fe23 	bl	800e230 <__errno>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2216      	movs	r2, #22
 80065ee:	601a      	str	r2, [r3, #0]
  return -1;
 80065f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <_exit>:

void _exit (int status)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006604:	f04f 31ff 	mov.w	r1, #4294967295
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7ff ffe7 	bl	80065dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800660e:	e7fe      	b.n	800660e <_exit+0x12>

08006610 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800661c:	2300      	movs	r3, #0
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	e00a      	b.n	8006638 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006622:	f3af 8000 	nop.w
 8006626:	4601      	mov	r1, r0
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	60ba      	str	r2, [r7, #8]
 800662e:	b2ca      	uxtb	r2, r1
 8006630:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	3301      	adds	r3, #1
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	429a      	cmp	r2, r3
 800663e:	dbf0      	blt.n	8006622 <_read+0x12>
  }

  return len;
 8006640:	687b      	ldr	r3, [r7, #4]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b086      	sub	sp, #24
 800664e:	af00      	add	r7, sp, #0
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006656:	2300      	movs	r3, #0
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	e009      	b.n	8006670 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	60ba      	str	r2, [r7, #8]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	4618      	mov	r0, r3
 8006666:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	3301      	adds	r3, #1
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	429a      	cmp	r2, r3
 8006676:	dbf1      	blt.n	800665c <_write+0x12>
  }
  return len;
 8006678:	687b      	ldr	r3, [r7, #4]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <_close>:

int _close(int file)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800668a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066aa:	605a      	str	r2, [r3, #4]
  return 0;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <_isatty>:

int _isatty(int file)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80066c2:	2301      	movs	r3, #1
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
	...

080066ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80066f4:	4a14      	ldr	r2, [pc, #80]	; (8006748 <_sbrk+0x5c>)
 80066f6:	4b15      	ldr	r3, [pc, #84]	; (800674c <_sbrk+0x60>)
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006700:	4b13      	ldr	r3, [pc, #76]	; (8006750 <_sbrk+0x64>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d102      	bne.n	800670e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006708:	4b11      	ldr	r3, [pc, #68]	; (8006750 <_sbrk+0x64>)
 800670a:	4a12      	ldr	r2, [pc, #72]	; (8006754 <_sbrk+0x68>)
 800670c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800670e:	4b10      	ldr	r3, [pc, #64]	; (8006750 <_sbrk+0x64>)
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4413      	add	r3, r2
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	429a      	cmp	r2, r3
 800671a:	d207      	bcs.n	800672c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800671c:	f007 fd88 	bl	800e230 <__errno>
 8006720:	4603      	mov	r3, r0
 8006722:	220c      	movs	r2, #12
 8006724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006726:	f04f 33ff 	mov.w	r3, #4294967295
 800672a:	e009      	b.n	8006740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800672c:	4b08      	ldr	r3, [pc, #32]	; (8006750 <_sbrk+0x64>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006732:	4b07      	ldr	r3, [pc, #28]	; (8006750 <_sbrk+0x64>)
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4413      	add	r3, r2
 800673a:	4a05      	ldr	r2, [pc, #20]	; (8006750 <_sbrk+0x64>)
 800673c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800673e:	68fb      	ldr	r3, [r7, #12]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	20020000 	.word	0x20020000
 800674c:	00000400 	.word	0x00000400
 8006750:	200005fc 	.word	0x200005fc
 8006754:	20000660 	.word	0x20000660

08006758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800675c:	4b06      	ldr	r3, [pc, #24]	; (8006778 <SystemInit+0x20>)
 800675e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006762:	4a05      	ldr	r2, [pc, #20]	; (8006778 <SystemInit+0x20>)
 8006764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800676c:	bf00      	nop
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	e000ed00 	.word	0xe000ed00

0800677c <_Z11debug_printPKc>:
//	__HAL_TIM_SET_COUNTER(&htim1,0);  			 // set the counter value a 0
//	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
// }

void debug_print(const char message[])
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b09c      	sub	sp, #112	; 0x70
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
	char uart_buf[100];
	int uart_buf_len;

	// TODO: config UART_Handler

	uart_buf_len = sprintf(uart_buf, message);
 8006784:	f107 0308 	add.w	r3, r7, #8
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	4618      	mov	r0, r3
 800678c:	f008 fb58 	bl	800ee40 <siprintf>
 8006790:	66f8      	str	r0, [r7, #108]	; 0x6c
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8006792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006794:	b29a      	uxth	r2, r3
 8006796:	f107 0108 	add.w	r1, r7, #8
 800679a:	2364      	movs	r3, #100	; 0x64
 800679c:	4803      	ldr	r0, [pc, #12]	; (80067ac <_Z11debug_printPKc+0x30>)
 800679e:	f005 f930 	bl	800ba02 <HAL_UART_Transmit>
}
 80067a2:	bf00      	nop
 80067a4:	3770      	adds	r7, #112	; 0x70
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	2000057c 	.word	0x2000057c

080067b0 <_Z11debug_printIhEvPKcRKT_>:
	uart_buf_len = sprintf(uart_buf, message, x);
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
}

template <class T>
void debug_print(const char message[], const T &x)
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b09c      	sub	sp, #112	; 0x70
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
	char uart_buf[100];
	int uart_buf_len;

	// TODO: config UART_Handler

	uart_buf_len = sprintf(uart_buf, message, x);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	461a      	mov	r2, r3
 80067c0:	f107 0308 	add.w	r3, r7, #8
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f008 fb3a 	bl	800ee40 <siprintf>
 80067cc:	66f8      	str	r0, [r7, #108]	; 0x6c
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80067ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	f107 0108 	add.w	r1, r7, #8
 80067d6:	2364      	movs	r3, #100	; 0x64
 80067d8:	4803      	ldr	r0, [pc, #12]	; (80067e8 <_Z11debug_printIhEvPKcRKT_+0x38>)
 80067da:	f005 f912 	bl	800ba02 <HAL_UART_Transmit>
}
 80067de:	bf00      	nop
 80067e0:	3770      	adds	r7, #112	; 0x70
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	2000057c 	.word	0x2000057c

080067ec <_Z13i2c_addr_scanP17I2C_HandleTypeDef>:
template void debug_print<float>(const char message[], const float &x, const float &y, const float &z);
template void debug_print<uint8_t>(const char message[], const uint8_t &x, const uint8_t &y, const uint8_t &z);
template void debug_print<uint16_t>(const char message[], const uint16_t &x, const uint16_t &y, const uint16_t &z);

void i2c_addr_scan(I2C_HandleTypeDef *hi2c)
{
 80067ec:	b590      	push	{r4, r7, lr}
 80067ee:	b0a5      	sub	sp, #148	; 0x94
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
	uint8_t addr[128] = {};
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	f107 0310 	add.w	r3, r7, #16
 80067fc:	227c      	movs	r2, #124	; 0x7c
 80067fe:	2100      	movs	r1, #0
 8006800:	4618      	mov	r0, r3
 8006802:	f007 fd77 	bl	800e2f4 <memset>
	register uint8_t num = 0;
 8006806:	2300      	movs	r3, #0
 8006808:	72fb      	strb	r3, [r7, #11]
	register HAL_StatusTypeDef rv;

	for (uint8_t i = 0x0; i < 128; i++)
 800680a:	2300      	movs	r3, #0
 800680c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006810:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8006814:	2b00      	cmp	r3, #0
 8006816:	db1d      	blt.n	8006854 <_Z13i2c_addr_scanP17I2C_HandleTypeDef+0x68>
	{
		rv = HAL_I2C_IsDeviceReady(hi2c, i << 1, 1, 10);
 8006818:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800681c:	b29b      	uxth	r3, r3
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	b299      	uxth	r1, r3
 8006822:	230a      	movs	r3, #10
 8006824:	2201      	movs	r2, #1
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 fac6 	bl	8007db8 <HAL_I2C_IsDeviceReady>
 800682c:	4603      	mov	r3, r0
 800682e:	461c      	mov	r4, r3
		if (!rv)
 8006830:	2c00      	cmp	r4, #0
 8006832:	d109      	bne.n	8006848 <_Z13i2c_addr_scanP17I2C_HandleTypeDef+0x5c>
		{
			addr[num++] = i;
 8006834:	7afb      	ldrb	r3, [r7, #11]
 8006836:	1c5a      	adds	r2, r3, #1
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	72fa      	strb	r2, [r7, #11]
 800683c:	3390      	adds	r3, #144	; 0x90
 800683e:	443b      	add	r3, r7
 8006840:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006844:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uint8_t i = 0x0; i < 128; i++)
 8006848:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800684c:	3301      	adds	r3, #1
 800684e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006852:	e7dd      	b.n	8006810 <_Z13i2c_addr_scanP17I2C_HandleTypeDef+0x24>
		}
	}

	debug_print("found %d address(es):", num);
 8006854:	f107 030b 	add.w	r3, r7, #11
 8006858:	4619      	mov	r1, r3
 800685a:	4810      	ldr	r0, [pc, #64]	; (800689c <_Z13i2c_addr_scanP17I2C_HandleTypeDef+0xb0>)
 800685c:	f7ff ffa8 	bl	80067b0 <_Z11debug_printIhEvPKcRKT_>
	for (uint8_t i = 0x0; i < num; i++)
 8006860:	2300      	movs	r3, #0
 8006862:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8006866:	7afb      	ldrb	r3, [r7, #11]
 8006868:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800686c:	429a      	cmp	r2, r3
 800686e:	d20e      	bcs.n	800688e <_Z13i2c_addr_scanP17I2C_HandleTypeDef+0xa2>
	{
		debug_print(" 0x%x ", addr[i]);
 8006870:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8006874:	f107 020c 	add.w	r2, r7, #12
 8006878:	4413      	add	r3, r2
 800687a:	4619      	mov	r1, r3
 800687c:	4808      	ldr	r0, [pc, #32]	; (80068a0 <_Z13i2c_addr_scanP17I2C_HandleTypeDef+0xb4>)
 800687e:	f7ff ff97 	bl	80067b0 <_Z11debug_printIhEvPKcRKT_>
	for (uint8_t i = 0x0; i < num; i++)
 8006882:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8006886:	3301      	adds	r3, #1
 8006888:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800688c:	e7eb      	b.n	8006866 <_Z13i2c_addr_scanP17I2C_HandleTypeDef+0x7a>
	}
	debug_print("\r\n");
 800688e:	4805      	ldr	r0, [pc, #20]	; (80068a4 <_Z13i2c_addr_scanP17I2C_HandleTypeDef+0xb8>)
 8006890:	f7ff ff74 	bl	800677c <_Z11debug_printPKc>
	return;
 8006894:	bf00      	nop
}
 8006896:	3794      	adds	r7, #148	; 0x94
 8006898:	46bd      	mov	sp, r7
 800689a:	bd90      	pop	{r4, r7, pc}
 800689c:	08011bf4 	.word	0x08011bf4
 80068a0:	08011c0c 	.word	0x08011c0c
 80068a4:	08011c14 	.word	0x08011c14

080068a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80068a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80068e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80068ac:	480d      	ldr	r0, [pc, #52]	; (80068e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80068ae:	490e      	ldr	r1, [pc, #56]	; (80068e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80068b0:	4a0e      	ldr	r2, [pc, #56]	; (80068ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80068b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068b4:	e002      	b.n	80068bc <LoopCopyDataInit>

080068b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068ba:	3304      	adds	r3, #4

080068bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80068bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80068be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80068c0:	d3f9      	bcc.n	80068b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80068c2:	4a0b      	ldr	r2, [pc, #44]	; (80068f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80068c4:	4c0b      	ldr	r4, [pc, #44]	; (80068f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80068c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068c8:	e001      	b.n	80068ce <LoopFillZerobss>

080068ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80068cc:	3204      	adds	r2, #4

080068ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80068ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068d0:	d3fb      	bcc.n	80068ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80068d2:	f7ff ff41 	bl	8006758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80068d6:	f007 fcb1 	bl	800e23c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068da:	f7fe feab 	bl	8005634 <main>
  bx  lr    
 80068de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80068e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80068e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068e8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80068ec:	08012088 	.word	0x08012088
  ldr r2, =_sbss
 80068f0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80068f4:	2000065c 	.word	0x2000065c

080068f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068f8:	e7fe      	b.n	80068f8 <ADC_IRQHandler>
	...

080068fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006900:	4b0e      	ldr	r3, [pc, #56]	; (800693c <HAL_Init+0x40>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a0d      	ldr	r2, [pc, #52]	; (800693c <HAL_Init+0x40>)
 8006906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800690a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800690c:	4b0b      	ldr	r3, [pc, #44]	; (800693c <HAL_Init+0x40>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a0a      	ldr	r2, [pc, #40]	; (800693c <HAL_Init+0x40>)
 8006912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006918:	4b08      	ldr	r3, [pc, #32]	; (800693c <HAL_Init+0x40>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a07      	ldr	r2, [pc, #28]	; (800693c <HAL_Init+0x40>)
 800691e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006924:	2003      	movs	r0, #3
 8006926:	f000 f94f 	bl	8006bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800692a:	200f      	movs	r0, #15
 800692c:	f000 f808 	bl	8006940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006930:	f7ff fac2 	bl	8005eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	40023c00 	.word	0x40023c00

08006940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006948:	4b12      	ldr	r3, [pc, #72]	; (8006994 <HAL_InitTick+0x54>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	4b12      	ldr	r3, [pc, #72]	; (8006998 <HAL_InitTick+0x58>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	4619      	mov	r1, r3
 8006952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006956:	fbb3 f3f1 	udiv	r3, r3, r1
 800695a:	fbb2 f3f3 	udiv	r3, r2, r3
 800695e:	4618      	mov	r0, r3
 8006960:	f000 f967 	bl	8006c32 <HAL_SYSTICK_Config>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e00e      	b.n	800698c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b0f      	cmp	r3, #15
 8006972:	d80a      	bhi.n	800698a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006974:	2200      	movs	r2, #0
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	f04f 30ff 	mov.w	r0, #4294967295
 800697c:	f000 f92f 	bl	8006bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006980:	4a06      	ldr	r2, [pc, #24]	; (800699c <HAL_InitTick+0x5c>)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	e000      	b.n	800698c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
}
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20000000 	.word	0x20000000
 8006998:	20000008 	.word	0x20000008
 800699c:	20000004 	.word	0x20000004

080069a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80069a4:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <HAL_IncTick+0x20>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	4b06      	ldr	r3, [pc, #24]	; (80069c4 <HAL_IncTick+0x24>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4413      	add	r3, r2
 80069b0:	4a04      	ldr	r2, [pc, #16]	; (80069c4 <HAL_IncTick+0x24>)
 80069b2:	6013      	str	r3, [r2, #0]
}
 80069b4:	bf00      	nop
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	20000008 	.word	0x20000008
 80069c4:	20000600 	.word	0x20000600

080069c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
  return uwTick;
 80069cc:	4b03      	ldr	r3, [pc, #12]	; (80069dc <HAL_GetTick+0x14>)
 80069ce:	681b      	ldr	r3, [r3, #0]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	20000600 	.word	0x20000600

080069e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069e8:	f7ff ffee 	bl	80069c8 <HAL_GetTick>
 80069ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d005      	beq.n	8006a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069fa:	4b0a      	ldr	r3, [pc, #40]	; (8006a24 <HAL_Delay+0x44>)
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a06:	bf00      	nop
 8006a08:	f7ff ffde 	bl	80069c8 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d8f7      	bhi.n	8006a08 <HAL_Delay+0x28>
  {
  }
}
 8006a18:	bf00      	nop
 8006a1a:	bf00      	nop
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20000008 	.word	0x20000008

08006a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a38:	4b0c      	ldr	r3, [pc, #48]	; (8006a6c <__NVIC_SetPriorityGrouping+0x44>)
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a44:	4013      	ands	r3, r2
 8006a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a5a:	4a04      	ldr	r2, [pc, #16]	; (8006a6c <__NVIC_SetPriorityGrouping+0x44>)
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	60d3      	str	r3, [r2, #12]
}
 8006a60:	bf00      	nop
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	e000ed00 	.word	0xe000ed00

08006a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a70:	b480      	push	{r7}
 8006a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a74:	4b04      	ldr	r3, [pc, #16]	; (8006a88 <__NVIC_GetPriorityGrouping+0x18>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	0a1b      	lsrs	r3, r3, #8
 8006a7a:	f003 0307 	and.w	r3, r3, #7
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	e000ed00 	.word	0xe000ed00

08006a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	4603      	mov	r3, r0
 8006a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	db0b      	blt.n	8006ab6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a9e:	79fb      	ldrb	r3, [r7, #7]
 8006aa0:	f003 021f 	and.w	r2, r3, #31
 8006aa4:	4907      	ldr	r1, [pc, #28]	; (8006ac4 <__NVIC_EnableIRQ+0x38>)
 8006aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	2001      	movs	r0, #1
 8006aae:	fa00 f202 	lsl.w	r2, r0, r2
 8006ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006ab6:	bf00      	nop
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	e000e100 	.word	0xe000e100

08006ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	4603      	mov	r3, r0
 8006ad0:	6039      	str	r1, [r7, #0]
 8006ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	db0a      	blt.n	8006af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	490c      	ldr	r1, [pc, #48]	; (8006b14 <__NVIC_SetPriority+0x4c>)
 8006ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ae6:	0112      	lsls	r2, r2, #4
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	440b      	add	r3, r1
 8006aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006af0:	e00a      	b.n	8006b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	4908      	ldr	r1, [pc, #32]	; (8006b18 <__NVIC_SetPriority+0x50>)
 8006af8:	79fb      	ldrb	r3, [r7, #7]
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	3b04      	subs	r3, #4
 8006b00:	0112      	lsls	r2, r2, #4
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	440b      	add	r3, r1
 8006b06:	761a      	strb	r2, [r3, #24]
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	e000e100 	.word	0xe000e100
 8006b18:	e000ed00 	.word	0xe000ed00

08006b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b089      	sub	sp, #36	; 0x24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f003 0307 	and.w	r3, r3, #7
 8006b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	f1c3 0307 	rsb	r3, r3, #7
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	bf28      	it	cs
 8006b3a:	2304      	movcs	r3, #4
 8006b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	3304      	adds	r3, #4
 8006b42:	2b06      	cmp	r3, #6
 8006b44:	d902      	bls.n	8006b4c <NVIC_EncodePriority+0x30>
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	3b03      	subs	r3, #3
 8006b4a:	e000      	b.n	8006b4e <NVIC_EncodePriority+0x32>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b50:	f04f 32ff 	mov.w	r2, #4294967295
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5a:	43da      	mvns	r2, r3
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	401a      	ands	r2, r3
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b64:	f04f 31ff 	mov.w	r1, #4294967295
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b6e:	43d9      	mvns	r1, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b74:	4313      	orrs	r3, r2
         );
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3724      	adds	r7, #36	; 0x24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
	...

08006b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b94:	d301      	bcc.n	8006b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b96:	2301      	movs	r3, #1
 8006b98:	e00f      	b.n	8006bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b9a:	4a0a      	ldr	r2, [pc, #40]	; (8006bc4 <SysTick_Config+0x40>)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ba2:	210f      	movs	r1, #15
 8006ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba8:	f7ff ff8e 	bl	8006ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006bac:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <SysTick_Config+0x40>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006bb2:	4b04      	ldr	r3, [pc, #16]	; (8006bc4 <SysTick_Config+0x40>)
 8006bb4:	2207      	movs	r2, #7
 8006bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	e000e010 	.word	0xe000e010

08006bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff ff29 	bl	8006a28 <__NVIC_SetPriorityGrouping>
}
 8006bd6:	bf00      	nop
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b086      	sub	sp, #24
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	4603      	mov	r3, r0
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	607a      	str	r2, [r7, #4]
 8006bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006bf0:	f7ff ff3e 	bl	8006a70 <__NVIC_GetPriorityGrouping>
 8006bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	6978      	ldr	r0, [r7, #20]
 8006bfc:	f7ff ff8e 	bl	8006b1c <NVIC_EncodePriority>
 8006c00:	4602      	mov	r2, r0
 8006c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c06:	4611      	mov	r1, r2
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff ff5d 	bl	8006ac8 <__NVIC_SetPriority>
}
 8006c0e:	bf00      	nop
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b082      	sub	sp, #8
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff ff31 	bl	8006a8c <__NVIC_EnableIRQ>
}
 8006c2a:	bf00      	nop
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b082      	sub	sp, #8
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff ffa2 	bl	8006b84 <SysTick_Config>
 8006c40:	4603      	mov	r3, r0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006c58:	f7ff feb6 	bl	80069c8 <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e099      	b.n	8006d9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0201 	bic.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c88:	e00f      	b.n	8006caa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c8a:	f7ff fe9d 	bl	80069c8 <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	2b05      	cmp	r3, #5
 8006c96:	d908      	bls.n	8006caa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2203      	movs	r2, #3
 8006ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e078      	b.n	8006d9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e8      	bne.n	8006c8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	4b38      	ldr	r3, [pc, #224]	; (8006da4 <HAL_DMA_Init+0x158>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006cd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ce2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d107      	bne.n	8006d14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f023 0307 	bic.w	r3, r3, #7
 8006d2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d117      	bne.n	8006d6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00e      	beq.n	8006d6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fa9d 	bl	8007290 <DMA_CheckFifoParam>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2240      	movs	r2, #64	; 0x40
 8006d60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e016      	b.n	8006d9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fa54 	bl	8007224 <DMA_CalcBaseAndBitshift>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d84:	223f      	movs	r2, #63	; 0x3f
 8006d86:	409a      	lsls	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	f010803f 	.word	0xf010803f

08006da8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <HAL_DMA_Start_IT+0x26>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e040      	b.n	8006e50 <HAL_DMA_Start_IT+0xa8>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d12f      	bne.n	8006e42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2202      	movs	r2, #2
 8006de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 f9e6 	bl	80071c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e00:	223f      	movs	r2, #63	; 0x3f
 8006e02:	409a      	lsls	r2, r3
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0216 	orr.w	r2, r2, #22
 8006e16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d007      	beq.n	8006e30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f042 0208 	orr.w	r2, r2, #8
 8006e2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0201 	orr.w	r2, r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]
 8006e40:	e005      	b.n	8006e4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d004      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2280      	movs	r2, #128	; 0x80
 8006e70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e00c      	b.n	8006e90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2205      	movs	r2, #5
 8006e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0201 	bic.w	r2, r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ea8:	4b8e      	ldr	r3, [pc, #568]	; (80070e4 <HAL_DMA_IRQHandler+0x248>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a8e      	ldr	r2, [pc, #568]	; (80070e8 <HAL_DMA_IRQHandler+0x24c>)
 8006eae:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb2:	0a9b      	lsrs	r3, r3, #10
 8006eb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec6:	2208      	movs	r2, #8
 8006ec8:	409a      	lsls	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4013      	ands	r3, r2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d01a      	beq.n	8006f08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d013      	beq.n	8006f08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 0204 	bic.w	r2, r2, #4
 8006eee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	409a      	lsls	r2, r3
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f00:	f043 0201 	orr.w	r2, r3, #1
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	409a      	lsls	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4013      	ands	r3, r2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d012      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00b      	beq.n	8006f3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	409a      	lsls	r2, r3
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f36:	f043 0202 	orr.w	r2, r3, #2
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f42:	2204      	movs	r2, #4
 8006f44:	409a      	lsls	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4013      	ands	r3, r2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d012      	beq.n	8006f74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00b      	beq.n	8006f74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f60:	2204      	movs	r2, #4
 8006f62:	409a      	lsls	r2, r3
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6c:	f043 0204 	orr.w	r2, r3, #4
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f78:	2210      	movs	r2, #16
 8006f7a:	409a      	lsls	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d043      	beq.n	800700c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0308 	and.w	r3, r3, #8
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d03c      	beq.n	800700c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f96:	2210      	movs	r2, #16
 8006f98:	409a      	lsls	r2, r3
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d018      	beq.n	8006fde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d108      	bne.n	8006fcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d024      	beq.n	800700c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	4798      	blx	r3
 8006fca:	e01f      	b.n	800700c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d01b      	beq.n	800700c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	4798      	blx	r3
 8006fdc:	e016      	b.n	800700c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d107      	bne.n	8006ffc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0208 	bic.w	r2, r2, #8
 8006ffa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007010:	2220      	movs	r2, #32
 8007012:	409a      	lsls	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4013      	ands	r3, r2
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 808f 	beq.w	800713c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0310 	and.w	r3, r3, #16
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 8087 	beq.w	800713c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007032:	2220      	movs	r2, #32
 8007034:	409a      	lsls	r2, r3
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b05      	cmp	r3, #5
 8007044:	d136      	bne.n	80070b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0216 	bic.w	r2, r2, #22
 8007054:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	695a      	ldr	r2, [r3, #20]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007064:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	d103      	bne.n	8007076 <HAL_DMA_IRQHandler+0x1da>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007072:	2b00      	cmp	r3, #0
 8007074:	d007      	beq.n	8007086 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0208 	bic.w	r2, r2, #8
 8007084:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708a:	223f      	movs	r2, #63	; 0x3f
 800708c:	409a      	lsls	r2, r3
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d07e      	beq.n	80071a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	4798      	blx	r3
        }
        return;
 80070b2:	e079      	b.n	80071a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d01d      	beq.n	80070fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10d      	bne.n	80070ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d031      	beq.n	800713c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	4798      	blx	r3
 80070e0:	e02c      	b.n	800713c <HAL_DMA_IRQHandler+0x2a0>
 80070e2:	bf00      	nop
 80070e4:	20000000 	.word	0x20000000
 80070e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d023      	beq.n	800713c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	4798      	blx	r3
 80070fc:	e01e      	b.n	800713c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10f      	bne.n	800712c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 0210 	bic.w	r2, r2, #16
 800711a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007140:	2b00      	cmp	r3, #0
 8007142:	d032      	beq.n	80071aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	d022      	beq.n	8007196 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2205      	movs	r2, #5
 8007154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0201 	bic.w	r2, r2, #1
 8007166:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	3301      	adds	r3, #1
 800716c:	60bb      	str	r3, [r7, #8]
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	429a      	cmp	r2, r3
 8007172:	d307      	bcc.n	8007184 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1f2      	bne.n	8007168 <HAL_DMA_IRQHandler+0x2cc>
 8007182:	e000      	b.n	8007186 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007184:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	4798      	blx	r3
 80071a6:	e000      	b.n	80071aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80071a8:	bf00      	nop
    }
  }
}
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80071bc:	4618      	mov	r0, r3
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	2b40      	cmp	r3, #64	; 0x40
 80071f4:	d108      	bne.n	8007208 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007206:	e007      	b.n	8007218 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	60da      	str	r2, [r3, #12]
}
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	b2db      	uxtb	r3, r3
 8007232:	3b10      	subs	r3, #16
 8007234:	4a14      	ldr	r2, [pc, #80]	; (8007288 <DMA_CalcBaseAndBitshift+0x64>)
 8007236:	fba2 2303 	umull	r2, r3, r2, r3
 800723a:	091b      	lsrs	r3, r3, #4
 800723c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800723e:	4a13      	ldr	r2, [pc, #76]	; (800728c <DMA_CalcBaseAndBitshift+0x68>)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4413      	add	r3, r2
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b03      	cmp	r3, #3
 8007250:	d909      	bls.n	8007266 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800725a:	f023 0303 	bic.w	r3, r3, #3
 800725e:	1d1a      	adds	r2, r3, #4
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	659a      	str	r2, [r3, #88]	; 0x58
 8007264:	e007      	b.n	8007276 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800726e:	f023 0303 	bic.w	r3, r3, #3
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800727a:	4618      	mov	r0, r3
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	aaaaaaab 	.word	0xaaaaaaab
 800728c:	08011c30 	.word	0x08011c30

08007290 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d11f      	bne.n	80072ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d856      	bhi.n	800735e <DMA_CheckFifoParam+0xce>
 80072b0:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <DMA_CheckFifoParam+0x28>)
 80072b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b6:	bf00      	nop
 80072b8:	080072c9 	.word	0x080072c9
 80072bc:	080072db 	.word	0x080072db
 80072c0:	080072c9 	.word	0x080072c9
 80072c4:	0800735f 	.word	0x0800735f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d046      	beq.n	8007362 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072d8:	e043      	b.n	8007362 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072e2:	d140      	bne.n	8007366 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072e8:	e03d      	b.n	8007366 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f2:	d121      	bne.n	8007338 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	d837      	bhi.n	800736a <DMA_CheckFifoParam+0xda>
 80072fa:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <DMA_CheckFifoParam+0x70>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	08007311 	.word	0x08007311
 8007304:	08007317 	.word	0x08007317
 8007308:	08007311 	.word	0x08007311
 800730c:	08007329 	.word	0x08007329
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	73fb      	strb	r3, [r7, #15]
      break;
 8007314:	e030      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d025      	beq.n	800736e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007326:	e022      	b.n	800736e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007330:	d11f      	bne.n	8007372 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007336:	e01c      	b.n	8007372 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b02      	cmp	r3, #2
 800733c:	d903      	bls.n	8007346 <DMA_CheckFifoParam+0xb6>
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2b03      	cmp	r3, #3
 8007342:	d003      	beq.n	800734c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007344:	e018      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	73fb      	strb	r3, [r7, #15]
      break;
 800734a:	e015      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00e      	beq.n	8007376 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	73fb      	strb	r3, [r7, #15]
      break;
 800735c:	e00b      	b.n	8007376 <DMA_CheckFifoParam+0xe6>
      break;
 800735e:	bf00      	nop
 8007360:	e00a      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
      break;
 8007362:	bf00      	nop
 8007364:	e008      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
      break;
 8007366:	bf00      	nop
 8007368:	e006      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
      break;
 800736a:	bf00      	nop
 800736c:	e004      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
      break;
 800736e:	bf00      	nop
 8007370:	e002      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
      break;   
 8007372:	bf00      	nop
 8007374:	e000      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
      break;
 8007376:	bf00      	nop
    }
  } 
  
  return status; 
 8007378:	7bfb      	ldrb	r3, [r7, #15]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop

08007388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007388:	b480      	push	{r7}
 800738a:	b089      	sub	sp, #36	; 0x24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007392:	2300      	movs	r3, #0
 8007394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007396:	2300      	movs	r3, #0
 8007398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800739a:	2300      	movs	r3, #0
 800739c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800739e:	2300      	movs	r3, #0
 80073a0:	61fb      	str	r3, [r7, #28]
 80073a2:	e165      	b.n	8007670 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80073a4:	2201      	movs	r2, #1
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	4013      	ands	r3, r2
 80073b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	429a      	cmp	r2, r3
 80073be:	f040 8154 	bne.w	800766a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f003 0303 	and.w	r3, r3, #3
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d005      	beq.n	80073da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d130      	bne.n	800743c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	2203      	movs	r2, #3
 80073e6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ea:	43db      	mvns	r3, r3
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	4013      	ands	r3, r2
 80073f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	68da      	ldr	r2, [r3, #12]
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	4313      	orrs	r3, r2
 8007402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007410:	2201      	movs	r2, #1
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	fa02 f303 	lsl.w	r3, r2, r3
 8007418:	43db      	mvns	r3, r3
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	4013      	ands	r3, r2
 800741e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	091b      	lsrs	r3, r3, #4
 8007426:	f003 0201 	and.w	r2, r3, #1
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	fa02 f303 	lsl.w	r3, r2, r3
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	4313      	orrs	r3, r2
 8007434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69ba      	ldr	r2, [r7, #24]
 800743a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f003 0303 	and.w	r3, r3, #3
 8007444:	2b03      	cmp	r3, #3
 8007446:	d017      	beq.n	8007478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	005b      	lsls	r3, r3, #1
 8007452:	2203      	movs	r2, #3
 8007454:	fa02 f303 	lsl.w	r3, r2, r3
 8007458:	43db      	mvns	r3, r3
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	4013      	ands	r3, r2
 800745e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	005b      	lsls	r3, r3, #1
 8007468:	fa02 f303 	lsl.w	r3, r2, r3
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	4313      	orrs	r3, r2
 8007470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f003 0303 	and.w	r3, r3, #3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d123      	bne.n	80074cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	08da      	lsrs	r2, r3, #3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3208      	adds	r2, #8
 800748c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	220f      	movs	r2, #15
 800749c:	fa02 f303 	lsl.w	r3, r2, r3
 80074a0:	43db      	mvns	r3, r3
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	4013      	ands	r3, r2
 80074a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	691a      	ldr	r2, [r3, #16]
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	fa02 f303 	lsl.w	r3, r2, r3
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	08da      	lsrs	r2, r3, #3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3208      	adds	r2, #8
 80074c6:	69b9      	ldr	r1, [r7, #24]
 80074c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	2203      	movs	r2, #3
 80074d8:	fa02 f303 	lsl.w	r3, r2, r3
 80074dc:	43db      	mvns	r3, r3
 80074de:	69ba      	ldr	r2, [r7, #24]
 80074e0:	4013      	ands	r3, r2
 80074e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f003 0203 	and.w	r2, r3, #3
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	fa02 f303 	lsl.w	r3, r2, r3
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	69ba      	ldr	r2, [r7, #24]
 80074fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 80ae 	beq.w	800766a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800750e:	2300      	movs	r3, #0
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	4b5d      	ldr	r3, [pc, #372]	; (8007688 <HAL_GPIO_Init+0x300>)
 8007514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007516:	4a5c      	ldr	r2, [pc, #368]	; (8007688 <HAL_GPIO_Init+0x300>)
 8007518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800751c:	6453      	str	r3, [r2, #68]	; 0x44
 800751e:	4b5a      	ldr	r3, [pc, #360]	; (8007688 <HAL_GPIO_Init+0x300>)
 8007520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800752a:	4a58      	ldr	r2, [pc, #352]	; (800768c <HAL_GPIO_Init+0x304>)
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	089b      	lsrs	r3, r3, #2
 8007530:	3302      	adds	r3, #2
 8007532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	220f      	movs	r2, #15
 8007542:	fa02 f303 	lsl.w	r3, r2, r3
 8007546:	43db      	mvns	r3, r3
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	4013      	ands	r3, r2
 800754c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a4f      	ldr	r2, [pc, #316]	; (8007690 <HAL_GPIO_Init+0x308>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d025      	beq.n	80075a2 <HAL_GPIO_Init+0x21a>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a4e      	ldr	r2, [pc, #312]	; (8007694 <HAL_GPIO_Init+0x30c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d01f      	beq.n	800759e <HAL_GPIO_Init+0x216>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a4d      	ldr	r2, [pc, #308]	; (8007698 <HAL_GPIO_Init+0x310>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d019      	beq.n	800759a <HAL_GPIO_Init+0x212>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a4c      	ldr	r2, [pc, #304]	; (800769c <HAL_GPIO_Init+0x314>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d013      	beq.n	8007596 <HAL_GPIO_Init+0x20e>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a4b      	ldr	r2, [pc, #300]	; (80076a0 <HAL_GPIO_Init+0x318>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00d      	beq.n	8007592 <HAL_GPIO_Init+0x20a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a4a      	ldr	r2, [pc, #296]	; (80076a4 <HAL_GPIO_Init+0x31c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d007      	beq.n	800758e <HAL_GPIO_Init+0x206>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a49      	ldr	r2, [pc, #292]	; (80076a8 <HAL_GPIO_Init+0x320>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d101      	bne.n	800758a <HAL_GPIO_Init+0x202>
 8007586:	2306      	movs	r3, #6
 8007588:	e00c      	b.n	80075a4 <HAL_GPIO_Init+0x21c>
 800758a:	2307      	movs	r3, #7
 800758c:	e00a      	b.n	80075a4 <HAL_GPIO_Init+0x21c>
 800758e:	2305      	movs	r3, #5
 8007590:	e008      	b.n	80075a4 <HAL_GPIO_Init+0x21c>
 8007592:	2304      	movs	r3, #4
 8007594:	e006      	b.n	80075a4 <HAL_GPIO_Init+0x21c>
 8007596:	2303      	movs	r3, #3
 8007598:	e004      	b.n	80075a4 <HAL_GPIO_Init+0x21c>
 800759a:	2302      	movs	r3, #2
 800759c:	e002      	b.n	80075a4 <HAL_GPIO_Init+0x21c>
 800759e:	2301      	movs	r3, #1
 80075a0:	e000      	b.n	80075a4 <HAL_GPIO_Init+0x21c>
 80075a2:	2300      	movs	r3, #0
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	f002 0203 	and.w	r2, r2, #3
 80075aa:	0092      	lsls	r2, r2, #2
 80075ac:	4093      	lsls	r3, r2
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075b4:	4935      	ldr	r1, [pc, #212]	; (800768c <HAL_GPIO_Init+0x304>)
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	089b      	lsrs	r3, r3, #2
 80075ba:	3302      	adds	r3, #2
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80075c2:	4b3a      	ldr	r3, [pc, #232]	; (80076ac <HAL_GPIO_Init+0x324>)
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	43db      	mvns	r3, r3
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	4013      	ands	r3, r2
 80075d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80075e6:	4a31      	ldr	r2, [pc, #196]	; (80076ac <HAL_GPIO_Init+0x324>)
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80075ec:	4b2f      	ldr	r3, [pc, #188]	; (80076ac <HAL_GPIO_Init+0x324>)
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	43db      	mvns	r3, r3
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	4013      	ands	r3, r2
 80075fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007610:	4a26      	ldr	r2, [pc, #152]	; (80076ac <HAL_GPIO_Init+0x324>)
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007616:	4b25      	ldr	r3, [pc, #148]	; (80076ac <HAL_GPIO_Init+0x324>)
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	43db      	mvns	r3, r3
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	4013      	ands	r3, r2
 8007624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	4313      	orrs	r3, r2
 8007638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800763a:	4a1c      	ldr	r2, [pc, #112]	; (80076ac <HAL_GPIO_Init+0x324>)
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007640:	4b1a      	ldr	r3, [pc, #104]	; (80076ac <HAL_GPIO_Init+0x324>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	43db      	mvns	r3, r3
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	4013      	ands	r3, r2
 800764e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	4313      	orrs	r3, r2
 8007662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007664:	4a11      	ldr	r2, [pc, #68]	; (80076ac <HAL_GPIO_Init+0x324>)
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	3301      	adds	r3, #1
 800766e:	61fb      	str	r3, [r7, #28]
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	2b0f      	cmp	r3, #15
 8007674:	f67f ae96 	bls.w	80073a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007678:	bf00      	nop
 800767a:	bf00      	nop
 800767c:	3724      	adds	r7, #36	; 0x24
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	40023800 	.word	0x40023800
 800768c:	40013800 	.word	0x40013800
 8007690:	40020000 	.word	0x40020000
 8007694:	40020400 	.word	0x40020400
 8007698:	40020800 	.word	0x40020800
 800769c:	40020c00 	.word	0x40020c00
 80076a0:	40021000 	.word	0x40021000
 80076a4:	40021400 	.word	0x40021400
 80076a8:	40021800 	.word	0x40021800
 80076ac:	40013c00 	.word	0x40013c00

080076b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	807b      	strh	r3, [r7, #2]
 80076bc:	4613      	mov	r3, r2
 80076be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80076c0:	787b      	ldrb	r3, [r7, #1]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80076c6:	887a      	ldrh	r2, [r7, #2]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80076cc:	e003      	b.n	80076d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80076ce:	887b      	ldrh	r3, [r7, #2]
 80076d0:	041a      	lsls	r2, r3, #16
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	619a      	str	r2, [r3, #24]
}
 80076d6:	bf00      	nop
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
	...

080076e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e12b      	b.n	800794e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d106      	bne.n	8007710 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7fe fbfc 	bl	8005f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2224      	movs	r2, #36	; 0x24
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0201 	bic.w	r2, r2, #1
 8007726:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007736:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007746:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007748:	f001 f82a 	bl	80087a0 <HAL_RCC_GetPCLK1Freq>
 800774c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	4a81      	ldr	r2, [pc, #516]	; (8007958 <HAL_I2C_Init+0x274>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d807      	bhi.n	8007768 <HAL_I2C_Init+0x84>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4a80      	ldr	r2, [pc, #512]	; (800795c <HAL_I2C_Init+0x278>)
 800775c:	4293      	cmp	r3, r2
 800775e:	bf94      	ite	ls
 8007760:	2301      	movls	r3, #1
 8007762:	2300      	movhi	r3, #0
 8007764:	b2db      	uxtb	r3, r3
 8007766:	e006      	b.n	8007776 <HAL_I2C_Init+0x92>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4a7d      	ldr	r2, [pc, #500]	; (8007960 <HAL_I2C_Init+0x27c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	bf94      	ite	ls
 8007770:	2301      	movls	r3, #1
 8007772:	2300      	movhi	r3, #0
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e0e7      	b.n	800794e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4a78      	ldr	r2, [pc, #480]	; (8007964 <HAL_I2C_Init+0x280>)
 8007782:	fba2 2303 	umull	r2, r3, r2, r3
 8007786:	0c9b      	lsrs	r3, r3, #18
 8007788:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	430a      	orrs	r2, r1
 800779c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	4a6a      	ldr	r2, [pc, #424]	; (8007958 <HAL_I2C_Init+0x274>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d802      	bhi.n	80077b8 <HAL_I2C_Init+0xd4>
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	3301      	adds	r3, #1
 80077b6:	e009      	b.n	80077cc <HAL_I2C_Init+0xe8>
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80077be:	fb02 f303 	mul.w	r3, r2, r3
 80077c2:	4a69      	ldr	r2, [pc, #420]	; (8007968 <HAL_I2C_Init+0x284>)
 80077c4:	fba2 2303 	umull	r2, r3, r2, r3
 80077c8:	099b      	lsrs	r3, r3, #6
 80077ca:	3301      	adds	r3, #1
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	6812      	ldr	r2, [r2, #0]
 80077d0:	430b      	orrs	r3, r1
 80077d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80077de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	495c      	ldr	r1, [pc, #368]	; (8007958 <HAL_I2C_Init+0x274>)
 80077e8:	428b      	cmp	r3, r1
 80077ea:	d819      	bhi.n	8007820 <HAL_I2C_Init+0x13c>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	1e59      	subs	r1, r3, #1
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80077fa:	1c59      	adds	r1, r3, #1
 80077fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007800:	400b      	ands	r3, r1
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <HAL_I2C_Init+0x138>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	1e59      	subs	r1, r3, #1
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	fbb1 f3f3 	udiv	r3, r1, r3
 8007814:	3301      	adds	r3, #1
 8007816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800781a:	e051      	b.n	80078c0 <HAL_I2C_Init+0x1dc>
 800781c:	2304      	movs	r3, #4
 800781e:	e04f      	b.n	80078c0 <HAL_I2C_Init+0x1dc>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d111      	bne.n	800784c <HAL_I2C_Init+0x168>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	1e58      	subs	r0, r3, #1
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6859      	ldr	r1, [r3, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	440b      	add	r3, r1
 8007836:	fbb0 f3f3 	udiv	r3, r0, r3
 800783a:	3301      	adds	r3, #1
 800783c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007840:	2b00      	cmp	r3, #0
 8007842:	bf0c      	ite	eq
 8007844:	2301      	moveq	r3, #1
 8007846:	2300      	movne	r3, #0
 8007848:	b2db      	uxtb	r3, r3
 800784a:	e012      	b.n	8007872 <HAL_I2C_Init+0x18e>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	1e58      	subs	r0, r3, #1
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6859      	ldr	r1, [r3, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	440b      	add	r3, r1
 800785a:	0099      	lsls	r1, r3, #2
 800785c:	440b      	add	r3, r1
 800785e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007862:	3301      	adds	r3, #1
 8007864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007868:	2b00      	cmp	r3, #0
 800786a:	bf0c      	ite	eq
 800786c:	2301      	moveq	r3, #1
 800786e:	2300      	movne	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <HAL_I2C_Init+0x196>
 8007876:	2301      	movs	r3, #1
 8007878:	e022      	b.n	80078c0 <HAL_I2C_Init+0x1dc>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10e      	bne.n	80078a0 <HAL_I2C_Init+0x1bc>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	1e58      	subs	r0, r3, #1
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6859      	ldr	r1, [r3, #4]
 800788a:	460b      	mov	r3, r1
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	440b      	add	r3, r1
 8007890:	fbb0 f3f3 	udiv	r3, r0, r3
 8007894:	3301      	adds	r3, #1
 8007896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800789a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800789e:	e00f      	b.n	80078c0 <HAL_I2C_Init+0x1dc>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	1e58      	subs	r0, r3, #1
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6859      	ldr	r1, [r3, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	440b      	add	r3, r1
 80078ae:	0099      	lsls	r1, r3, #2
 80078b0:	440b      	add	r3, r1
 80078b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80078b6:	3301      	adds	r3, #1
 80078b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078c0:	6879      	ldr	r1, [r7, #4]
 80078c2:	6809      	ldr	r1, [r1, #0]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	69da      	ldr	r2, [r3, #28]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	431a      	orrs	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80078ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6911      	ldr	r1, [r2, #16]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	68d2      	ldr	r2, [r2, #12]
 80078fa:	4311      	orrs	r1, r2
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	6812      	ldr	r2, [r2, #0]
 8007900:	430b      	orrs	r3, r1
 8007902:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	695a      	ldr	r2, [r3, #20]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	431a      	orrs	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0201 	orr.w	r2, r2, #1
 800792e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2220      	movs	r2, #32
 800793a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	000186a0 	.word	0x000186a0
 800795c:	001e847f 	.word	0x001e847f
 8007960:	003d08ff 	.word	0x003d08ff
 8007964:	431bde83 	.word	0x431bde83
 8007968:	10624dd3 	.word	0x10624dd3

0800796c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b08c      	sub	sp, #48	; 0x30
 8007970:	af02      	add	r7, sp, #8
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	4608      	mov	r0, r1
 8007976:	4611      	mov	r1, r2
 8007978:	461a      	mov	r2, r3
 800797a:	4603      	mov	r3, r0
 800797c:	817b      	strh	r3, [r7, #10]
 800797e:	460b      	mov	r3, r1
 8007980:	813b      	strh	r3, [r7, #8]
 8007982:	4613      	mov	r3, r2
 8007984:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007986:	f7ff f81f 	bl	80069c8 <HAL_GetTick>
 800798a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b20      	cmp	r3, #32
 8007996:	f040 8208 	bne.w	8007daa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	2319      	movs	r3, #25
 80079a0:	2201      	movs	r2, #1
 80079a2:	497b      	ldr	r1, [pc, #492]	; (8007b90 <HAL_I2C_Mem_Read+0x224>)
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fc1d 	bl	80081e4 <I2C_WaitOnFlagUntilTimeout>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80079b0:	2302      	movs	r3, #2
 80079b2:	e1fb      	b.n	8007dac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d101      	bne.n	80079c2 <HAL_I2C_Mem_Read+0x56>
 80079be:	2302      	movs	r3, #2
 80079c0:	e1f4      	b.n	8007dac <HAL_I2C_Mem_Read+0x440>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d007      	beq.n	80079e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0201 	orr.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2222      	movs	r2, #34	; 0x22
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2240      	movs	r2, #64	; 0x40
 8007a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4a5b      	ldr	r2, [pc, #364]	; (8007b94 <HAL_I2C_Mem_Read+0x228>)
 8007a28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a2a:	88f8      	ldrh	r0, [r7, #6]
 8007a2c:	893a      	ldrh	r2, [r7, #8]
 8007a2e:	8979      	ldrh	r1, [r7, #10]
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	9301      	str	r3, [sp, #4]
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	4603      	mov	r3, r0
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 faea 	bl	8008014 <I2C_RequestMemoryRead>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e1b0      	b.n	8007dac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d113      	bne.n	8007a7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a52:	2300      	movs	r3, #0
 8007a54:	623b      	str	r3, [r7, #32]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	623b      	str	r3, [r7, #32]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	623b      	str	r3, [r7, #32]
 8007a66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	e184      	b.n	8007d84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d11b      	bne.n	8007aba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a92:	2300      	movs	r3, #0
 8007a94:	61fb      	str	r3, [r7, #28]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	61fb      	str	r3, [r7, #28]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	61fb      	str	r3, [r7, #28]
 8007aa6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	e164      	b.n	8007d84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d11b      	bne.n	8007afa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ad0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ae0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	61bb      	str	r3, [r7, #24]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	61bb      	str	r3, [r7, #24]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	61bb      	str	r3, [r7, #24]
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	e144      	b.n	8007d84 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007afa:	2300      	movs	r3, #0
 8007afc:	617b      	str	r3, [r7, #20]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	617b      	str	r3, [r7, #20]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	617b      	str	r3, [r7, #20]
 8007b0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007b10:	e138      	b.n	8007d84 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	f200 80f1 	bhi.w	8007cfe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d123      	bne.n	8007b6c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 fc72 	bl	8008412 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e139      	b.n	8007dac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	691a      	ldr	r2, [r3, #16]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b42:	b2d2      	uxtb	r2, r2
 8007b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b54:	3b01      	subs	r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	3b01      	subs	r3, #1
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b6a:	e10b      	b.n	8007d84 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d14e      	bne.n	8007c12 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	4906      	ldr	r1, [pc, #24]	; (8007b98 <HAL_I2C_Mem_Read+0x22c>)
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f000 fb30 	bl	80081e4 <I2C_WaitOnFlagUntilTimeout>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d008      	beq.n	8007b9c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e10e      	b.n	8007dac <HAL_I2C_Mem_Read+0x440>
 8007b8e:	bf00      	nop
 8007b90:	00100002 	.word	0x00100002
 8007b94:	ffff0000 	.word	0xffff0000
 8007b98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007baa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691a      	ldr	r2, [r3, #16]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	691a      	ldr	r2, [r3, #16]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be8:	b2d2      	uxtb	r2, r2
 8007bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	1c5a      	adds	r2, r3, #1
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c10:	e0b8      	b.n	8007d84 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	2200      	movs	r2, #0
 8007c1a:	4966      	ldr	r1, [pc, #408]	; (8007db4 <HAL_I2C_Mem_Read+0x448>)
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 fae1 	bl	80081e4 <I2C_WaitOnFlagUntilTimeout>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e0bf      	b.n	8007dac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	691a      	ldr	r2, [r3, #16]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c74:	2200      	movs	r2, #0
 8007c76:	494f      	ldr	r1, [pc, #316]	; (8007db4 <HAL_I2C_Mem_Read+0x448>)
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 fab3 	bl	80081e4 <I2C_WaitOnFlagUntilTimeout>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e091      	b.n	8007dac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	691a      	ldr	r2, [r3, #16]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca2:	b2d2      	uxtb	r2, r2
 8007ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	691a      	ldr	r2, [r3, #16]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd4:	b2d2      	uxtb	r2, r2
 8007cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007cfc:	e042      	b.n	8007d84 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 fb85 	bl	8008412 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d001      	beq.n	8007d12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e04c      	b.n	8007dac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	691a      	ldr	r2, [r3, #16]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	b2d2      	uxtb	r2, r2
 8007d1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	1c5a      	adds	r2, r3, #1
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d118      	bne.n	8007d84 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	691a      	ldr	r2, [r3, #16]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	b2d2      	uxtb	r2, r2
 8007d5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	1c5a      	adds	r2, r3, #1
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f47f aec2 	bne.w	8007b12 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	e000      	b.n	8007dac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007daa:	2302      	movs	r3, #2
  }
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3728      	adds	r7, #40	; 0x28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	00010004 	.word	0x00010004

08007db8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08a      	sub	sp, #40	; 0x28
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	603b      	str	r3, [r7, #0]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007dc8:	f7fe fdfe 	bl	80069c8 <HAL_GetTick>
 8007dcc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b20      	cmp	r3, #32
 8007ddc:	f040 8111 	bne.w	8008002 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	2319      	movs	r3, #25
 8007de6:	2201      	movs	r2, #1
 8007de8:	4988      	ldr	r1, [pc, #544]	; (800800c <HAL_I2C_IsDeviceReady+0x254>)
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 f9fa 	bl	80081e4 <I2C_WaitOnFlagUntilTimeout>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007df6:	2302      	movs	r3, #2
 8007df8:	e104      	b.n	8008004 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d101      	bne.n	8007e08 <HAL_I2C_IsDeviceReady+0x50>
 8007e04:	2302      	movs	r3, #2
 8007e06:	e0fd      	b.n	8008004 <HAL_I2C_IsDeviceReady+0x24c>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d007      	beq.n	8007e2e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f042 0201 	orr.w	r2, r2, #1
 8007e2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2224      	movs	r2, #36	; 0x24
 8007e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4a70      	ldr	r2, [pc, #448]	; (8008010 <HAL_I2C_IsDeviceReady+0x258>)
 8007e50:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e60:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 f9b8 	bl	80081e4 <I2C_WaitOnFlagUntilTimeout>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00d      	beq.n	8007e96 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e88:	d103      	bne.n	8007e92 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e90:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e0b6      	b.n	8008004 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e96:	897b      	ldrh	r3, [r7, #10]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ea4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007ea6:	f7fe fd8f 	bl	80069c8 <HAL_GetTick>
 8007eaa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	bf0c      	ite	eq
 8007eba:	2301      	moveq	r3, #1
 8007ebc:	2300      	movne	r3, #0
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed0:	bf0c      	ite	eq
 8007ed2:	2301      	moveq	r3, #1
 8007ed4:	2300      	movne	r3, #0
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007eda:	e025      	b.n	8007f28 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007edc:	f7fe fd74 	bl	80069c8 <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d302      	bcc.n	8007ef2 <HAL_I2C_IsDeviceReady+0x13a>
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d103      	bne.n	8007efa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	22a0      	movs	r2, #160	; 0xa0
 8007ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	bf0c      	ite	eq
 8007f08:	2301      	moveq	r3, #1
 8007f0a:	2300      	movne	r3, #0
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f1e:	bf0c      	ite	eq
 8007f20:	2301      	moveq	r3, #1
 8007f22:	2300      	movne	r3, #0
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2ba0      	cmp	r3, #160	; 0xa0
 8007f32:	d005      	beq.n	8007f40 <HAL_I2C_IsDeviceReady+0x188>
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d102      	bne.n	8007f40 <HAL_I2C_IsDeviceReady+0x188>
 8007f3a:	7dbb      	ldrb	r3, [r7, #22]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0cd      	beq.n	8007edc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d129      	bne.n	8007faa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f64:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f66:	2300      	movs	r3, #0
 8007f68:	613b      	str	r3, [r7, #16]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	695b      	ldr	r3, [r3, #20]
 8007f70:	613b      	str	r3, [r7, #16]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	613b      	str	r3, [r7, #16]
 8007f7a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	2319      	movs	r3, #25
 8007f82:	2201      	movs	r2, #1
 8007f84:	4921      	ldr	r1, [pc, #132]	; (800800c <HAL_I2C_IsDeviceReady+0x254>)
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 f92c 	bl	80081e4 <I2C_WaitOnFlagUntilTimeout>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e036      	b.n	8008004 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2220      	movs	r2, #32
 8007f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	e02c      	b.n	8008004 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fb8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007fc2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	2319      	movs	r3, #25
 8007fca:	2201      	movs	r2, #1
 8007fcc:	490f      	ldr	r1, [pc, #60]	; (800800c <HAL_I2C_IsDeviceReady+0x254>)
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 f908 	bl	80081e4 <I2C_WaitOnFlagUntilTimeout>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e012      	b.n	8008004 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	f4ff af32 	bcc.w	8007e52 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e000      	b.n	8008004 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008002:	2302      	movs	r3, #2
  }
}
 8008004:	4618      	mov	r0, r3
 8008006:	3720      	adds	r7, #32
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	00100002 	.word	0x00100002
 8008010:	ffff0000 	.word	0xffff0000

08008014 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b088      	sub	sp, #32
 8008018:	af02      	add	r7, sp, #8
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	4608      	mov	r0, r1
 800801e:	4611      	mov	r1, r2
 8008020:	461a      	mov	r2, r3
 8008022:	4603      	mov	r3, r0
 8008024:	817b      	strh	r3, [r7, #10]
 8008026:	460b      	mov	r3, r1
 8008028:	813b      	strh	r3, [r7, #8]
 800802a:	4613      	mov	r3, r2
 800802c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800803c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800804c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	2200      	movs	r2, #0
 8008056:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 f8c2 	bl	80081e4 <I2C_WaitOnFlagUntilTimeout>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00d      	beq.n	8008082 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008074:	d103      	bne.n	800807e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800807c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e0aa      	b.n	80081d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008082:	897b      	ldrh	r3, [r7, #10]
 8008084:	b2db      	uxtb	r3, r3
 8008086:	461a      	mov	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008090:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	6a3a      	ldr	r2, [r7, #32]
 8008096:	4952      	ldr	r1, [pc, #328]	; (80081e0 <I2C_RequestMemoryRead+0x1cc>)
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f000 f8fa 	bl	8008292 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e097      	b.n	80081d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080a8:	2300      	movs	r3, #0
 80080aa:	617b      	str	r3, [r7, #20]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	617b      	str	r3, [r7, #20]
 80080bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c0:	6a39      	ldr	r1, [r7, #32]
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 f964 	bl	8008390 <I2C_WaitOnTXEFlagUntilTimeout>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00d      	beq.n	80080ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d2:	2b04      	cmp	r3, #4
 80080d4:	d107      	bne.n	80080e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e076      	b.n	80081d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080ea:	88fb      	ldrh	r3, [r7, #6]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d105      	bne.n	80080fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080f0:	893b      	ldrh	r3, [r7, #8]
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	611a      	str	r2, [r3, #16]
 80080fa:	e021      	b.n	8008140 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80080fc:	893b      	ldrh	r3, [r7, #8]
 80080fe:	0a1b      	lsrs	r3, r3, #8
 8008100:	b29b      	uxth	r3, r3
 8008102:	b2da      	uxtb	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800810a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800810c:	6a39      	ldr	r1, [r7, #32]
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 f93e 	bl	8008390 <I2C_WaitOnTXEFlagUntilTimeout>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00d      	beq.n	8008136 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811e:	2b04      	cmp	r3, #4
 8008120:	d107      	bne.n	8008132 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008130:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e050      	b.n	80081d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008136:	893b      	ldrh	r3, [r7, #8]
 8008138:	b2da      	uxtb	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008142:	6a39      	ldr	r1, [r7, #32]
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 f923 	bl	8008390 <I2C_WaitOnTXEFlagUntilTimeout>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00d      	beq.n	800816c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008154:	2b04      	cmp	r3, #4
 8008156:	d107      	bne.n	8008168 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008166:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e035      	b.n	80081d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800817a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	2200      	movs	r2, #0
 8008184:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f82b 	bl	80081e4 <I2C_WaitOnFlagUntilTimeout>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00d      	beq.n	80081b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800819e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081a2:	d103      	bne.n	80081ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e013      	b.n	80081d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80081b0:	897b      	ldrh	r3, [r7, #10]
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	f043 0301 	orr.w	r3, r3, #1
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	6a3a      	ldr	r2, [r7, #32]
 80081c4:	4906      	ldr	r1, [pc, #24]	; (80081e0 <I2C_RequestMemoryRead+0x1cc>)
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 f863 	bl	8008292 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d001      	beq.n	80081d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e000      	b.n	80081d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	00010002 	.word	0x00010002

080081e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	603b      	str	r3, [r7, #0]
 80081f0:	4613      	mov	r3, r2
 80081f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081f4:	e025      	b.n	8008242 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fc:	d021      	beq.n	8008242 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081fe:	f7fe fbe3 	bl	80069c8 <HAL_GetTick>
 8008202:	4602      	mov	r2, r0
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	429a      	cmp	r2, r3
 800820c:	d302      	bcc.n	8008214 <I2C_WaitOnFlagUntilTimeout+0x30>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d116      	bne.n	8008242 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2220      	movs	r2, #32
 800821e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822e:	f043 0220 	orr.w	r2, r3, #32
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e023      	b.n	800828a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	0c1b      	lsrs	r3, r3, #16
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b01      	cmp	r3, #1
 800824a:	d10d      	bne.n	8008268 <I2C_WaitOnFlagUntilTimeout+0x84>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	43da      	mvns	r2, r3
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	4013      	ands	r3, r2
 8008258:	b29b      	uxth	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	bf0c      	ite	eq
 800825e:	2301      	moveq	r3, #1
 8008260:	2300      	movne	r3, #0
 8008262:	b2db      	uxtb	r3, r3
 8008264:	461a      	mov	r2, r3
 8008266:	e00c      	b.n	8008282 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	43da      	mvns	r2, r3
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4013      	ands	r3, r2
 8008274:	b29b      	uxth	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	bf0c      	ite	eq
 800827a:	2301      	moveq	r3, #1
 800827c:	2300      	movne	r3, #0
 800827e:	b2db      	uxtb	r3, r3
 8008280:	461a      	mov	r2, r3
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	429a      	cmp	r2, r3
 8008286:	d0b6      	beq.n	80081f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b084      	sub	sp, #16
 8008296:	af00      	add	r7, sp, #0
 8008298:	60f8      	str	r0, [r7, #12]
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	607a      	str	r2, [r7, #4]
 800829e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80082a0:	e051      	b.n	8008346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082b0:	d123      	bne.n	80082fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2220      	movs	r2, #32
 80082d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	f043 0204 	orr.w	r2, r3, #4
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e046      	b.n	8008388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008300:	d021      	beq.n	8008346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008302:	f7fe fb61 	bl	80069c8 <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	429a      	cmp	r2, r3
 8008310:	d302      	bcc.n	8008318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d116      	bne.n	8008346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2220      	movs	r2, #32
 8008322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008332:	f043 0220 	orr.w	r2, r3, #32
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e020      	b.n	8008388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	0c1b      	lsrs	r3, r3, #16
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b01      	cmp	r3, #1
 800834e:	d10c      	bne.n	800836a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	43da      	mvns	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	4013      	ands	r3, r2
 800835c:	b29b      	uxth	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	bf14      	ite	ne
 8008362:	2301      	movne	r3, #1
 8008364:	2300      	moveq	r3, #0
 8008366:	b2db      	uxtb	r3, r3
 8008368:	e00b      	b.n	8008382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	43da      	mvns	r2, r3
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	4013      	ands	r3, r2
 8008376:	b29b      	uxth	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	bf14      	ite	ne
 800837c:	2301      	movne	r3, #1
 800837e:	2300      	moveq	r3, #0
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d18d      	bne.n	80082a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800839c:	e02d      	b.n	80083fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f000 f88d 	bl	80084be <I2C_IsAcknowledgeFailed>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e02d      	b.n	800840a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b4:	d021      	beq.n	80083fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083b6:	f7fe fb07 	bl	80069c8 <HAL_GetTick>
 80083ba:	4602      	mov	r2, r0
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d302      	bcc.n	80083cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d116      	bne.n	80083fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2220      	movs	r2, #32
 80083d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e6:	f043 0220 	orr.w	r2, r3, #32
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e007      	b.n	800840a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008404:	2b80      	cmp	r3, #128	; 0x80
 8008406:	d1ca      	bne.n	800839e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	60f8      	str	r0, [r7, #12]
 800841a:	60b9      	str	r1, [r7, #8]
 800841c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800841e:	e042      	b.n	80084a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	f003 0310 	and.w	r3, r3, #16
 800842a:	2b10      	cmp	r3, #16
 800842c:	d119      	bne.n	8008462 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f06f 0210 	mvn.w	r2, #16
 8008436:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2220      	movs	r2, #32
 8008442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e029      	b.n	80084b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008462:	f7fe fab1 	bl	80069c8 <HAL_GetTick>
 8008466:	4602      	mov	r2, r0
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	429a      	cmp	r2, r3
 8008470:	d302      	bcc.n	8008478 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d116      	bne.n	80084a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2220      	movs	r2, #32
 8008482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008492:	f043 0220 	orr.w	r2, r3, #32
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e007      	b.n	80084b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b0:	2b40      	cmp	r3, #64	; 0x40
 80084b2:	d1b5      	bne.n	8008420 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d4:	d11b      	bne.n	800850e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2220      	movs	r2, #32
 80084ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	f043 0204 	orr.w	r2, r3, #4
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e000      	b.n	8008510 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008522:	2300      	movs	r3, #0
 8008524:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008526:	2300      	movs	r3, #0
 8008528:	603b      	str	r3, [r7, #0]
 800852a:	4b20      	ldr	r3, [pc, #128]	; (80085ac <HAL_PWREx_EnableOverDrive+0x90>)
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	4a1f      	ldr	r2, [pc, #124]	; (80085ac <HAL_PWREx_EnableOverDrive+0x90>)
 8008530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008534:	6413      	str	r3, [r2, #64]	; 0x40
 8008536:	4b1d      	ldr	r3, [pc, #116]	; (80085ac <HAL_PWREx_EnableOverDrive+0x90>)
 8008538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800853e:	603b      	str	r3, [r7, #0]
 8008540:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008542:	4b1b      	ldr	r3, [pc, #108]	; (80085b0 <HAL_PWREx_EnableOverDrive+0x94>)
 8008544:	2201      	movs	r2, #1
 8008546:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008548:	f7fe fa3e 	bl	80069c8 <HAL_GetTick>
 800854c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800854e:	e009      	b.n	8008564 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008550:	f7fe fa3a 	bl	80069c8 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800855e:	d901      	bls.n	8008564 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e01f      	b.n	80085a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008564:	4b13      	ldr	r3, [pc, #76]	; (80085b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800856c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008570:	d1ee      	bne.n	8008550 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008572:	4b11      	ldr	r3, [pc, #68]	; (80085b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008574:	2201      	movs	r2, #1
 8008576:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008578:	f7fe fa26 	bl	80069c8 <HAL_GetTick>
 800857c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800857e:	e009      	b.n	8008594 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008580:	f7fe fa22 	bl	80069c8 <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800858e:	d901      	bls.n	8008594 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008590:	2303      	movs	r3, #3
 8008592:	e007      	b.n	80085a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008594:	4b07      	ldr	r3, [pc, #28]	; (80085b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800859c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085a0:	d1ee      	bne.n	8008580 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	40023800 	.word	0x40023800
 80085b0:	420e0040 	.word	0x420e0040
 80085b4:	40007000 	.word	0x40007000
 80085b8:	420e0044 	.word	0x420e0044

080085bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d101      	bne.n	80085d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e0cc      	b.n	800876a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085d0:	4b68      	ldr	r3, [pc, #416]	; (8008774 <HAL_RCC_ClockConfig+0x1b8>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 030f 	and.w	r3, r3, #15
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d90c      	bls.n	80085f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085de:	4b65      	ldr	r3, [pc, #404]	; (8008774 <HAL_RCC_ClockConfig+0x1b8>)
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	b2d2      	uxtb	r2, r2
 80085e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085e6:	4b63      	ldr	r3, [pc, #396]	; (8008774 <HAL_RCC_ClockConfig+0x1b8>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 030f 	and.w	r3, r3, #15
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d001      	beq.n	80085f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e0b8      	b.n	800876a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d020      	beq.n	8008646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b00      	cmp	r3, #0
 800860e:	d005      	beq.n	800861c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008610:	4b59      	ldr	r3, [pc, #356]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	4a58      	ldr	r2, [pc, #352]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 8008616:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800861a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b00      	cmp	r3, #0
 8008626:	d005      	beq.n	8008634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008628:	4b53      	ldr	r3, [pc, #332]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	4a52      	ldr	r2, [pc, #328]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800862e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008634:	4b50      	ldr	r3, [pc, #320]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	494d      	ldr	r1, [pc, #308]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 8008642:	4313      	orrs	r3, r2
 8008644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	2b00      	cmp	r3, #0
 8008650:	d044      	beq.n	80086dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d107      	bne.n	800866a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800865a:	4b47      	ldr	r3, [pc, #284]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d119      	bne.n	800869a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e07f      	b.n	800876a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	2b02      	cmp	r3, #2
 8008670:	d003      	beq.n	800867a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008676:	2b03      	cmp	r3, #3
 8008678:	d107      	bne.n	800868a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800867a:	4b3f      	ldr	r3, [pc, #252]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d109      	bne.n	800869a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e06f      	b.n	800876a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800868a:	4b3b      	ldr	r3, [pc, #236]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e067      	b.n	800876a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800869a:	4b37      	ldr	r3, [pc, #220]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f023 0203 	bic.w	r2, r3, #3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	4934      	ldr	r1, [pc, #208]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80086ac:	f7fe f98c 	bl	80069c8 <HAL_GetTick>
 80086b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086b2:	e00a      	b.n	80086ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086b4:	f7fe f988 	bl	80069c8 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	f241 3288 	movw	r2, #5000	; 0x1388
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d901      	bls.n	80086ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e04f      	b.n	800876a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086ca:	4b2b      	ldr	r3, [pc, #172]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f003 020c 	and.w	r2, r3, #12
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	429a      	cmp	r2, r3
 80086da:	d1eb      	bne.n	80086b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80086dc:	4b25      	ldr	r3, [pc, #148]	; (8008774 <HAL_RCC_ClockConfig+0x1b8>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 030f 	and.w	r3, r3, #15
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d20c      	bcs.n	8008704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ea:	4b22      	ldr	r3, [pc, #136]	; (8008774 <HAL_RCC_ClockConfig+0x1b8>)
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	b2d2      	uxtb	r2, r2
 80086f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086f2:	4b20      	ldr	r3, [pc, #128]	; (8008774 <HAL_RCC_ClockConfig+0x1b8>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 030f 	and.w	r3, r3, #15
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d001      	beq.n	8008704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e032      	b.n	800876a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d008      	beq.n	8008722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008710:	4b19      	ldr	r3, [pc, #100]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	4916      	ldr	r1, [pc, #88]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800871e:	4313      	orrs	r3, r2
 8008720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0308 	and.w	r3, r3, #8
 800872a:	2b00      	cmp	r3, #0
 800872c:	d009      	beq.n	8008742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800872e:	4b12      	ldr	r3, [pc, #72]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	00db      	lsls	r3, r3, #3
 800873c:	490e      	ldr	r1, [pc, #56]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800873e:	4313      	orrs	r3, r2
 8008740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008742:	f000 fb7f 	bl	8008e44 <HAL_RCC_GetSysClockFreq>
 8008746:	4602      	mov	r2, r0
 8008748:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <HAL_RCC_ClockConfig+0x1bc>)
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	091b      	lsrs	r3, r3, #4
 800874e:	f003 030f 	and.w	r3, r3, #15
 8008752:	490a      	ldr	r1, [pc, #40]	; (800877c <HAL_RCC_ClockConfig+0x1c0>)
 8008754:	5ccb      	ldrb	r3, [r1, r3]
 8008756:	fa22 f303 	lsr.w	r3, r2, r3
 800875a:	4a09      	ldr	r2, [pc, #36]	; (8008780 <HAL_RCC_ClockConfig+0x1c4>)
 800875c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800875e:	4b09      	ldr	r3, [pc, #36]	; (8008784 <HAL_RCC_ClockConfig+0x1c8>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4618      	mov	r0, r3
 8008764:	f7fe f8ec 	bl	8006940 <HAL_InitTick>

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	40023c00 	.word	0x40023c00
 8008778:	40023800 	.word	0x40023800
 800877c:	08011c18 	.word	0x08011c18
 8008780:	20000000 	.word	0x20000000
 8008784:	20000004 	.word	0x20000004

08008788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008788:	b480      	push	{r7}
 800878a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800878c:	4b03      	ldr	r3, [pc, #12]	; (800879c <HAL_RCC_GetHCLKFreq+0x14>)
 800878e:	681b      	ldr	r3, [r3, #0]
}
 8008790:	4618      	mov	r0, r3
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	20000000 	.word	0x20000000

080087a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80087a4:	f7ff fff0 	bl	8008788 <HAL_RCC_GetHCLKFreq>
 80087a8:	4602      	mov	r2, r0
 80087aa:	4b05      	ldr	r3, [pc, #20]	; (80087c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	0a9b      	lsrs	r3, r3, #10
 80087b0:	f003 0307 	and.w	r3, r3, #7
 80087b4:	4903      	ldr	r1, [pc, #12]	; (80087c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087b6:	5ccb      	ldrb	r3, [r1, r3]
 80087b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087bc:	4618      	mov	r0, r3
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	40023800 	.word	0x40023800
 80087c4:	08011c28 	.word	0x08011c28

080087c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80087cc:	f7ff ffdc 	bl	8008788 <HAL_RCC_GetHCLKFreq>
 80087d0:	4602      	mov	r2, r0
 80087d2:	4b05      	ldr	r3, [pc, #20]	; (80087e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	0b5b      	lsrs	r3, r3, #13
 80087d8:	f003 0307 	and.w	r3, r3, #7
 80087dc:	4903      	ldr	r1, [pc, #12]	; (80087ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80087de:	5ccb      	ldrb	r3, [r1, r3]
 80087e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	40023800 	.word	0x40023800
 80087ec:	08011c28 	.word	0x08011c28

080087f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08c      	sub	sp, #48	; 0x30
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80087f8:	2300      	movs	r3, #0
 80087fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8008814:	2300      	movs	r3, #0
 8008816:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8008818:	2300      	movs	r3, #0
 800881a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	d010      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008828:	4b6f      	ldr	r3, [pc, #444]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800882a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800882e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008836:	496c      	ldr	r1, [pc, #432]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008838:	4313      	orrs	r3, r2
 800883a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8008846:	2301      	movs	r3, #1
 8008848:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d010      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008856:	4b64      	ldr	r3, [pc, #400]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800885c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008864:	4960      	ldr	r1, [pc, #384]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008866:	4313      	orrs	r3, r2
 8008868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8008874:	2301      	movs	r3, #1
 8008876:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0304 	and.w	r3, r3, #4
 8008880:	2b00      	cmp	r3, #0
 8008882:	d017      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008884:	4b58      	ldr	r3, [pc, #352]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800888a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008892:	4955      	ldr	r1, [pc, #340]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008894:	4313      	orrs	r3, r2
 8008896:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088a2:	d101      	bne.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80088a4:	2301      	movs	r3, #1
 80088a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80088b0:	2301      	movs	r3, #1
 80088b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0308 	and.w	r3, r3, #8
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d017      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80088c0:	4b49      	ldr	r3, [pc, #292]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80088c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ce:	4946      	ldr	r1, [pc, #280]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80088d0:	4313      	orrs	r3, r2
 80088d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088de:	d101      	bne.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80088e0:	2301      	movs	r3, #1
 80088e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d101      	bne.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80088ec:	2301      	movs	r3, #1
 80088ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 808a 	beq.w	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80088fe:	2300      	movs	r3, #0
 8008900:	60bb      	str	r3, [r7, #8]
 8008902:	4b39      	ldr	r3, [pc, #228]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008906:	4a38      	ldr	r2, [pc, #224]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800890c:	6413      	str	r3, [r2, #64]	; 0x40
 800890e:	4b36      	ldr	r3, [pc, #216]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008916:	60bb      	str	r3, [r7, #8]
 8008918:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800891a:	4b34      	ldr	r3, [pc, #208]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a33      	ldr	r2, [pc, #204]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008924:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008926:	f7fe f84f 	bl	80069c8 <HAL_GetTick>
 800892a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800892c:	e008      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800892e:	f7fe f84b 	bl	80069c8 <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	2b02      	cmp	r3, #2
 800893a:	d901      	bls.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e278      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008940:	4b2a      	ldr	r3, [pc, #168]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008948:	2b00      	cmp	r3, #0
 800894a:	d0f0      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800894c:	4b26      	ldr	r3, [pc, #152]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800894e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008954:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d02f      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008964:	6a3a      	ldr	r2, [r7, #32]
 8008966:	429a      	cmp	r2, r3
 8008968:	d028      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800896a:	4b1f      	ldr	r3, [pc, #124]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800896c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008972:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008974:	4b1e      	ldr	r3, [pc, #120]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008976:	2201      	movs	r2, #1
 8008978:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800897a:	4b1d      	ldr	r3, [pc, #116]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800897c:	2200      	movs	r2, #0
 800897e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008980:	4a19      	ldr	r2, [pc, #100]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008986:	4b18      	ldr	r3, [pc, #96]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b01      	cmp	r3, #1
 8008990:	d114      	bne.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008992:	f7fe f819 	bl	80069c8 <HAL_GetTick>
 8008996:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008998:	e00a      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800899a:	f7fe f815 	bl	80069c8 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d901      	bls.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e240      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089b0:	4b0d      	ldr	r3, [pc, #52]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80089b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b4:	f003 0302 	and.w	r3, r3, #2
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d0ee      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089c8:	d114      	bne.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80089ca:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80089da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089de:	4902      	ldr	r1, [pc, #8]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80089e0:	4313      	orrs	r3, r2
 80089e2:	608b      	str	r3, [r1, #8]
 80089e4:	e00c      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80089e6:	bf00      	nop
 80089e8:	40023800 	.word	0x40023800
 80089ec:	40007000 	.word	0x40007000
 80089f0:	42470e40 	.word	0x42470e40
 80089f4:	4b4a      	ldr	r3, [pc, #296]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	4a49      	ldr	r2, [pc, #292]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80089fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80089fe:	6093      	str	r3, [r2, #8]
 8008a00:	4b47      	ldr	r3, [pc, #284]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008a02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a0c:	4944      	ldr	r1, [pc, #272]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 0310 	and.w	r3, r3, #16
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d004      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8008a24:	4b3f      	ldr	r3, [pc, #252]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8008a26:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00a      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8008a34:	4b3a      	ldr	r3, [pc, #232]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a42:	4937      	ldr	r1, [pc, #220]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00a      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a56:	4b32      	ldr	r3, [pc, #200]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a5c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a64:	492e      	ldr	r1, [pc, #184]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d011      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008a78:	4b29      	ldr	r3, [pc, #164]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a7e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a86:	4926      	ldr	r1, [pc, #152]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a96:	d101      	bne.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00a      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008aa8:	4b1d      	ldr	r3, [pc, #116]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008aae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab6:	491a      	ldr	r1, [pc, #104]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d011      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8008aca:	4b15      	ldr	r3, [pc, #84]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ad0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad8:	4911      	ldr	r1, [pc, #68]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008ada:	4313      	orrs	r3, r2
 8008adc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ae8:	d101      	bne.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8008aea:	2301      	movs	r3, #1
 8008aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d005      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008afc:	f040 80ff 	bne.w	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008b00:	4b09      	ldr	r3, [pc, #36]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008b06:	f7fd ff5f 	bl	80069c8 <HAL_GetTick>
 8008b0a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008b0c:	e00e      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008b0e:	f7fd ff5b 	bl	80069c8 <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d907      	bls.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e188      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8008b20:	40023800 	.word	0x40023800
 8008b24:	424711e0 	.word	0x424711e0
 8008b28:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008b2c:	4b7e      	ldr	r3, [pc, #504]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1ea      	bne.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d003      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d009      	beq.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d028      	beq.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d124      	bne.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008b60:	4b71      	ldr	r3, [pc, #452]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b66:	0c1b      	lsrs	r3, r3, #16
 8008b68:	f003 0303 	and.w	r3, r3, #3
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	005b      	lsls	r3, r3, #1
 8008b70:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008b72:	4b6d      	ldr	r3, [pc, #436]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b78:	0e1b      	lsrs	r3, r3, #24
 8008b7a:	f003 030f 	and.w	r3, r3, #15
 8008b7e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685a      	ldr	r2, [r3, #4]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	019b      	lsls	r3, r3, #6
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	085b      	lsrs	r3, r3, #1
 8008b90:	3b01      	subs	r3, #1
 8008b92:	041b      	lsls	r3, r3, #16
 8008b94:	431a      	orrs	r2, r3
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	061b      	lsls	r3, r3, #24
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	695b      	ldr	r3, [r3, #20]
 8008ba0:	071b      	lsls	r3, r3, #28
 8008ba2:	4961      	ldr	r1, [pc, #388]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0304 	and.w	r3, r3, #4
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d004      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bbe:	d00a      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d035      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bd4:	d130      	bne.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008bd6:	4b54      	ldr	r3, [pc, #336]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bdc:	0c1b      	lsrs	r3, r3, #16
 8008bde:	f003 0303 	and.w	r3, r3, #3
 8008be2:	3301      	adds	r3, #1
 8008be4:	005b      	lsls	r3, r3, #1
 8008be6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008be8:	4b4f      	ldr	r3, [pc, #316]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bee:	0f1b      	lsrs	r3, r3, #28
 8008bf0:	f003 0307 	and.w	r3, r3, #7
 8008bf4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	019b      	lsls	r3, r3, #6
 8008c00:	431a      	orrs	r2, r3
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	085b      	lsrs	r3, r3, #1
 8008c06:	3b01      	subs	r3, #1
 8008c08:	041b      	lsls	r3, r3, #16
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	061b      	lsls	r3, r3, #24
 8008c12:	431a      	orrs	r2, r3
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	071b      	lsls	r3, r3, #28
 8008c18:	4943      	ldr	r1, [pc, #268]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008c20:	4b41      	ldr	r3, [pc, #260]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c26:	f023 021f 	bic.w	r2, r3, #31
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	493d      	ldr	r1, [pc, #244]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d029      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c4c:	d124      	bne.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008c4e:	4b36      	ldr	r3, [pc, #216]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c54:	0c1b      	lsrs	r3, r3, #16
 8008c56:	f003 0303 	and.w	r3, r3, #3
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	005b      	lsls	r3, r3, #1
 8008c5e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008c60:	4b31      	ldr	r3, [pc, #196]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c66:	0f1b      	lsrs	r3, r3, #28
 8008c68:	f003 0307 	and.w	r3, r3, #7
 8008c6c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	019b      	lsls	r3, r3, #6
 8008c78:	431a      	orrs	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	085b      	lsrs	r3, r3, #1
 8008c80:	3b01      	subs	r3, #1
 8008c82:	041b      	lsls	r3, r3, #16
 8008c84:	431a      	orrs	r2, r3
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	061b      	lsls	r3, r3, #24
 8008c8a:	431a      	orrs	r2, r3
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	071b      	lsls	r3, r3, #28
 8008c90:	4925      	ldr	r1, [pc, #148]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d016      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	019b      	lsls	r3, r3, #6
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	085b      	lsrs	r3, r3, #1
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	041b      	lsls	r3, r3, #16
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	061b      	lsls	r3, r3, #24
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	071b      	lsls	r3, r3, #28
 8008cca:	4917      	ldr	r1, [pc, #92]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008cd2:	4b16      	ldr	r3, [pc, #88]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008cd8:	f7fd fe76 	bl	80069c8 <HAL_GetTick>
 8008cdc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008cde:	e008      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008ce0:	f7fd fe72 	bl	80069c8 <HAL_GetTick>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d901      	bls.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e09f      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008cf2:	4b0d      	ldr	r3, [pc, #52]	; (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d0f0      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8008cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	f040 8095 	bne.w	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008d06:	4b0a      	ldr	r3, [pc, #40]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008d0c:	f7fd fe5c 	bl	80069c8 <HAL_GetTick>
 8008d10:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008d12:	e00f      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008d14:	f7fd fe58 	bl	80069c8 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d908      	bls.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e085      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8008d26:	bf00      	nop
 8008d28:	40023800 	.word	0x40023800
 8008d2c:	42470068 	.word	0x42470068
 8008d30:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008d34:	4b41      	ldr	r3, [pc, #260]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d40:	d0e8      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0304 	and.w	r3, r3, #4
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d009      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d02b      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d127      	bne.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008d6a:	4b34      	ldr	r3, [pc, #208]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d70:	0c1b      	lsrs	r3, r3, #16
 8008d72:	f003 0303 	and.w	r3, r3, #3
 8008d76:	3301      	adds	r3, #1
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	699a      	ldr	r2, [r3, #24]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	019b      	lsls	r3, r3, #6
 8008d86:	431a      	orrs	r2, r3
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	085b      	lsrs	r3, r3, #1
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	041b      	lsls	r3, r3, #16
 8008d90:	431a      	orrs	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d96:	061b      	lsls	r3, r3, #24
 8008d98:	4928      	ldr	r1, [pc, #160]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008da0:	4b26      	ldr	r3, [pc, #152]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008da6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dae:	3b01      	subs	r3, #1
 8008db0:	021b      	lsls	r3, r3, #8
 8008db2:	4922      	ldr	r1, [pc, #136]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d01d      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dce:	d118      	bne.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008dd0:	4b1a      	ldr	r3, [pc, #104]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd6:	0e1b      	lsrs	r3, r3, #24
 8008dd8:	f003 030f 	and.w	r3, r3, #15
 8008ddc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	699a      	ldr	r2, [r3, #24]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	69db      	ldr	r3, [r3, #28]
 8008de6:	019b      	lsls	r3, r3, #6
 8008de8:	431a      	orrs	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	085b      	lsrs	r3, r3, #1
 8008df0:	3b01      	subs	r3, #1
 8008df2:	041b      	lsls	r3, r3, #16
 8008df4:	431a      	orrs	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	061b      	lsls	r3, r3, #24
 8008dfa:	4910      	ldr	r1, [pc, #64]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008e02:	4b0f      	ldr	r3, [pc, #60]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8008e04:	2201      	movs	r2, #1
 8008e06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e08:	f7fd fdde 	bl	80069c8 <HAL_GetTick>
 8008e0c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008e0e:	e008      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008e10:	f7fd fdda 	bl	80069c8 <HAL_GetTick>
 8008e14:	4602      	mov	r2, r0
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e007      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008e22:	4b06      	ldr	r3, [pc, #24]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e2e:	d1ef      	bne.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3730      	adds	r7, #48	; 0x30
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	40023800 	.word	0x40023800
 8008e40:	42470070 	.word	0x42470070

08008e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e48:	b0ae      	sub	sp, #184	; 0xb8
 8008e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e6a:	4bcb      	ldr	r3, [pc, #812]	; (8009198 <HAL_RCC_GetSysClockFreq+0x354>)
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f003 030c 	and.w	r3, r3, #12
 8008e72:	2b0c      	cmp	r3, #12
 8008e74:	f200 8204 	bhi.w	8009280 <HAL_RCC_GetSysClockFreq+0x43c>
 8008e78:	a201      	add	r2, pc, #4	; (adr r2, 8008e80 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7e:	bf00      	nop
 8008e80:	08008eb5 	.word	0x08008eb5
 8008e84:	08009281 	.word	0x08009281
 8008e88:	08009281 	.word	0x08009281
 8008e8c:	08009281 	.word	0x08009281
 8008e90:	08008ebd 	.word	0x08008ebd
 8008e94:	08009281 	.word	0x08009281
 8008e98:	08009281 	.word	0x08009281
 8008e9c:	08009281 	.word	0x08009281
 8008ea0:	08008ec5 	.word	0x08008ec5
 8008ea4:	08009281 	.word	0x08009281
 8008ea8:	08009281 	.word	0x08009281
 8008eac:	08009281 	.word	0x08009281
 8008eb0:	080090b5 	.word	0x080090b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008eb4:	4bb9      	ldr	r3, [pc, #740]	; (800919c <HAL_RCC_GetSysClockFreq+0x358>)
 8008eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008eba:	e1e5      	b.n	8009288 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ebc:	4bb7      	ldr	r3, [pc, #732]	; (800919c <HAL_RCC_GetSysClockFreq+0x358>)
 8008ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008ec2:	e1e1      	b.n	8009288 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ec4:	4bb4      	ldr	r3, [pc, #720]	; (8009198 <HAL_RCC_GetSysClockFreq+0x354>)
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ed0:	4bb1      	ldr	r3, [pc, #708]	; (8009198 <HAL_RCC_GetSysClockFreq+0x354>)
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d071      	beq.n	8008fc0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008edc:	4bae      	ldr	r3, [pc, #696]	; (8009198 <HAL_RCC_GetSysClockFreq+0x354>)
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	099b      	lsrs	r3, r3, #6
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ee8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008efe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f02:	4622      	mov	r2, r4
 8008f04:	462b      	mov	r3, r5
 8008f06:	f04f 0000 	mov.w	r0, #0
 8008f0a:	f04f 0100 	mov.w	r1, #0
 8008f0e:	0159      	lsls	r1, r3, #5
 8008f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f14:	0150      	lsls	r0, r2, #5
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	1a51      	subs	r1, r2, r1
 8008f1e:	6439      	str	r1, [r7, #64]	; 0x40
 8008f20:	4629      	mov	r1, r5
 8008f22:	eb63 0301 	sbc.w	r3, r3, r1
 8008f26:	647b      	str	r3, [r7, #68]	; 0x44
 8008f28:	f04f 0200 	mov.w	r2, #0
 8008f2c:	f04f 0300 	mov.w	r3, #0
 8008f30:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008f34:	4649      	mov	r1, r9
 8008f36:	018b      	lsls	r3, r1, #6
 8008f38:	4641      	mov	r1, r8
 8008f3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008f3e:	4641      	mov	r1, r8
 8008f40:	018a      	lsls	r2, r1, #6
 8008f42:	4641      	mov	r1, r8
 8008f44:	1a51      	subs	r1, r2, r1
 8008f46:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f48:	4649      	mov	r1, r9
 8008f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8008f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f50:	f04f 0200 	mov.w	r2, #0
 8008f54:	f04f 0300 	mov.w	r3, #0
 8008f58:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8008f5c:	4649      	mov	r1, r9
 8008f5e:	00cb      	lsls	r3, r1, #3
 8008f60:	4641      	mov	r1, r8
 8008f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f66:	4641      	mov	r1, r8
 8008f68:	00ca      	lsls	r2, r1, #3
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4603      	mov	r3, r0
 8008f70:	4622      	mov	r2, r4
 8008f72:	189b      	adds	r3, r3, r2
 8008f74:	633b      	str	r3, [r7, #48]	; 0x30
 8008f76:	462b      	mov	r3, r5
 8008f78:	460a      	mov	r2, r1
 8008f7a:	eb42 0303 	adc.w	r3, r2, r3
 8008f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f80:	f04f 0200 	mov.w	r2, #0
 8008f84:	f04f 0300 	mov.w	r3, #0
 8008f88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	028b      	lsls	r3, r1, #10
 8008f90:	4621      	mov	r1, r4
 8008f92:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008f96:	4621      	mov	r1, r4
 8008f98:	028a      	lsls	r2, r1, #10
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008fa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008fac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008fb0:	f7f7 fe1a 	bl	8000be8 <__aeabi_uldivmod>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4613      	mov	r3, r2
 8008fba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008fbe:	e067      	b.n	8009090 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008fc0:	4b75      	ldr	r3, [pc, #468]	; (8009198 <HAL_RCC_GetSysClockFreq+0x354>)
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	099b      	lsrs	r3, r3, #6
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fcc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008fd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fda:	2300      	movs	r3, #0
 8008fdc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008fde:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008fe2:	4622      	mov	r2, r4
 8008fe4:	462b      	mov	r3, r5
 8008fe6:	f04f 0000 	mov.w	r0, #0
 8008fea:	f04f 0100 	mov.w	r1, #0
 8008fee:	0159      	lsls	r1, r3, #5
 8008ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ff4:	0150      	lsls	r0, r2, #5
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	1a51      	subs	r1, r2, r1
 8008ffe:	62b9      	str	r1, [r7, #40]	; 0x28
 8009000:	4629      	mov	r1, r5
 8009002:	eb63 0301 	sbc.w	r3, r3, r1
 8009006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009008:	f04f 0200 	mov.w	r2, #0
 800900c:	f04f 0300 	mov.w	r3, #0
 8009010:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8009014:	4649      	mov	r1, r9
 8009016:	018b      	lsls	r3, r1, #6
 8009018:	4641      	mov	r1, r8
 800901a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800901e:	4641      	mov	r1, r8
 8009020:	018a      	lsls	r2, r1, #6
 8009022:	4641      	mov	r1, r8
 8009024:	ebb2 0a01 	subs.w	sl, r2, r1
 8009028:	4649      	mov	r1, r9
 800902a:	eb63 0b01 	sbc.w	fp, r3, r1
 800902e:	f04f 0200 	mov.w	r2, #0
 8009032:	f04f 0300 	mov.w	r3, #0
 8009036:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800903a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800903e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009042:	4692      	mov	sl, r2
 8009044:	469b      	mov	fp, r3
 8009046:	4623      	mov	r3, r4
 8009048:	eb1a 0303 	adds.w	r3, sl, r3
 800904c:	623b      	str	r3, [r7, #32]
 800904e:	462b      	mov	r3, r5
 8009050:	eb4b 0303 	adc.w	r3, fp, r3
 8009054:	627b      	str	r3, [r7, #36]	; 0x24
 8009056:	f04f 0200 	mov.w	r2, #0
 800905a:	f04f 0300 	mov.w	r3, #0
 800905e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009062:	4629      	mov	r1, r5
 8009064:	028b      	lsls	r3, r1, #10
 8009066:	4621      	mov	r1, r4
 8009068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800906c:	4621      	mov	r1, r4
 800906e:	028a      	lsls	r2, r1, #10
 8009070:	4610      	mov	r0, r2
 8009072:	4619      	mov	r1, r3
 8009074:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009078:	2200      	movs	r2, #0
 800907a:	673b      	str	r3, [r7, #112]	; 0x70
 800907c:	677a      	str	r2, [r7, #116]	; 0x74
 800907e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009082:	f7f7 fdb1 	bl	8000be8 <__aeabi_uldivmod>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	4613      	mov	r3, r2
 800908c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009090:	4b41      	ldr	r3, [pc, #260]	; (8009198 <HAL_RCC_GetSysClockFreq+0x354>)
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	0c1b      	lsrs	r3, r3, #16
 8009096:	f003 0303 	and.w	r3, r3, #3
 800909a:	3301      	adds	r3, #1
 800909c:	005b      	lsls	r3, r3, #1
 800909e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80090a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80090a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80090b2:	e0e9      	b.n	8009288 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80090b4:	4b38      	ldr	r3, [pc, #224]	; (8009198 <HAL_RCC_GetSysClockFreq+0x354>)
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80090c0:	4b35      	ldr	r3, [pc, #212]	; (8009198 <HAL_RCC_GetSysClockFreq+0x354>)
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d069      	beq.n	80091a0 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090cc:	4b32      	ldr	r3, [pc, #200]	; (8009198 <HAL_RCC_GetSysClockFreq+0x354>)
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	099b      	lsrs	r3, r3, #6
 80090d2:	2200      	movs	r2, #0
 80090d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80090d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80090d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090de:	663b      	str	r3, [r7, #96]	; 0x60
 80090e0:	2300      	movs	r3, #0
 80090e2:	667b      	str	r3, [r7, #100]	; 0x64
 80090e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80090e8:	4622      	mov	r2, r4
 80090ea:	462b      	mov	r3, r5
 80090ec:	f04f 0000 	mov.w	r0, #0
 80090f0:	f04f 0100 	mov.w	r1, #0
 80090f4:	0159      	lsls	r1, r3, #5
 80090f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090fa:	0150      	lsls	r0, r2, #5
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4621      	mov	r1, r4
 8009102:	1a51      	subs	r1, r2, r1
 8009104:	61b9      	str	r1, [r7, #24]
 8009106:	4629      	mov	r1, r5
 8009108:	eb63 0301 	sbc.w	r3, r3, r1
 800910c:	61fb      	str	r3, [r7, #28]
 800910e:	f04f 0200 	mov.w	r2, #0
 8009112:	f04f 0300 	mov.w	r3, #0
 8009116:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800911a:	4659      	mov	r1, fp
 800911c:	018b      	lsls	r3, r1, #6
 800911e:	4651      	mov	r1, sl
 8009120:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009124:	4651      	mov	r1, sl
 8009126:	018a      	lsls	r2, r1, #6
 8009128:	4651      	mov	r1, sl
 800912a:	ebb2 0801 	subs.w	r8, r2, r1
 800912e:	4659      	mov	r1, fp
 8009130:	eb63 0901 	sbc.w	r9, r3, r1
 8009134:	f04f 0200 	mov.w	r2, #0
 8009138:	f04f 0300 	mov.w	r3, #0
 800913c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009140:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009144:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009148:	4690      	mov	r8, r2
 800914a:	4699      	mov	r9, r3
 800914c:	4623      	mov	r3, r4
 800914e:	eb18 0303 	adds.w	r3, r8, r3
 8009152:	613b      	str	r3, [r7, #16]
 8009154:	462b      	mov	r3, r5
 8009156:	eb49 0303 	adc.w	r3, r9, r3
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	f04f 0200 	mov.w	r2, #0
 8009160:	f04f 0300 	mov.w	r3, #0
 8009164:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009168:	4629      	mov	r1, r5
 800916a:	028b      	lsls	r3, r1, #10
 800916c:	4621      	mov	r1, r4
 800916e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009172:	4621      	mov	r1, r4
 8009174:	028a      	lsls	r2, r1, #10
 8009176:	4610      	mov	r0, r2
 8009178:	4619      	mov	r1, r3
 800917a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800917e:	2200      	movs	r2, #0
 8009180:	65bb      	str	r3, [r7, #88]	; 0x58
 8009182:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009184:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009188:	f7f7 fd2e 	bl	8000be8 <__aeabi_uldivmod>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	4613      	mov	r3, r2
 8009192:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009196:	e063      	b.n	8009260 <HAL_RCC_GetSysClockFreq+0x41c>
 8009198:	40023800 	.word	0x40023800
 800919c:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091a0:	4b3d      	ldr	r3, [pc, #244]	; (8009298 <HAL_RCC_GetSysClockFreq+0x454>)
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	099b      	lsrs	r3, r3, #6
 80091a6:	2200      	movs	r2, #0
 80091a8:	4618      	mov	r0, r3
 80091aa:	4611      	mov	r1, r2
 80091ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80091b0:	653b      	str	r3, [r7, #80]	; 0x50
 80091b2:	2300      	movs	r3, #0
 80091b4:	657b      	str	r3, [r7, #84]	; 0x54
 80091b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80091ba:	4642      	mov	r2, r8
 80091bc:	464b      	mov	r3, r9
 80091be:	f04f 0000 	mov.w	r0, #0
 80091c2:	f04f 0100 	mov.w	r1, #0
 80091c6:	0159      	lsls	r1, r3, #5
 80091c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80091cc:	0150      	lsls	r0, r2, #5
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	4641      	mov	r1, r8
 80091d4:	1a51      	subs	r1, r2, r1
 80091d6:	60b9      	str	r1, [r7, #8]
 80091d8:	4649      	mov	r1, r9
 80091da:	eb63 0301 	sbc.w	r3, r3, r1
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	f04f 0200 	mov.w	r2, #0
 80091e4:	f04f 0300 	mov.w	r3, #0
 80091e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80091ec:	4659      	mov	r1, fp
 80091ee:	018b      	lsls	r3, r1, #6
 80091f0:	4651      	mov	r1, sl
 80091f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80091f6:	4651      	mov	r1, sl
 80091f8:	018a      	lsls	r2, r1, #6
 80091fa:	4651      	mov	r1, sl
 80091fc:	1a54      	subs	r4, r2, r1
 80091fe:	4659      	mov	r1, fp
 8009200:	eb63 0501 	sbc.w	r5, r3, r1
 8009204:	f04f 0200 	mov.w	r2, #0
 8009208:	f04f 0300 	mov.w	r3, #0
 800920c:	00eb      	lsls	r3, r5, #3
 800920e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009212:	00e2      	lsls	r2, r4, #3
 8009214:	4614      	mov	r4, r2
 8009216:	461d      	mov	r5, r3
 8009218:	4643      	mov	r3, r8
 800921a:	18e3      	adds	r3, r4, r3
 800921c:	603b      	str	r3, [r7, #0]
 800921e:	464b      	mov	r3, r9
 8009220:	eb45 0303 	adc.w	r3, r5, r3
 8009224:	607b      	str	r3, [r7, #4]
 8009226:	f04f 0200 	mov.w	r2, #0
 800922a:	f04f 0300 	mov.w	r3, #0
 800922e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009232:	4629      	mov	r1, r5
 8009234:	028b      	lsls	r3, r1, #10
 8009236:	4621      	mov	r1, r4
 8009238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800923c:	4621      	mov	r1, r4
 800923e:	028a      	lsls	r2, r1, #10
 8009240:	4610      	mov	r0, r2
 8009242:	4619      	mov	r1, r3
 8009244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009248:	2200      	movs	r2, #0
 800924a:	64bb      	str	r3, [r7, #72]	; 0x48
 800924c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800924e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009252:	f7f7 fcc9 	bl	8000be8 <__aeabi_uldivmod>
 8009256:	4602      	mov	r2, r0
 8009258:	460b      	mov	r3, r1
 800925a:	4613      	mov	r3, r2
 800925c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009260:	4b0d      	ldr	r3, [pc, #52]	; (8009298 <HAL_RCC_GetSysClockFreq+0x454>)
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	0f1b      	lsrs	r3, r3, #28
 8009266:	f003 0307 	and.w	r3, r3, #7
 800926a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800926e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009272:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009276:	fbb2 f3f3 	udiv	r3, r2, r3
 800927a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800927e:	e003      	b.n	8009288 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009280:	4b06      	ldr	r3, [pc, #24]	; (800929c <HAL_RCC_GetSysClockFreq+0x458>)
 8009282:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009286:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009288:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800928c:	4618      	mov	r0, r3
 800928e:	37b8      	adds	r7, #184	; 0xb8
 8009290:	46bd      	mov	sp, r7
 8009292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009296:	bf00      	nop
 8009298:	40023800 	.word	0x40023800
 800929c:	00f42400 	.word	0x00f42400

080092a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e28d      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 0301 	and.w	r3, r3, #1
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 8083 	beq.w	80093c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80092c0:	4b94      	ldr	r3, [pc, #592]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f003 030c 	and.w	r3, r3, #12
 80092c8:	2b04      	cmp	r3, #4
 80092ca:	d019      	beq.n	8009300 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80092cc:	4b91      	ldr	r3, [pc, #580]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	d106      	bne.n	80092e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80092d8:	4b8e      	ldr	r3, [pc, #568]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092e4:	d00c      	beq.n	8009300 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092e6:	4b8b      	ldr	r3, [pc, #556]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80092ee:	2b0c      	cmp	r3, #12
 80092f0:	d112      	bne.n	8009318 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092f2:	4b88      	ldr	r3, [pc, #544]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092fe:	d10b      	bne.n	8009318 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009300:	4b84      	ldr	r3, [pc, #528]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d05b      	beq.n	80093c4 <HAL_RCC_OscConfig+0x124>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d157      	bne.n	80093c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e25a      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009320:	d106      	bne.n	8009330 <HAL_RCC_OscConfig+0x90>
 8009322:	4b7c      	ldr	r3, [pc, #496]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a7b      	ldr	r2, [pc, #492]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800932c:	6013      	str	r3, [r2, #0]
 800932e:	e01d      	b.n	800936c <HAL_RCC_OscConfig+0xcc>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009338:	d10c      	bne.n	8009354 <HAL_RCC_OscConfig+0xb4>
 800933a:	4b76      	ldr	r3, [pc, #472]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a75      	ldr	r2, [pc, #468]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009344:	6013      	str	r3, [r2, #0]
 8009346:	4b73      	ldr	r3, [pc, #460]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a72      	ldr	r2, [pc, #456]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 800934c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009350:	6013      	str	r3, [r2, #0]
 8009352:	e00b      	b.n	800936c <HAL_RCC_OscConfig+0xcc>
 8009354:	4b6f      	ldr	r3, [pc, #444]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a6e      	ldr	r2, [pc, #440]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 800935a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	4b6c      	ldr	r3, [pc, #432]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a6b      	ldr	r2, [pc, #428]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800936a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d013      	beq.n	800939c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009374:	f7fd fb28 	bl	80069c8 <HAL_GetTick>
 8009378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800937a:	e008      	b.n	800938e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800937c:	f7fd fb24 	bl	80069c8 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b64      	cmp	r3, #100	; 0x64
 8009388:	d901      	bls.n	800938e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e21f      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800938e:	4b61      	ldr	r3, [pc, #388]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0f0      	beq.n	800937c <HAL_RCC_OscConfig+0xdc>
 800939a:	e014      	b.n	80093c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800939c:	f7fd fb14 	bl	80069c8 <HAL_GetTick>
 80093a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093a2:	e008      	b.n	80093b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80093a4:	f7fd fb10 	bl	80069c8 <HAL_GetTick>
 80093a8:	4602      	mov	r2, r0
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	2b64      	cmp	r3, #100	; 0x64
 80093b0:	d901      	bls.n	80093b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	e20b      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093b6:	4b57      	ldr	r3, [pc, #348]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1f0      	bne.n	80093a4 <HAL_RCC_OscConfig+0x104>
 80093c2:	e000      	b.n	80093c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0302 	and.w	r3, r3, #2
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d06f      	beq.n	80094b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80093d2:	4b50      	ldr	r3, [pc, #320]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f003 030c 	and.w	r3, r3, #12
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d017      	beq.n	800940e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80093de:	4b4d      	ldr	r3, [pc, #308]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80093e6:	2b08      	cmp	r3, #8
 80093e8:	d105      	bne.n	80093f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80093ea:	4b4a      	ldr	r3, [pc, #296]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00b      	beq.n	800940e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80093f6:	4b47      	ldr	r3, [pc, #284]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80093fe:	2b0c      	cmp	r3, #12
 8009400:	d11c      	bne.n	800943c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009402:	4b44      	ldr	r3, [pc, #272]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d116      	bne.n	800943c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800940e:	4b41      	ldr	r3, [pc, #260]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0302 	and.w	r3, r3, #2
 8009416:	2b00      	cmp	r3, #0
 8009418:	d005      	beq.n	8009426 <HAL_RCC_OscConfig+0x186>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d001      	beq.n	8009426 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e1d3      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009426:	4b3b      	ldr	r3, [pc, #236]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	00db      	lsls	r3, r3, #3
 8009434:	4937      	ldr	r1, [pc, #220]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009436:	4313      	orrs	r3, r2
 8009438:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800943a:	e03a      	b.n	80094b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d020      	beq.n	8009486 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009444:	4b34      	ldr	r3, [pc, #208]	; (8009518 <HAL_RCC_OscConfig+0x278>)
 8009446:	2201      	movs	r2, #1
 8009448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800944a:	f7fd fabd 	bl	80069c8 <HAL_GetTick>
 800944e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009450:	e008      	b.n	8009464 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009452:	f7fd fab9 	bl	80069c8 <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	2b02      	cmp	r3, #2
 800945e:	d901      	bls.n	8009464 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e1b4      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009464:	4b2b      	ldr	r3, [pc, #172]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0302 	and.w	r3, r3, #2
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0f0      	beq.n	8009452 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009470:	4b28      	ldr	r3, [pc, #160]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	00db      	lsls	r3, r3, #3
 800947e:	4925      	ldr	r1, [pc, #148]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 8009480:	4313      	orrs	r3, r2
 8009482:	600b      	str	r3, [r1, #0]
 8009484:	e015      	b.n	80094b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009486:	4b24      	ldr	r3, [pc, #144]	; (8009518 <HAL_RCC_OscConfig+0x278>)
 8009488:	2200      	movs	r2, #0
 800948a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800948c:	f7fd fa9c 	bl	80069c8 <HAL_GetTick>
 8009490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009492:	e008      	b.n	80094a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009494:	f7fd fa98 	bl	80069c8 <HAL_GetTick>
 8009498:	4602      	mov	r2, r0
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d901      	bls.n	80094a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e193      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094a6:	4b1b      	ldr	r3, [pc, #108]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 0302 	and.w	r3, r3, #2
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1f0      	bne.n	8009494 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 0308 	and.w	r3, r3, #8
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d036      	beq.n	800952c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	695b      	ldr	r3, [r3, #20]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d016      	beq.n	80094f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80094c6:	4b15      	ldr	r3, [pc, #84]	; (800951c <HAL_RCC_OscConfig+0x27c>)
 80094c8:	2201      	movs	r2, #1
 80094ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094cc:	f7fd fa7c 	bl	80069c8 <HAL_GetTick>
 80094d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80094d2:	e008      	b.n	80094e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094d4:	f7fd fa78 	bl	80069c8 <HAL_GetTick>
 80094d8:	4602      	mov	r2, r0
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d901      	bls.n	80094e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	e173      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80094e6:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <HAL_RCC_OscConfig+0x274>)
 80094e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d0f0      	beq.n	80094d4 <HAL_RCC_OscConfig+0x234>
 80094f2:	e01b      	b.n	800952c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80094f4:	4b09      	ldr	r3, [pc, #36]	; (800951c <HAL_RCC_OscConfig+0x27c>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094fa:	f7fd fa65 	bl	80069c8 <HAL_GetTick>
 80094fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009500:	e00e      	b.n	8009520 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009502:	f7fd fa61 	bl	80069c8 <HAL_GetTick>
 8009506:	4602      	mov	r2, r0
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	2b02      	cmp	r3, #2
 800950e:	d907      	bls.n	8009520 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e15c      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
 8009514:	40023800 	.word	0x40023800
 8009518:	42470000 	.word	0x42470000
 800951c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009520:	4b8a      	ldr	r3, [pc, #552]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009524:	f003 0302 	and.w	r3, r3, #2
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1ea      	bne.n	8009502 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0304 	and.w	r3, r3, #4
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 8097 	beq.w	8009668 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800953a:	2300      	movs	r3, #0
 800953c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800953e:	4b83      	ldr	r3, [pc, #524]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10f      	bne.n	800956a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800954a:	2300      	movs	r3, #0
 800954c:	60bb      	str	r3, [r7, #8]
 800954e:	4b7f      	ldr	r3, [pc, #508]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	4a7e      	ldr	r2, [pc, #504]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009558:	6413      	str	r3, [r2, #64]	; 0x40
 800955a:	4b7c      	ldr	r3, [pc, #496]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 800955c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009562:	60bb      	str	r3, [r7, #8]
 8009564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009566:	2301      	movs	r3, #1
 8009568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800956a:	4b79      	ldr	r3, [pc, #484]	; (8009750 <HAL_RCC_OscConfig+0x4b0>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009572:	2b00      	cmp	r3, #0
 8009574:	d118      	bne.n	80095a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009576:	4b76      	ldr	r3, [pc, #472]	; (8009750 <HAL_RCC_OscConfig+0x4b0>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a75      	ldr	r2, [pc, #468]	; (8009750 <HAL_RCC_OscConfig+0x4b0>)
 800957c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009582:	f7fd fa21 	bl	80069c8 <HAL_GetTick>
 8009586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009588:	e008      	b.n	800959c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800958a:	f7fd fa1d 	bl	80069c8 <HAL_GetTick>
 800958e:	4602      	mov	r2, r0
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	2b02      	cmp	r3, #2
 8009596:	d901      	bls.n	800959c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009598:	2303      	movs	r3, #3
 800959a:	e118      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800959c:	4b6c      	ldr	r3, [pc, #432]	; (8009750 <HAL_RCC_OscConfig+0x4b0>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d0f0      	beq.n	800958a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d106      	bne.n	80095be <HAL_RCC_OscConfig+0x31e>
 80095b0:	4b66      	ldr	r3, [pc, #408]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b4:	4a65      	ldr	r2, [pc, #404]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095b6:	f043 0301 	orr.w	r3, r3, #1
 80095ba:	6713      	str	r3, [r2, #112]	; 0x70
 80095bc:	e01c      	b.n	80095f8 <HAL_RCC_OscConfig+0x358>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	2b05      	cmp	r3, #5
 80095c4:	d10c      	bne.n	80095e0 <HAL_RCC_OscConfig+0x340>
 80095c6:	4b61      	ldr	r3, [pc, #388]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ca:	4a60      	ldr	r2, [pc, #384]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095cc:	f043 0304 	orr.w	r3, r3, #4
 80095d0:	6713      	str	r3, [r2, #112]	; 0x70
 80095d2:	4b5e      	ldr	r3, [pc, #376]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d6:	4a5d      	ldr	r2, [pc, #372]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095d8:	f043 0301 	orr.w	r3, r3, #1
 80095dc:	6713      	str	r3, [r2, #112]	; 0x70
 80095de:	e00b      	b.n	80095f8 <HAL_RCC_OscConfig+0x358>
 80095e0:	4b5a      	ldr	r3, [pc, #360]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e4:	4a59      	ldr	r2, [pc, #356]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095e6:	f023 0301 	bic.w	r3, r3, #1
 80095ea:	6713      	str	r3, [r2, #112]	; 0x70
 80095ec:	4b57      	ldr	r3, [pc, #348]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f0:	4a56      	ldr	r2, [pc, #344]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80095f2:	f023 0304 	bic.w	r3, r3, #4
 80095f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d015      	beq.n	800962c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009600:	f7fd f9e2 	bl	80069c8 <HAL_GetTick>
 8009604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009606:	e00a      	b.n	800961e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009608:	f7fd f9de 	bl	80069c8 <HAL_GetTick>
 800960c:	4602      	mov	r2, r0
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	f241 3288 	movw	r2, #5000	; 0x1388
 8009616:	4293      	cmp	r3, r2
 8009618:	d901      	bls.n	800961e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800961a:	2303      	movs	r3, #3
 800961c:	e0d7      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800961e:	4b4b      	ldr	r3, [pc, #300]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009622:	f003 0302 	and.w	r3, r3, #2
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0ee      	beq.n	8009608 <HAL_RCC_OscConfig+0x368>
 800962a:	e014      	b.n	8009656 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800962c:	f7fd f9cc 	bl	80069c8 <HAL_GetTick>
 8009630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009632:	e00a      	b.n	800964a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009634:	f7fd f9c8 	bl	80069c8 <HAL_GetTick>
 8009638:	4602      	mov	r2, r0
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009642:	4293      	cmp	r3, r2
 8009644:	d901      	bls.n	800964a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009646:	2303      	movs	r3, #3
 8009648:	e0c1      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800964a:	4b40      	ldr	r3, [pc, #256]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 800964c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800964e:	f003 0302 	and.w	r3, r3, #2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1ee      	bne.n	8009634 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009656:	7dfb      	ldrb	r3, [r7, #23]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d105      	bne.n	8009668 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800965c:	4b3b      	ldr	r3, [pc, #236]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 800965e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009660:	4a3a      	ldr	r2, [pc, #232]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009666:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	2b00      	cmp	r3, #0
 800966e:	f000 80ad 	beq.w	80097cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009672:	4b36      	ldr	r3, [pc, #216]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	f003 030c 	and.w	r3, r3, #12
 800967a:	2b08      	cmp	r3, #8
 800967c:	d060      	beq.n	8009740 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	2b02      	cmp	r3, #2
 8009684:	d145      	bne.n	8009712 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009686:	4b33      	ldr	r3, [pc, #204]	; (8009754 <HAL_RCC_OscConfig+0x4b4>)
 8009688:	2200      	movs	r2, #0
 800968a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800968c:	f7fd f99c 	bl	80069c8 <HAL_GetTick>
 8009690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009692:	e008      	b.n	80096a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009694:	f7fd f998 	bl	80069c8 <HAL_GetTick>
 8009698:	4602      	mov	r2, r0
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d901      	bls.n	80096a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e093      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096a6:	4b29      	ldr	r3, [pc, #164]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1f0      	bne.n	8009694 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	69da      	ldr	r2, [r3, #28]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	431a      	orrs	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c0:	019b      	lsls	r3, r3, #6
 80096c2:	431a      	orrs	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c8:	085b      	lsrs	r3, r3, #1
 80096ca:	3b01      	subs	r3, #1
 80096cc:	041b      	lsls	r3, r3, #16
 80096ce:	431a      	orrs	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d4:	061b      	lsls	r3, r3, #24
 80096d6:	431a      	orrs	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096dc:	071b      	lsls	r3, r3, #28
 80096de:	491b      	ldr	r1, [pc, #108]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 80096e0:	4313      	orrs	r3, r2
 80096e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80096e4:	4b1b      	ldr	r3, [pc, #108]	; (8009754 <HAL_RCC_OscConfig+0x4b4>)
 80096e6:	2201      	movs	r2, #1
 80096e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ea:	f7fd f96d 	bl	80069c8 <HAL_GetTick>
 80096ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096f0:	e008      	b.n	8009704 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096f2:	f7fd f969 	bl	80069c8 <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d901      	bls.n	8009704 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e064      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009704:	4b11      	ldr	r3, [pc, #68]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800970c:	2b00      	cmp	r3, #0
 800970e:	d0f0      	beq.n	80096f2 <HAL_RCC_OscConfig+0x452>
 8009710:	e05c      	b.n	80097cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009712:	4b10      	ldr	r3, [pc, #64]	; (8009754 <HAL_RCC_OscConfig+0x4b4>)
 8009714:	2200      	movs	r2, #0
 8009716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009718:	f7fd f956 	bl	80069c8 <HAL_GetTick>
 800971c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800971e:	e008      	b.n	8009732 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009720:	f7fd f952 	bl	80069c8 <HAL_GetTick>
 8009724:	4602      	mov	r2, r0
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	2b02      	cmp	r3, #2
 800972c:	d901      	bls.n	8009732 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800972e:	2303      	movs	r3, #3
 8009730:	e04d      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009732:	4b06      	ldr	r3, [pc, #24]	; (800974c <HAL_RCC_OscConfig+0x4ac>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1f0      	bne.n	8009720 <HAL_RCC_OscConfig+0x480>
 800973e:	e045      	b.n	80097cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	699b      	ldr	r3, [r3, #24]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d107      	bne.n	8009758 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e040      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
 800974c:	40023800 	.word	0x40023800
 8009750:	40007000 	.word	0x40007000
 8009754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009758:	4b1f      	ldr	r3, [pc, #124]	; (80097d8 <HAL_RCC_OscConfig+0x538>)
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d030      	beq.n	80097c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009770:	429a      	cmp	r2, r3
 8009772:	d129      	bne.n	80097c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800977e:	429a      	cmp	r2, r3
 8009780:	d122      	bne.n	80097c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009788:	4013      	ands	r3, r2
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800978e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009790:	4293      	cmp	r3, r2
 8009792:	d119      	bne.n	80097c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979e:	085b      	lsrs	r3, r3, #1
 80097a0:	3b01      	subs	r3, #1
 80097a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d10f      	bne.n	80097c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d107      	bne.n	80097c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d001      	beq.n	80097cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e000      	b.n	80097ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	40023800 	.word	0x40023800

080097dc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e022      	b.n	8009834 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d105      	bne.n	8009806 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7fc fc1f 	bl	8006044 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2203      	movs	r2, #3
 800980a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f814 	bl	800983c <HAL_SD_InitCard>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e00a      	b.n	8009834 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800983c:	b5b0      	push	{r4, r5, r7, lr}
 800983e:	b08e      	sub	sp, #56	; 0x38
 8009840:	af04      	add	r7, sp, #16
 8009842:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009844:	2300      	movs	r3, #0
 8009846:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009848:	2300      	movs	r3, #0
 800984a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800984c:	2300      	movs	r3, #0
 800984e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009850:	2300      	movs	r3, #0
 8009852:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009854:	2300      	movs	r3, #0
 8009856:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009858:	2376      	movs	r3, #118	; 0x76
 800985a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681d      	ldr	r5, [r3, #0]
 8009860:	466c      	mov	r4, sp
 8009862:	f107 0314 	add.w	r3, r7, #20
 8009866:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800986a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800986e:	f107 0308 	add.w	r3, r7, #8
 8009872:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009874:	4628      	mov	r0, r5
 8009876:	f002 feb5 	bl	800c5e4 <SDIO_Init>
 800987a:	4603      	mov	r3, r0
 800987c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009884:	2b00      	cmp	r3, #0
 8009886:	d001      	beq.n	800988c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e04f      	b.n	800992c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800988c:	4b29      	ldr	r3, [pc, #164]	; (8009934 <HAL_SD_InitCard+0xf8>)
 800988e:	2200      	movs	r2, #0
 8009890:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4618      	mov	r0, r3
 8009898:	f002 feed 	bl	800c676 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800989c:	4b25      	ldr	r3, [pc, #148]	; (8009934 <HAL_SD_InitCard+0xf8>)
 800989e:	2201      	movs	r2, #1
 80098a0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80098a2:	2002      	movs	r0, #2
 80098a4:	f7fd f89c 	bl	80069e0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 ffef 	bl	800a88c <SD_PowerON>
 80098ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00b      	beq.n	80098ce <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098c2:	6a3b      	ldr	r3, [r7, #32]
 80098c4:	431a      	orrs	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e02e      	b.n	800992c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 ff0e 	bl	800a6f0 <SD_InitCard>
 80098d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00b      	beq.n	80098f4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098e8:	6a3b      	ldr	r3, [r7, #32]
 80098ea:	431a      	orrs	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e01b      	b.n	800992c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80098fc:	4618      	mov	r0, r3
 80098fe:	f002 ff4c 	bl	800c79a <SDMMC_CmdBlockLength>
 8009902:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00f      	beq.n	800992a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a0a      	ldr	r2, [pc, #40]	; (8009938 <HAL_SD_InitCard+0xfc>)
 8009910:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	431a      	orrs	r2, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e000      	b.n	800992c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3728      	adds	r7, #40	; 0x28
 8009930:	46bd      	mov	sp, r7
 8009932:	bdb0      	pop	{r4, r5, r7, pc}
 8009934:	422580a0 	.word	0x422580a0
 8009938:	004005ff 	.word	0x004005ff

0800993c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b08c      	sub	sp, #48	; 0x30
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
 8009948:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d107      	bne.n	8009964 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009958:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	e0be      	b.n	8009ae2 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800996a:	b2db      	uxtb	r3, r3
 800996c:	2b01      	cmp	r3, #1
 800996e:	f040 80b7 	bne.w	8009ae0 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	441a      	add	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009982:	429a      	cmp	r2, r3
 8009984:	d907      	bls.n	8009996 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	e0a5      	b.n	8009ae2 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2203      	movs	r2, #3
 800999a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2200      	movs	r2, #0
 80099a4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80099b4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ba:	4a4c      	ldr	r2, [pc, #304]	; (8009aec <HAL_SD_ReadBlocks_DMA+0x1b0>)
 80099bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c2:	4a4b      	ldr	r2, [pc, #300]	; (8009af0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80099c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ca:	2200      	movs	r2, #0
 80099cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d2:	2200      	movs	r2, #0
 80099d4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e6:	689a      	ldr	r2, [r3, #8]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	430a      	orrs	r2, r1
 80099f0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3380      	adds	r3, #128	; 0x80
 80099fc:	4619      	mov	r1, r3
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	025b      	lsls	r3, r3, #9
 8009a04:	089b      	lsrs	r3, r3, #2
 8009a06:	f7fd f9cf 	bl	8006da8 <HAL_DMA_Start_IT>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d017      	beq.n	8009a40 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8009a1e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a33      	ldr	r2, [pc, #204]	; (8009af4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009a26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e050      	b.n	8009ae2 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009a40:	4b2d      	ldr	r3, [pc, #180]	; (8009af8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009a42:	2201      	movs	r2, #1
 8009a44:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d002      	beq.n	8009a54 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8009a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a50:	025b      	lsls	r3, r3, #9
 8009a52:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a54:	f04f 33ff 	mov.w	r3, #4294967295
 8009a58:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	025b      	lsls	r3, r3, #9
 8009a5e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009a60:	2390      	movs	r3, #144	; 0x90
 8009a62:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009a64:	2302      	movs	r3, #2
 8009a66:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f107 0210 	add.w	r2, r7, #16
 8009a78:	4611      	mov	r1, r2
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f002 fe61 	bl	800c742 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d90a      	bls.n	8009a9c <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2282      	movs	r2, #130	; 0x82
 8009a8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a92:	4618      	mov	r0, r3
 8009a94:	f002 fec5 	bl	800c822 <SDMMC_CmdReadMultiBlock>
 8009a98:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009a9a:	e009      	b.n	8009ab0 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2281      	movs	r2, #129	; 0x81
 8009aa0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f002 fe98 	bl	800c7de <SDMMC_CmdReadSingleBlock>
 8009aae:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d012      	beq.n	8009adc <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a0e      	ldr	r2, [pc, #56]	; (8009af4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009abc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac4:	431a      	orrs	r2, r3
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e002      	b.n	8009ae2 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	e000      	b.n	8009ae2 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009ae0:	2302      	movs	r3, #2
  }
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3730      	adds	r7, #48	; 0x30
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	0800a4ff 	.word	0x0800a4ff
 8009af0:	0800a571 	.word	0x0800a571
 8009af4:	004005ff 	.word	0x004005ff
 8009af8:	4225858c 	.word	0x4225858c

08009afc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b08c      	sub	sp, #48	; 0x30
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
 8009b08:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d107      	bne.n	8009b24 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	e0c1      	b.n	8009ca8 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	f040 80ba 	bne.w	8009ca6 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	441a      	add	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d907      	bls.n	8009b56 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e0a8      	b.n	8009ca8 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2203      	movs	r2, #3
 8009b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2200      	movs	r2, #0
 8009b64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f042 021a 	orr.w	r2, r2, #26
 8009b74:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b7a:	4a4d      	ldr	r2, [pc, #308]	; (8009cb0 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8009b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b82:	4a4c      	ldr	r2, [pc, #304]	; (8009cb4 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8009b84:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d002      	beq.n	8009b9c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b98:	025b      	lsls	r3, r3, #9
 8009b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d90a      	bls.n	8009bb8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	22a0      	movs	r2, #160	; 0xa0
 8009ba6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f002 fe7b 	bl	800c8aa <SDMMC_CmdWriteMultiBlock>
 8009bb4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009bb6:	e009      	b.n	8009bcc <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2290      	movs	r2, #144	; 0x90
 8009bbc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f002 fe4e 	bl	800c866 <SDMMC_CmdWriteSingleBlock>
 8009bca:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d012      	beq.n	8009bf8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a38      	ldr	r2, [pc, #224]	; (8009cb8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8009bd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be0:	431a      	orrs	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2201      	movs	r2, #1
 8009bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e057      	b.n	8009ca8 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009bf8:	4b30      	ldr	r3, [pc, #192]	; (8009cbc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c02:	2240      	movs	r2, #64	; 0x40
 8009c04:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	430a      	orrs	r2, r1
 8009c20:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009c26:	68b9      	ldr	r1, [r7, #8]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3380      	adds	r3, #128	; 0x80
 8009c2e:	461a      	mov	r2, r3
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	025b      	lsls	r3, r3, #9
 8009c34:	089b      	lsrs	r3, r3, #2
 8009c36:	f7fd f8b7 	bl	8006da8 <HAL_DMA_Start_IT>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d01a      	beq.n	8009c76 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f022 021a 	bic.w	r2, r2, #26
 8009c4e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a18      	ldr	r2, [pc, #96]	; (8009cb8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8009c56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	e018      	b.n	8009ca8 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c76:	f04f 33ff 	mov.w	r3, #4294967295
 8009c7a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	025b      	lsls	r3, r3, #9
 8009c80:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009c82:	2390      	movs	r3, #144	; 0x90
 8009c84:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009c86:	2300      	movs	r3, #0
 8009c88:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f107 0210 	add.w	r2, r7, #16
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f002 fd50 	bl	800c742 <SDIO_ConfigData>

      return HAL_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	e000      	b.n	8009ca8 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8009ca6:	2302      	movs	r3, #2
  }
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3730      	adds	r7, #48	; 0x30
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	0800a4d5 	.word	0x0800a4d5
 8009cb4:	0800a571 	.word	0x0800a571
 8009cb8:	004005ff 	.word	0x004005ff
 8009cbc:	4225858c 	.word	0x4225858c

08009cc0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ccc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d008      	beq.n	8009cee <HAL_SD_IRQHandler+0x2e>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f003 0308 	and.w	r3, r3, #8
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d003      	beq.n	8009cee <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 ffef 	bl	800acca <SD_Read_IT>
 8009cec:	e155      	b.n	8009f9a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f000 808f 	beq.w	8009e1c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d06:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	6812      	ldr	r2, [r2, #0]
 8009d12:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8009d16:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009d1a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f022 0201 	bic.w	r2, r2, #1
 8009d2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f003 0308 	and.w	r3, r3, #8
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d039      	beq.n	8009daa <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f003 0302 	and.w	r3, r3, #2
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d104      	bne.n	8009d4a <HAL_SD_IRQHandler+0x8a>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f003 0320 	and.w	r3, r3, #32
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d011      	beq.n	8009d6e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f002 fdce 	bl	800c8f0 <SDMMC_CmdStopTransfer>
 8009d54:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d008      	beq.n	8009d6e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	431a      	orrs	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f91f 	bl	8009fac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d76:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f003 0301 	and.w	r3, r3, #1
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d104      	bne.n	8009d9a <HAL_SD_IRQHandler+0xda>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f003 0302 	and.w	r3, r3, #2
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f003 fa34 	bl	800d208 <HAL_SD_RxCpltCallback>
 8009da0:	e0fb      	b.n	8009f9a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f003 fa26 	bl	800d1f4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009da8:	e0f7      	b.n	8009f9a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f000 80f2 	beq.w	8009f9a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f003 0320 	and.w	r3, r3, #32
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d011      	beq.n	8009de4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f002 fd93 	bl	800c8f0 <SDMMC_CmdStopTransfer>
 8009dca:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d008      	beq.n	8009de4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	431a      	orrs	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f8e4 	bl	8009fac <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f040 80d5 	bne.w	8009f9a <HAL_SD_IRQHandler+0x2da>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f003 0302 	and.w	r3, r3, #2
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f040 80cf 	bne.w	8009f9a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f022 0208 	bic.w	r2, r2, #8
 8009e0a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f003 f9ed 	bl	800d1f4 <HAL_SD_TxCpltCallback>
}
 8009e1a:	e0be      	b.n	8009f9a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d008      	beq.n	8009e3c <HAL_SD_IRQHandler+0x17c>
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f003 0308 	and.w	r3, r3, #8
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d003      	beq.n	8009e3c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 ff99 	bl	800ad6c <SD_Write_IT>
 8009e3a:	e0ae      	b.n	8009f9a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e42:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f000 80a7 	beq.w	8009f9a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e52:	f003 0302 	and.w	r3, r3, #2
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d005      	beq.n	8009e66 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5e:	f043 0202 	orr.w	r2, r3, #2
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e6c:	f003 0308 	and.w	r3, r3, #8
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d005      	beq.n	8009e80 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e78:	f043 0208 	orr.w	r2, r3, #8
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e86:	f003 0320 	and.w	r3, r3, #32
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d005      	beq.n	8009e9a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e92:	f043 0220 	orr.w	r2, r3, #32
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea0:	f003 0310 	and.w	r3, r3, #16
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d005      	beq.n	8009eb4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eac:	f043 0210 	orr.w	r2, r3, #16
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ebc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009ecc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f002 fd0c 	bl	800c8f0 <SDMMC_CmdStopTransfer>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ede:	431a      	orrs	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f003 0308 	and.w	r3, r3, #8
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00a      	beq.n	8009f04 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f855 	bl	8009fac <HAL_SD_ErrorCallback>
}
 8009f02:	e04a      	b.n	8009f9a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d045      	beq.n	8009f9a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f003 0310 	and.w	r3, r3, #16
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d104      	bne.n	8009f22 <HAL_SD_IRQHandler+0x262>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f003 0320 	and.w	r3, r3, #32
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d011      	beq.n	8009f46 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f26:	4a1f      	ldr	r2, [pc, #124]	; (8009fa4 <HAL_SD_IRQHandler+0x2e4>)
 8009f28:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fc ff92 	bl	8006e58 <HAL_DMA_Abort_IT>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d02f      	beq.n	8009f9a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 fb68 	bl	800a614 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009f44:	e029      	b.n	8009f9a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f003 0301 	and.w	r3, r3, #1
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d104      	bne.n	8009f5a <HAL_SD_IRQHandler+0x29a>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f003 0302 	and.w	r3, r3, #2
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d011      	beq.n	8009f7e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5e:	4a12      	ldr	r2, [pc, #72]	; (8009fa8 <HAL_SD_IRQHandler+0x2e8>)
 8009f60:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fc ff76 	bl	8006e58 <HAL_DMA_Abort_IT>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d013      	beq.n	8009f9a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 fb83 	bl	800a682 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009f7c:	e00d      	b.n	8009f9a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f003 f924 	bl	800d1e0 <HAL_SD_AbortCallback>
}
 8009f98:	e7ff      	b.n	8009f9a <HAL_SD_IRQHandler+0x2da>
 8009f9a:	bf00      	nop
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	0800a615 	.word	0x0800a615
 8009fa8:	0800a683 	.word	0x0800a683

08009fac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fce:	0f9b      	lsrs	r3, r3, #30
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fda:	0e9b      	lsrs	r3, r3, #26
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	f003 030f 	and.w	r3, r3, #15
 8009fe2:	b2da      	uxtb	r2, r3
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fec:	0e1b      	lsrs	r3, r3, #24
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	f003 0303 	and.w	r3, r3, #3
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ffe:	0c1b      	lsrs	r3, r3, #16
 800a000:	b2da      	uxtb	r2, r3
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a00a:	0a1b      	lsrs	r3, r3, #8
 800a00c:	b2da      	uxtb	r2, r3
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a016:	b2da      	uxtb	r2, r3
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a020:	0d1b      	lsrs	r3, r3, #20
 800a022:	b29a      	uxth	r2, r3
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a02c:	0c1b      	lsrs	r3, r3, #16
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	f003 030f 	and.w	r3, r3, #15
 800a034:	b2da      	uxtb	r2, r3
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a03e:	0bdb      	lsrs	r3, r3, #15
 800a040:	b2db      	uxtb	r3, r3
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	b2da      	uxtb	r2, r3
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a050:	0b9b      	lsrs	r3, r3, #14
 800a052:	b2db      	uxtb	r3, r3
 800a054:	f003 0301 	and.w	r3, r3, #1
 800a058:	b2da      	uxtb	r2, r3
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a062:	0b5b      	lsrs	r3, r3, #13
 800a064:	b2db      	uxtb	r3, r3
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a074:	0b1b      	lsrs	r3, r3, #12
 800a076:	b2db      	uxtb	r3, r3
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2200      	movs	r2, #0
 800a086:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d163      	bne.n	800a158 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a094:	009a      	lsls	r2, r3, #2
 800a096:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a09a:	4013      	ands	r3, r2
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a0a0:	0f92      	lsrs	r2, r2, #30
 800a0a2:	431a      	orrs	r2, r3
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ac:	0edb      	lsrs	r3, r3, #27
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	f003 0307 	and.w	r3, r3, #7
 800a0b4:	b2da      	uxtb	r2, r3
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0be:	0e1b      	lsrs	r3, r3, #24
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	f003 0307 	and.w	r3, r3, #7
 800a0c6:	b2da      	uxtb	r2, r3
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0d0:	0d5b      	lsrs	r3, r3, #21
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	f003 0307 	and.w	r3, r3, #7
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0e2:	0c9b      	lsrs	r3, r3, #18
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	f003 0307 	and.w	r3, r3, #7
 800a0ea:	b2da      	uxtb	r2, r3
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0f4:	0bdb      	lsrs	r3, r3, #15
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	f003 0307 	and.w	r3, r3, #7
 800a0fc:	b2da      	uxtb	r2, r3
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	1c5a      	adds	r2, r3, #1
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	7e1b      	ldrb	r3, [r3, #24]
 800a110:	b2db      	uxtb	r3, r3
 800a112:	f003 0307 	and.w	r3, r3, #7
 800a116:	3302      	adds	r3, #2
 800a118:	2201      	movs	r2, #1
 800a11a:	fa02 f303 	lsl.w	r3, r2, r3
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a122:	fb03 f202 	mul.w	r2, r3, r2
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	7a1b      	ldrb	r3, [r3, #8]
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	f003 030f 	and.w	r3, r3, #15
 800a134:	2201      	movs	r2, #1
 800a136:	409a      	lsls	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a144:	0a52      	lsrs	r2, r2, #9
 800a146:	fb03 f202 	mul.w	r2, r3, r2
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a154:	661a      	str	r2, [r3, #96]	; 0x60
 800a156:	e031      	b.n	800a1bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d11d      	bne.n	800a19c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a164:	041b      	lsls	r3, r3, #16
 800a166:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a16e:	0c1b      	lsrs	r3, r3, #16
 800a170:	431a      	orrs	r2, r3
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	3301      	adds	r3, #1
 800a17c:	029a      	lsls	r2, r3, #10
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a190:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	661a      	str	r2, [r3, #96]	; 0x60
 800a19a:	e00f      	b.n	800a1bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a58      	ldr	r2, [pc, #352]	; (800a304 <HAL_SD_GetCardCSD+0x344>)
 800a1a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e09d      	b.n	800a2f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1c0:	0b9b      	lsrs	r3, r3, #14
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1d2:	09db      	lsrs	r3, r3, #7
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ea:	b2da      	uxtb	r2, r3
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1f4:	0fdb      	lsrs	r3, r3, #31
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a200:	0f5b      	lsrs	r3, r3, #29
 800a202:	b2db      	uxtb	r3, r3
 800a204:	f003 0303 	and.w	r3, r3, #3
 800a208:	b2da      	uxtb	r2, r3
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a212:	0e9b      	lsrs	r3, r3, #26
 800a214:	b2db      	uxtb	r3, r3
 800a216:	f003 0307 	and.w	r3, r3, #7
 800a21a:	b2da      	uxtb	r2, r3
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a224:	0d9b      	lsrs	r3, r3, #22
 800a226:	b2db      	uxtb	r3, r3
 800a228:	f003 030f 	and.w	r3, r3, #15
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a236:	0d5b      	lsrs	r3, r3, #21
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	f003 0301 	and.w	r3, r3, #1
 800a23e:	b2da      	uxtb	r2, r3
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	2200      	movs	r2, #0
 800a24a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a252:	0c1b      	lsrs	r3, r3, #16
 800a254:	b2db      	uxtb	r3, r3
 800a256:	f003 0301 	and.w	r3, r3, #1
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a266:	0bdb      	lsrs	r3, r3, #15
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	f003 0301 	and.w	r3, r3, #1
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27a:	0b9b      	lsrs	r3, r3, #14
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	f003 0301 	and.w	r3, r3, #1
 800a282:	b2da      	uxtb	r2, r3
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a28e:	0b5b      	lsrs	r3, r3, #13
 800a290:	b2db      	uxtb	r3, r3
 800a292:	f003 0301 	and.w	r3, r3, #1
 800a296:	b2da      	uxtb	r2, r3
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a2:	0b1b      	lsrs	r3, r3, #12
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	f003 0301 	and.w	r3, r3, #1
 800a2aa:	b2da      	uxtb	r2, r3
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2b6:	0a9b      	lsrs	r3, r3, #10
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	f003 0303 	and.w	r3, r3, #3
 800a2be:	b2da      	uxtb	r2, r3
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ca:	0a1b      	lsrs	r3, r3, #8
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	f003 0303 	and.w	r3, r3, #3
 800a2d2:	b2da      	uxtb	r2, r3
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2de:	085b      	lsrs	r3, r3, #1
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	004005ff 	.word	0x004005ff

0800a308 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a360:	b5b0      	push	{r4, r5, r7, lr}
 800a362:	b08e      	sub	sp, #56	; 0x38
 800a364:	af04      	add	r7, sp, #16
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2203      	movs	r2, #3
 800a374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a37c:	2b03      	cmp	r3, #3
 800a37e:	d02e      	beq.n	800a3de <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a386:	d106      	bne.n	800a396 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	639a      	str	r2, [r3, #56]	; 0x38
 800a394:	e029      	b.n	800a3ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a39c:	d10a      	bne.n	800a3b4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fb2a 	bl	800a9f8 <SD_WideBus_Enable>
 800a3a4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	431a      	orrs	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	639a      	str	r2, [r3, #56]	; 0x38
 800a3b2:	e01a      	b.n	800a3ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10a      	bne.n	800a3d0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fb67 	bl	800aa8e <SD_WideBus_Disable>
 800a3c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	431a      	orrs	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	639a      	str	r2, [r3, #56]	; 0x38
 800a3ce:	e00c      	b.n	800a3ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	639a      	str	r2, [r3, #56]	; 0x38
 800a3dc:	e005      	b.n	800a3ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00b      	beq.n	800a40a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a26      	ldr	r2, [pc, #152]	; (800a490 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a3f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a408:	e01f      	b.n	800a44a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	695b      	ldr	r3, [r3, #20]
 800a424:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681d      	ldr	r5, [r3, #0]
 800a430:	466c      	mov	r4, sp
 800a432:	f107 0314 	add.w	r3, r7, #20
 800a436:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a43a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a43e:	f107 0308 	add.w	r3, r7, #8
 800a442:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a444:	4628      	mov	r0, r5
 800a446:	f002 f8cd 	bl	800c5e4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a452:	4618      	mov	r0, r3
 800a454:	f002 f9a1 	bl	800c79a <SDMMC_CmdBlockLength>
 800a458:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00c      	beq.n	800a47a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a0a      	ldr	r2, [pc, #40]	; (800a490 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a466:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a46c:	6a3b      	ldr	r3, [r7, #32]
 800a46e:	431a      	orrs	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a486:	4618      	mov	r0, r3
 800a488:	3728      	adds	r7, #40	; 0x28
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bdb0      	pop	{r4, r5, r7, pc}
 800a48e:	bf00      	nop
 800a490:	004005ff 	.word	0x004005ff

0800a494 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b086      	sub	sp, #24
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a49c:	2300      	movs	r3, #0
 800a49e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a4a0:	f107 030c 	add.w	r3, r7, #12
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 fa7e 	bl	800a9a8 <SD_SendStatus>
 800a4ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d005      	beq.n	800a4c0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	431a      	orrs	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	0a5b      	lsrs	r3, r3, #9
 800a4c4:	f003 030f 	and.w	r3, r3, #15
 800a4c8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a4ca:	693b      	ldr	r3, [r7, #16]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3718      	adds	r7, #24
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4f0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a4f2:	bf00      	nop
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a510:	2b82      	cmp	r3, #130	; 0x82
 800a512:	d111      	bne.n	800a538 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4618      	mov	r0, r3
 800a51a:	f002 f9e9 	bl	800c8f0 <SDMMC_CmdStopTransfer>
 800a51e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d008      	beq.n	800a538 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	431a      	orrs	r2, r3
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f7ff fd3a 	bl	8009fac <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f022 0208 	bic.w	r2, r2, #8
 800a546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f240 523a 	movw	r2, #1338	; 0x53a
 800a550:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2200      	movs	r2, #0
 800a55e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f002 fe51 	bl	800d208 <HAL_SD_RxCpltCallback>
#endif
}
 800a566:	bf00      	nop
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f7fc fe16 	bl	80071b0 <HAL_DMA_GetError>
 800a584:	4603      	mov	r3, r0
 800a586:	2b02      	cmp	r3, #2
 800a588:	d03e      	beq.n	800a608 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a590:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a598:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d002      	beq.n	800a5a6 <SD_DMAError+0x36>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d12d      	bne.n	800a602 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a19      	ldr	r2, [pc, #100]	; (800a610 <SD_DMAError+0xa0>)
 800a5ac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a5bc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a5ca:	6978      	ldr	r0, [r7, #20]
 800a5cc:	f7ff ff62 	bl	800a494 <HAL_SD_GetCardState>
 800a5d0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	2b06      	cmp	r3, #6
 800a5d6:	d002      	beq.n	800a5de <SD_DMAError+0x6e>
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	2b05      	cmp	r3, #5
 800a5dc:	d10a      	bne.n	800a5f4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f002 f984 	bl	800c8f0 <SDMMC_CmdStopTransfer>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ee:	431a      	orrs	r2, r3
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	2200      	movs	r2, #0
 800a600:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a602:	6978      	ldr	r0, [r7, #20]
 800a604:	f7ff fcd2 	bl	8009fac <HAL_SD_ErrorCallback>
#endif
  }
}
 800a608:	bf00      	nop
 800a60a:	3718      	adds	r7, #24
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	004005ff 	.word	0x004005ff

0800a614 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a620:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f240 523a 	movw	r2, #1338	; 0x53a
 800a62a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f7ff ff31 	bl	800a494 <HAL_SD_GetCardState>
 800a632:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	2b06      	cmp	r3, #6
 800a646:	d002      	beq.n	800a64e <SD_DMATxAbort+0x3a>
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	2b05      	cmp	r3, #5
 800a64c:	d10a      	bne.n	800a664 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4618      	mov	r0, r3
 800a654:	f002 f94c 	bl	800c8f0 <SDMMC_CmdStopTransfer>
 800a658:	4602      	mov	r2, r0
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65e:	431a      	orrs	r2, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d103      	bne.n	800a674 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f002 fdb7 	bl	800d1e0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a672:	e002      	b.n	800a67a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f7ff fc99 	bl	8009fac <HAL_SD_ErrorCallback>
}
 800a67a:	bf00      	nop
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b084      	sub	sp, #16
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f240 523a 	movw	r2, #1338	; 0x53a
 800a698:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f7ff fefa 	bl	800a494 <HAL_SD_GetCardState>
 800a6a0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	2b06      	cmp	r3, #6
 800a6b4:	d002      	beq.n	800a6bc <SD_DMARxAbort+0x3a>
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	2b05      	cmp	r3, #5
 800a6ba:	d10a      	bne.n	800a6d2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f002 f915 	bl	800c8f0 <SDMMC_CmdStopTransfer>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6cc:	431a      	orrs	r2, r3
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d103      	bne.n	800a6e2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f002 fd80 	bl	800d1e0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a6e0:	e002      	b.n	800a6e8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f7ff fc62 	bl	8009fac <HAL_SD_ErrorCallback>
}
 800a6e8:	bf00      	nop
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a6f0:	b5b0      	push	{r4, r5, r7, lr}
 800a6f2:	b094      	sub	sp, #80	; 0x50
 800a6f4:	af04      	add	r7, sp, #16
 800a6f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4618      	mov	r0, r3
 800a702:	f001 ffc6 	bl	800c692 <SDIO_GetPowerState>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d102      	bne.n	800a712 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a70c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a710:	e0b8      	b.n	800a884 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a716:	2b03      	cmp	r3, #3
 800a718:	d02f      	beq.n	800a77a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4618      	mov	r0, r3
 800a720:	f002 f9f0 	bl	800cb04 <SDMMC_CmdSendCID>
 800a724:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <SD_InitCard+0x40>
    {
      return errorstate;
 800a72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a72e:	e0a9      	b.n	800a884 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2100      	movs	r1, #0
 800a736:	4618      	mov	r0, r3
 800a738:	f001 fff0 	bl	800c71c <SDIO_GetResponse>
 800a73c:	4602      	mov	r2, r0
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2104      	movs	r1, #4
 800a748:	4618      	mov	r0, r3
 800a74a:	f001 ffe7 	bl	800c71c <SDIO_GetResponse>
 800a74e:	4602      	mov	r2, r0
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2108      	movs	r1, #8
 800a75a:	4618      	mov	r0, r3
 800a75c:	f001 ffde 	bl	800c71c <SDIO_GetResponse>
 800a760:	4602      	mov	r2, r0
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	210c      	movs	r1, #12
 800a76c:	4618      	mov	r0, r3
 800a76e:	f001 ffd5 	bl	800c71c <SDIO_GetResponse>
 800a772:	4602      	mov	r2, r0
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d00d      	beq.n	800a79e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f107 020e 	add.w	r2, r7, #14
 800a78a:	4611      	mov	r1, r2
 800a78c:	4618      	mov	r0, r3
 800a78e:	f002 f9f6 	bl	800cb7e <SDMMC_CmdSetRelAdd>
 800a792:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <SD_InitCard+0xae>
    {
      return errorstate;
 800a79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a79c:	e072      	b.n	800a884 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7a2:	2b03      	cmp	r3, #3
 800a7a4:	d036      	beq.n	800a814 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a7a6:	89fb      	ldrh	r3, [r7, #14]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7b6:	041b      	lsls	r3, r3, #16
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4610      	mov	r0, r2
 800a7bc:	f002 f9c0 	bl	800cb40 <SDMMC_CmdSendCSD>
 800a7c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d001      	beq.n	800a7cc <SD_InitCard+0xdc>
    {
      return errorstate;
 800a7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ca:	e05b      	b.n	800a884 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f001 ffa2 	bl	800c71c <SDIO_GetResponse>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2104      	movs	r1, #4
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f001 ff99 	bl	800c71c <SDIO_GetResponse>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2108      	movs	r1, #8
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f001 ff90 	bl	800c71c <SDIO_GetResponse>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	210c      	movs	r1, #12
 800a808:	4618      	mov	r0, r3
 800a80a:	f001 ff87 	bl	800c71c <SDIO_GetResponse>
 800a80e:	4602      	mov	r2, r0
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2104      	movs	r1, #4
 800a81a:	4618      	mov	r0, r3
 800a81c:	f001 ff7e 	bl	800c71c <SDIO_GetResponse>
 800a820:	4603      	mov	r3, r0
 800a822:	0d1a      	lsrs	r2, r3, #20
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a828:	f107 0310 	add.w	r3, r7, #16
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f7ff fbc6 	bl	8009fc0 <HAL_SD_GetCardCSD>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d002      	beq.n	800a840 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a83a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a83e:	e021      	b.n	800a884 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6819      	ldr	r1, [r3, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a848:	041b      	lsls	r3, r3, #16
 800a84a:	2200      	movs	r2, #0
 800a84c:	461c      	mov	r4, r3
 800a84e:	4615      	mov	r5, r2
 800a850:	4622      	mov	r2, r4
 800a852:	462b      	mov	r3, r5
 800a854:	4608      	mov	r0, r1
 800a856:	f002 f86d 	bl	800c934 <SDMMC_CmdSelDesel>
 800a85a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d001      	beq.n	800a866 <SD_InitCard+0x176>
  {
    return errorstate;
 800a862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a864:	e00e      	b.n	800a884 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681d      	ldr	r5, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	466c      	mov	r4, sp
 800a86e:	f103 0210 	add.w	r2, r3, #16
 800a872:	ca07      	ldmia	r2, {r0, r1, r2}
 800a874:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a878:	3304      	adds	r3, #4
 800a87a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a87c:	4628      	mov	r0, r5
 800a87e:	f001 feb1 	bl	800c5e4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3740      	adds	r7, #64	; 0x40
 800a888:	46bd      	mov	sp, r7
 800a88a:	bdb0      	pop	{r4, r5, r7, pc}

0800a88c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a894:	2300      	movs	r3, #0
 800a896:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a898:	2300      	movs	r3, #0
 800a89a:	617b      	str	r3, [r7, #20]
 800a89c:	2300      	movs	r3, #0
 800a89e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f002 f868 	bl	800c97a <SDMMC_CmdGoIdleState>
 800a8aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	e072      	b.n	800a99c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f002 f87b 	bl	800c9b6 <SDMMC_CmdOperCond>
 800a8c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00d      	beq.n	800a8e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f002 f851 	bl	800c97a <SDMMC_CmdGoIdleState>
 800a8d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d004      	beq.n	800a8ea <SD_PowerON+0x5e>
    {
      return errorstate;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	e05b      	b.n	800a99c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d137      	bne.n	800a962 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f002 f87b 	bl	800c9f4 <SDMMC_CmdAppCommand>
 800a8fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d02d      	beq.n	800a962 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a906:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a90a:	e047      	b.n	800a99c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2100      	movs	r1, #0
 800a912:	4618      	mov	r0, r3
 800a914:	f002 f86e 	bl	800c9f4 <SDMMC_CmdAppCommand>
 800a918:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d001      	beq.n	800a924 <SD_PowerON+0x98>
    {
      return errorstate;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	e03b      	b.n	800a99c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	491e      	ldr	r1, [pc, #120]	; (800a9a4 <SD_PowerON+0x118>)
 800a92a:	4618      	mov	r0, r3
 800a92c:	f002 f884 	bl	800ca38 <SDMMC_CmdAppOperCommand>
 800a930:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d002      	beq.n	800a93e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a938:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a93c:	e02e      	b.n	800a99c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2100      	movs	r1, #0
 800a944:	4618      	mov	r0, r3
 800a946:	f001 fee9 	bl	800c71c <SDIO_GetResponse>
 800a94a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	0fdb      	lsrs	r3, r3, #31
 800a950:	2b01      	cmp	r3, #1
 800a952:	d101      	bne.n	800a958 <SD_PowerON+0xcc>
 800a954:	2301      	movs	r3, #1
 800a956:	e000      	b.n	800a95a <SD_PowerON+0xce>
 800a958:	2300      	movs	r3, #0
 800a95a:	613b      	str	r3, [r7, #16]

    count++;
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	3301      	adds	r3, #1
 800a960:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a968:	4293      	cmp	r3, r2
 800a96a:	d802      	bhi.n	800a972 <SD_PowerON+0xe6>
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d0cc      	beq.n	800a90c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a978:	4293      	cmp	r3, r2
 800a97a:	d902      	bls.n	800a982 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a97c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a980:	e00c      	b.n	800a99c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	645a      	str	r2, [r3, #68]	; 0x44
 800a992:	e002      	b.n	800a99a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a99a:	2300      	movs	r3, #0
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3718      	adds	r7, #24
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	c1100000 	.word	0xc1100000

0800a9a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d102      	bne.n	800a9be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a9b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9bc:	e018      	b.n	800a9f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c6:	041b      	lsls	r3, r3, #16
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	4610      	mov	r0, r2
 800a9cc:	f002 f8f8 	bl	800cbc0 <SDMMC_CmdSendStatus>
 800a9d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d001      	beq.n	800a9dc <SD_SendStatus+0x34>
  {
    return errorstate;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	e009      	b.n	800a9f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f001 fe9a 	bl	800c71c <SDIO_GetResponse>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b086      	sub	sp, #24
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800aa00:	2300      	movs	r3, #0
 800aa02:	60fb      	str	r3, [r7, #12]
 800aa04:	2300      	movs	r3, #0
 800aa06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f001 fe84 	bl	800c71c <SDIO_GetResponse>
 800aa14:	4603      	mov	r3, r0
 800aa16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa1e:	d102      	bne.n	800aa26 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aa20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa24:	e02f      	b.n	800aa86 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aa26:	f107 030c 	add.w	r3, r7, #12
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 f879 	bl	800ab24 <SD_FindSCR>
 800aa32:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d001      	beq.n	800aa3e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	e023      	b.n	800aa86 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d01c      	beq.n	800aa82 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa50:	041b      	lsls	r3, r3, #16
 800aa52:	4619      	mov	r1, r3
 800aa54:	4610      	mov	r0, r2
 800aa56:	f001 ffcd 	bl	800c9f4 <SDMMC_CmdAppCommand>
 800aa5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d001      	beq.n	800aa66 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	e00f      	b.n	800aa86 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2102      	movs	r1, #2
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f002 f806 	bl	800ca7e <SDMMC_CmdBusWidth>
 800aa72:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d001      	beq.n	800aa7e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	e003      	b.n	800aa86 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	e001      	b.n	800aa86 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b086      	sub	sp, #24
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800aa96:	2300      	movs	r3, #0
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f001 fe39 	bl	800c71c <SDIO_GetResponse>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aab4:	d102      	bne.n	800aabc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aab6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aaba:	e02f      	b.n	800ab1c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aabc:	f107 030c 	add.w	r3, r7, #12
 800aac0:	4619      	mov	r1, r3
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 f82e 	bl	800ab24 <SD_FindSCR>
 800aac8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	e023      	b.n	800ab1c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d01c      	beq.n	800ab18 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aae6:	041b      	lsls	r3, r3, #16
 800aae8:	4619      	mov	r1, r3
 800aaea:	4610      	mov	r0, r2
 800aaec:	f001 ff82 	bl	800c9f4 <SDMMC_CmdAppCommand>
 800aaf0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d001      	beq.n	800aafc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	e00f      	b.n	800ab1c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2100      	movs	r1, #0
 800ab02:	4618      	mov	r0, r3
 800ab04:	f001 ffbb 	bl	800ca7e <SDMMC_CmdBusWidth>
 800ab08:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	e003      	b.n	800ab1c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ab14:	2300      	movs	r3, #0
 800ab16:	e001      	b.n	800ab1c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ab18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3718      	adds	r7, #24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ab24:	b590      	push	{r4, r7, lr}
 800ab26:	b08f      	sub	sp, #60	; 0x3c
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ab2e:	f7fb ff4b 	bl	80069c8 <HAL_GetTick>
 800ab32:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ab34:	2300      	movs	r3, #0
 800ab36:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800ab38:	2300      	movs	r3, #0
 800ab3a:	60bb      	str	r3, [r7, #8]
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2108      	movs	r1, #8
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f001 fe25 	bl	800c79a <SDMMC_CmdBlockLength>
 800ab50:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <SD_FindSCR+0x38>
  {
    return errorstate;
 800ab58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5a:	e0b2      	b.n	800acc2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab64:	041b      	lsls	r3, r3, #16
 800ab66:	4619      	mov	r1, r3
 800ab68:	4610      	mov	r0, r2
 800ab6a:	f001 ff43 	bl	800c9f4 <SDMMC_CmdAppCommand>
 800ab6e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d001      	beq.n	800ab7a <SD_FindSCR+0x56>
  {
    return errorstate;
 800ab76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab78:	e0a3      	b.n	800acc2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ab7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab7e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ab80:	2308      	movs	r3, #8
 800ab82:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800ab84:	2330      	movs	r3, #48	; 0x30
 800ab86:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ab88:	2302      	movs	r3, #2
 800ab8a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800ab90:	2301      	movs	r3, #1
 800ab92:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f107 0210 	add.w	r2, r7, #16
 800ab9c:	4611      	mov	r1, r2
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f001 fdcf 	bl	800c742 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4618      	mov	r0, r3
 800abaa:	f001 ff8a 	bl	800cac2 <SDMMC_CmdSendSCR>
 800abae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800abb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d02a      	beq.n	800ac0c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800abb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb8:	e083      	b.n	800acc2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00f      	beq.n	800abe8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6819      	ldr	r1, [r3, #0]
 800abcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abce:	009b      	lsls	r3, r3, #2
 800abd0:	f107 0208 	add.w	r2, r7, #8
 800abd4:	18d4      	adds	r4, r2, r3
 800abd6:	4608      	mov	r0, r1
 800abd8:	f001 fd2f 	bl	800c63a <SDIO_ReadFIFO>
 800abdc:	4603      	mov	r3, r0
 800abde:	6023      	str	r3, [r4, #0]
      index++;
 800abe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe2:	3301      	adds	r3, #1
 800abe4:	637b      	str	r3, [r7, #52]	; 0x34
 800abe6:	e006      	b.n	800abf6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d012      	beq.n	800ac1c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800abf6:	f7fb fee7 	bl	80069c8 <HAL_GetTick>
 800abfa:	4602      	mov	r2, r0
 800abfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac04:	d102      	bne.n	800ac0c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ac06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac0a:	e05a      	b.n	800acc2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac12:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d0cf      	beq.n	800abba <SD_FindSCR+0x96>
 800ac1a:	e000      	b.n	800ac1e <SD_FindSCR+0xfa>
      break;
 800ac1c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac24:	f003 0308 	and.w	r3, r3, #8
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d005      	beq.n	800ac38 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2208      	movs	r2, #8
 800ac32:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ac34:	2308      	movs	r3, #8
 800ac36:	e044      	b.n	800acc2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac3e:	f003 0302 	and.w	r3, r3, #2
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d005      	beq.n	800ac52 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac4e:	2302      	movs	r3, #2
 800ac50:	e037      	b.n	800acc2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac58:	f003 0320 	and.w	r3, r3, #32
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d005      	beq.n	800ac6c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2220      	movs	r2, #32
 800ac66:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ac68:	2320      	movs	r3, #32
 800ac6a:	e02a      	b.n	800acc2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f240 523a 	movw	r2, #1338	; 0x53a
 800ac74:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	061a      	lsls	r2, r3, #24
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	021b      	lsls	r3, r3, #8
 800ac7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac82:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	0a1b      	lsrs	r3, r3, #8
 800ac88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ac8c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	0e1b      	lsrs	r3, r3, #24
 800ac92:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ac94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac96:	601a      	str	r2, [r3, #0]
    scr++;
 800ac98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9a:	3304      	adds	r3, #4
 800ac9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	061a      	lsls	r2, r3, #24
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	021b      	lsls	r3, r3, #8
 800aca6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800acaa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	0a1b      	lsrs	r3, r3, #8
 800acb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800acb4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	0e1b      	lsrs	r3, r3, #24
 800acba:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800acbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acbe:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	373c      	adds	r7, #60	; 0x3c
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd90      	pop	{r4, r7, pc}

0800acca <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b086      	sub	sp, #24
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acdc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d03f      	beq.n	800ad64 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ace4:	2300      	movs	r3, #0
 800ace6:	617b      	str	r3, [r7, #20]
 800ace8:	e033      	b.n	800ad52 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4618      	mov	r0, r3
 800acf0:	f001 fca3 	bl	800c63a <SDIO_ReadFIFO>
 800acf4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	b2da      	uxtb	r2, r3
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	3301      	adds	r3, #1
 800ad02:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	3b01      	subs	r3, #1
 800ad08:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	0a1b      	lsrs	r3, r3, #8
 800ad0e:	b2da      	uxtb	r2, r3
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	3301      	adds	r3, #1
 800ad18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	0c1b      	lsrs	r3, r3, #16
 800ad24:	b2da      	uxtb	r2, r3
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	3b01      	subs	r3, #1
 800ad34:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	0e1b      	lsrs	r3, r3, #24
 800ad3a:	b2da      	uxtb	r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	3301      	adds	r3, #1
 800ad44:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	617b      	str	r3, [r7, #20]
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	2b07      	cmp	r3, #7
 800ad56:	d9c8      	bls.n	800acea <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ad64:	bf00      	nop
 800ad66:	3718      	adds	r7, #24
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a1b      	ldr	r3, [r3, #32]
 800ad78:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d043      	beq.n	800ae0e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800ad86:	2300      	movs	r3, #0
 800ad88:	617b      	str	r3, [r7, #20]
 800ad8a:	e037      	b.n	800adfc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	3301      	adds	r3, #1
 800ad96:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	021a      	lsls	r2, r3, #8
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	60bb      	str	r3, [r7, #8]
      tmp++;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	3301      	adds	r3, #1
 800adae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	3b01      	subs	r3, #1
 800adb4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	041a      	lsls	r2, r3, #16
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3301      	adds	r3, #1
 800adc6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	3b01      	subs	r3, #1
 800adcc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	061a      	lsls	r2, r3, #24
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	4313      	orrs	r3, r2
 800add8:	60bb      	str	r3, [r7, #8]
      tmp++;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	3301      	adds	r3, #1
 800adde:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	3b01      	subs	r3, #1
 800ade4:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f107 0208 	add.w	r2, r7, #8
 800adee:	4611      	mov	r1, r2
 800adf0:	4618      	mov	r0, r3
 800adf2:	f001 fc2f 	bl	800c654 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	3301      	adds	r3, #1
 800adfa:	617b      	str	r3, [r7, #20]
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	2b07      	cmp	r3, #7
 800ae00:	d9c4      	bls.n	800ad8c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	693a      	ldr	r2, [r7, #16]
 800ae0c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ae0e:	bf00      	nop
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b082      	sub	sp, #8
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d101      	bne.n	800ae28 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	e07b      	b.n	800af20 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d108      	bne.n	800ae42 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae38:	d009      	beq.n	800ae4e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	61da      	str	r2, [r3, #28]
 800ae40:	e005      	b.n	800ae4e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d106      	bne.n	800ae6e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7fb fa19 	bl	80062a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2202      	movs	r2, #2
 800ae72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ae96:	431a      	orrs	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aea0:	431a      	orrs	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	f003 0302 	and.w	r3, r3, #2
 800aeaa:	431a      	orrs	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	695b      	ldr	r3, [r3, #20]
 800aeb0:	f003 0301 	and.w	r3, r3, #1
 800aeb4:	431a      	orrs	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	699b      	ldr	r3, [r3, #24]
 800aeba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aebe:	431a      	orrs	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	69db      	ldr	r3, [r3, #28]
 800aec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aec8:	431a      	orrs	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aed2:	ea42 0103 	orr.w	r1, r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	430a      	orrs	r2, r1
 800aee4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	0c1b      	lsrs	r3, r3, #16
 800aeec:	f003 0104 	and.w	r1, r3, #4
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef4:	f003 0210 	and.w	r2, r3, #16
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	430a      	orrs	r2, r1
 800aefe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	69da      	ldr	r2, [r3, #28]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2201      	movs	r2, #1
 800af1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b088      	sub	sp, #32
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	603b      	str	r3, [r7, #0]
 800af34:	4613      	mov	r3, r2
 800af36:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af38:	2300      	movs	r3, #0
 800af3a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800af42:	2b01      	cmp	r3, #1
 800af44:	d101      	bne.n	800af4a <HAL_SPI_Transmit+0x22>
 800af46:	2302      	movs	r3, #2
 800af48:	e126      	b.n	800b198 <HAL_SPI_Transmit+0x270>
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af52:	f7fb fd39 	bl	80069c8 <HAL_GetTick>
 800af56:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800af58:	88fb      	ldrh	r3, [r7, #6]
 800af5a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b01      	cmp	r3, #1
 800af66:	d002      	beq.n	800af6e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800af68:	2302      	movs	r3, #2
 800af6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800af6c:	e10b      	b.n	800b186 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <HAL_SPI_Transmit+0x52>
 800af74:	88fb      	ldrh	r3, [r7, #6]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d102      	bne.n	800af80 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800af7a:	2301      	movs	r3, #1
 800af7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800af7e:	e102      	b.n	800b186 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2203      	movs	r2, #3
 800af84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2200      	movs	r2, #0
 800af8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	88fa      	ldrh	r2, [r7, #6]
 800af98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	88fa      	ldrh	r2, [r7, #6]
 800af9e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2200      	movs	r2, #0
 800afa4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2200      	movs	r2, #0
 800afbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afc6:	d10f      	bne.n	800afe8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800afe6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aff2:	2b40      	cmp	r3, #64	; 0x40
 800aff4:	d007      	beq.n	800b006 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b004:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b00e:	d14b      	bne.n	800b0a8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d002      	beq.n	800b01e <HAL_SPI_Transmit+0xf6>
 800b018:	8afb      	ldrh	r3, [r7, #22]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d13e      	bne.n	800b09c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b022:	881a      	ldrh	r2, [r3, #0]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02e:	1c9a      	adds	r2, r3, #2
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b038:	b29b      	uxth	r3, r3
 800b03a:	3b01      	subs	r3, #1
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b042:	e02b      	b.n	800b09c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	f003 0302 	and.w	r3, r3, #2
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d112      	bne.n	800b078 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b056:	881a      	ldrh	r2, [r3, #0]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b062:	1c9a      	adds	r2, r3, #2
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	3b01      	subs	r3, #1
 800b070:	b29a      	uxth	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	86da      	strh	r2, [r3, #54]	; 0x36
 800b076:	e011      	b.n	800b09c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b078:	f7fb fca6 	bl	80069c8 <HAL_GetTick>
 800b07c:	4602      	mov	r2, r0
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	683a      	ldr	r2, [r7, #0]
 800b084:	429a      	cmp	r2, r3
 800b086:	d803      	bhi.n	800b090 <HAL_SPI_Transmit+0x168>
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b08e:	d102      	bne.n	800b096 <HAL_SPI_Transmit+0x16e>
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d102      	bne.n	800b09c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b096:	2303      	movs	r3, #3
 800b098:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b09a:	e074      	b.n	800b186 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1ce      	bne.n	800b044 <HAL_SPI_Transmit+0x11c>
 800b0a6:	e04c      	b.n	800b142 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d002      	beq.n	800b0b6 <HAL_SPI_Transmit+0x18e>
 800b0b0:	8afb      	ldrh	r3, [r7, #22]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d140      	bne.n	800b138 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	330c      	adds	r3, #12
 800b0c0:	7812      	ldrb	r2, [r2, #0]
 800b0c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c8:	1c5a      	adds	r2, r3, #1
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b0dc:	e02c      	b.n	800b138 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	f003 0302 	and.w	r3, r3, #2
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	d113      	bne.n	800b114 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	330c      	adds	r3, #12
 800b0f6:	7812      	ldrb	r2, [r2, #0]
 800b0f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fe:	1c5a      	adds	r2, r3, #1
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b108:	b29b      	uxth	r3, r3
 800b10a:	3b01      	subs	r3, #1
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	86da      	strh	r2, [r3, #54]	; 0x36
 800b112:	e011      	b.n	800b138 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b114:	f7fb fc58 	bl	80069c8 <HAL_GetTick>
 800b118:	4602      	mov	r2, r0
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	429a      	cmp	r2, r3
 800b122:	d803      	bhi.n	800b12c <HAL_SPI_Transmit+0x204>
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b12a:	d102      	bne.n	800b132 <HAL_SPI_Transmit+0x20a>
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d102      	bne.n	800b138 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b132:	2303      	movs	r3, #3
 800b134:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b136:	e026      	b.n	800b186 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1cd      	bne.n	800b0de <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b142:	69ba      	ldr	r2, [r7, #24]
 800b144:	6839      	ldr	r1, [r7, #0]
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f000 fbcc 	bl	800b8e4 <SPI_EndRxTxTransaction>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d002      	beq.n	800b158 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2220      	movs	r2, #32
 800b156:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10a      	bne.n	800b176 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b160:	2300      	movs	r3, #0
 800b162:	613b      	str	r3, [r7, #16]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	613b      	str	r3, [r7, #16]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	613b      	str	r3, [r7, #16]
 800b174:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d002      	beq.n	800b184 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	77fb      	strb	r3, [r7, #31]
 800b182:	e000      	b.n	800b186 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b184:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2201      	movs	r2, #1
 800b18a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b196:	7ffb      	ldrb	r3, [r7, #31]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3720      	adds	r7, #32
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b088      	sub	sp, #32
 800b1a4:	af02      	add	r7, sp, #8
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	603b      	str	r3, [r7, #0]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1bc:	d112      	bne.n	800b1e4 <HAL_SPI_Receive+0x44>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10e      	bne.n	800b1e4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2204      	movs	r2, #4
 800b1ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b1ce:	88fa      	ldrh	r2, [r7, #6]
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	68ba      	ldr	r2, [r7, #8]
 800b1d8:	68b9      	ldr	r1, [r7, #8]
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f000 f8f1 	bl	800b3c2 <HAL_SPI_TransmitReceive>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	e0ea      	b.n	800b3ba <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d101      	bne.n	800b1f2 <HAL_SPI_Receive+0x52>
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	e0e3      	b.n	800b3ba <HAL_SPI_Receive+0x21a>
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b1fa:	f7fb fbe5 	bl	80069c8 <HAL_GetTick>
 800b1fe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b206:	b2db      	uxtb	r3, r3
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d002      	beq.n	800b212 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b20c:	2302      	movs	r3, #2
 800b20e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b210:	e0ca      	b.n	800b3a8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d002      	beq.n	800b21e <HAL_SPI_Receive+0x7e>
 800b218:	88fb      	ldrh	r3, [r7, #6]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d102      	bne.n	800b224 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b222:	e0c1      	b.n	800b3a8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2204      	movs	r2, #4
 800b228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	88fa      	ldrh	r2, [r7, #6]
 800b23c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	88fa      	ldrh	r2, [r7, #6]
 800b242:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2200      	movs	r2, #0
 800b24e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b26a:	d10f      	bne.n	800b28c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b27a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b28a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b296:	2b40      	cmp	r3, #64	; 0x40
 800b298:	d007      	beq.n	800b2aa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d162      	bne.n	800b378 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b2b2:	e02e      	b.n	800b312 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d115      	bne.n	800b2ee <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f103 020c 	add.w	r2, r3, #12
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ce:	7812      	ldrb	r2, [r2, #0]
 800b2d0:	b2d2      	uxtb	r2, r2
 800b2d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d8:	1c5a      	adds	r2, r3, #1
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b2ec:	e011      	b.n	800b312 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b2ee:	f7fb fb6b 	bl	80069c8 <HAL_GetTick>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	1ad3      	subs	r3, r2, r3
 800b2f8:	683a      	ldr	r2, [r7, #0]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d803      	bhi.n	800b306 <HAL_SPI_Receive+0x166>
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b304:	d102      	bne.n	800b30c <HAL_SPI_Receive+0x16c>
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d102      	bne.n	800b312 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b30c:	2303      	movs	r3, #3
 800b30e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b310:	e04a      	b.n	800b3a8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b316:	b29b      	uxth	r3, r3
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1cb      	bne.n	800b2b4 <HAL_SPI_Receive+0x114>
 800b31c:	e031      	b.n	800b382 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	f003 0301 	and.w	r3, r3, #1
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d113      	bne.n	800b354 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68da      	ldr	r2, [r3, #12]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b336:	b292      	uxth	r2, r2
 800b338:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b33e:	1c9a      	adds	r2, r3, #2
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b348:	b29b      	uxth	r3, r3
 800b34a:	3b01      	subs	r3, #1
 800b34c:	b29a      	uxth	r2, r3
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b352:	e011      	b.n	800b378 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b354:	f7fb fb38 	bl	80069c8 <HAL_GetTick>
 800b358:	4602      	mov	r2, r0
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	429a      	cmp	r2, r3
 800b362:	d803      	bhi.n	800b36c <HAL_SPI_Receive+0x1cc>
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b36a:	d102      	bne.n	800b372 <HAL_SPI_Receive+0x1d2>
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d102      	bne.n	800b378 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b372:	2303      	movs	r3, #3
 800b374:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b376:	e017      	b.n	800b3a8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d1cd      	bne.n	800b31e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f000 fa46 	bl	800b818 <SPI_EndRxTransaction>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d002      	beq.n	800b398 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2220      	movs	r2, #32
 800b396:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d002      	beq.n	800b3a6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	75fb      	strb	r3, [r7, #23]
 800b3a4:	e000      	b.n	800b3a8 <HAL_SPI_Receive+0x208>
  }

error :
 800b3a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b3b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3718      	adds	r7, #24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b08c      	sub	sp, #48	; 0x30
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	60f8      	str	r0, [r7, #12]
 800b3ca:	60b9      	str	r1, [r7, #8]
 800b3cc:	607a      	str	r2, [r7, #4]
 800b3ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d101      	bne.n	800b3e8 <HAL_SPI_TransmitReceive+0x26>
 800b3e4:	2302      	movs	r3, #2
 800b3e6:	e18a      	b.n	800b6fe <HAL_SPI_TransmitReceive+0x33c>
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b3f0:	f7fb faea 	bl	80069c8 <HAL_GetTick>
 800b3f4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b3fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b406:	887b      	ldrh	r3, [r7, #2]
 800b408:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b40a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d00f      	beq.n	800b432 <HAL_SPI_TransmitReceive+0x70>
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b418:	d107      	bne.n	800b42a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d103      	bne.n	800b42a <HAL_SPI_TransmitReceive+0x68>
 800b422:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b426:	2b04      	cmp	r3, #4
 800b428:	d003      	beq.n	800b432 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b42a:	2302      	movs	r3, #2
 800b42c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b430:	e15b      	b.n	800b6ea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d005      	beq.n	800b444 <HAL_SPI_TransmitReceive+0x82>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d002      	beq.n	800b444 <HAL_SPI_TransmitReceive+0x82>
 800b43e:	887b      	ldrh	r3, [r7, #2]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d103      	bne.n	800b44c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b44a:	e14e      	b.n	800b6ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b04      	cmp	r3, #4
 800b456:	d003      	beq.n	800b460 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2205      	movs	r2, #5
 800b45c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	887a      	ldrh	r2, [r7, #2]
 800b470:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	887a      	ldrh	r2, [r7, #2]
 800b476:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	887a      	ldrh	r2, [r7, #2]
 800b482:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	887a      	ldrh	r2, [r7, #2]
 800b488:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4a0:	2b40      	cmp	r3, #64	; 0x40
 800b4a2:	d007      	beq.n	800b4b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4bc:	d178      	bne.n	800b5b0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d002      	beq.n	800b4cc <HAL_SPI_TransmitReceive+0x10a>
 800b4c6:	8b7b      	ldrh	r3, [r7, #26]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d166      	bne.n	800b59a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d0:	881a      	ldrh	r2, [r3, #0]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4dc:	1c9a      	adds	r2, r3, #2
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b4f0:	e053      	b.n	800b59a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	f003 0302 	and.w	r3, r3, #2
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	d11b      	bne.n	800b538 <HAL_SPI_TransmitReceive+0x176>
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b504:	b29b      	uxth	r3, r3
 800b506:	2b00      	cmp	r3, #0
 800b508:	d016      	beq.n	800b538 <HAL_SPI_TransmitReceive+0x176>
 800b50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d113      	bne.n	800b538 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b514:	881a      	ldrh	r2, [r3, #0]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b520:	1c9a      	adds	r2, r3, #2
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	3b01      	subs	r3, #1
 800b52e:	b29a      	uxth	r2, r3
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b534:	2300      	movs	r3, #0
 800b536:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	f003 0301 	and.w	r3, r3, #1
 800b542:	2b01      	cmp	r3, #1
 800b544:	d119      	bne.n	800b57a <HAL_SPI_TransmitReceive+0x1b8>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d014      	beq.n	800b57a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	68da      	ldr	r2, [r3, #12]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b55a:	b292      	uxth	r2, r2
 800b55c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b562:	1c9a      	adds	r2, r3, #2
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	3b01      	subs	r3, #1
 800b570:	b29a      	uxth	r2, r3
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b576:	2301      	movs	r3, #1
 800b578:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b57a:	f7fb fa25 	bl	80069c8 <HAL_GetTick>
 800b57e:	4602      	mov	r2, r0
 800b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b582:	1ad3      	subs	r3, r2, r3
 800b584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b586:	429a      	cmp	r2, r3
 800b588:	d807      	bhi.n	800b59a <HAL_SPI_TransmitReceive+0x1d8>
 800b58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b590:	d003      	beq.n	800b59a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b592:	2303      	movs	r3, #3
 800b594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b598:	e0a7      	b.n	800b6ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d1a6      	bne.n	800b4f2 <HAL_SPI_TransmitReceive+0x130>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d1a1      	bne.n	800b4f2 <HAL_SPI_TransmitReceive+0x130>
 800b5ae:	e07c      	b.n	800b6aa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d002      	beq.n	800b5be <HAL_SPI_TransmitReceive+0x1fc>
 800b5b8:	8b7b      	ldrh	r3, [r7, #26]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d16b      	bne.n	800b696 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	330c      	adds	r3, #12
 800b5c8:	7812      	ldrb	r2, [r2, #0]
 800b5ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b5e4:	e057      	b.n	800b696 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	f003 0302 	and.w	r3, r3, #2
 800b5f0:	2b02      	cmp	r3, #2
 800b5f2:	d11c      	bne.n	800b62e <HAL_SPI_TransmitReceive+0x26c>
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d017      	beq.n	800b62e <HAL_SPI_TransmitReceive+0x26c>
 800b5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b600:	2b01      	cmp	r3, #1
 800b602:	d114      	bne.n	800b62e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	330c      	adds	r3, #12
 800b60e:	7812      	ldrb	r2, [r2, #0]
 800b610:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b616:	1c5a      	adds	r2, r3, #1
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b620:	b29b      	uxth	r3, r3
 800b622:	3b01      	subs	r3, #1
 800b624:	b29a      	uxth	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b62a:	2300      	movs	r3, #0
 800b62c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	f003 0301 	and.w	r3, r3, #1
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d119      	bne.n	800b670 <HAL_SPI_TransmitReceive+0x2ae>
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b640:	b29b      	uxth	r3, r3
 800b642:	2b00      	cmp	r3, #0
 800b644:	d014      	beq.n	800b670 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68da      	ldr	r2, [r3, #12]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b650:	b2d2      	uxtb	r2, r2
 800b652:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b658:	1c5a      	adds	r2, r3, #1
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b662:	b29b      	uxth	r3, r3
 800b664:	3b01      	subs	r3, #1
 800b666:	b29a      	uxth	r2, r3
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b66c:	2301      	movs	r3, #1
 800b66e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b670:	f7fb f9aa 	bl	80069c8 <HAL_GetTick>
 800b674:	4602      	mov	r2, r0
 800b676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d803      	bhi.n	800b688 <HAL_SPI_TransmitReceive+0x2c6>
 800b680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b686:	d102      	bne.n	800b68e <HAL_SPI_TransmitReceive+0x2cc>
 800b688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d103      	bne.n	800b696 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b68e:	2303      	movs	r3, #3
 800b690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b694:	e029      	b.n	800b6ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1a2      	bne.n	800b5e6 <HAL_SPI_TransmitReceive+0x224>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d19d      	bne.n	800b5e6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b6aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f000 f918 	bl	800b8e4 <SPI_EndRxTxTransaction>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d006      	beq.n	800b6c8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2220      	movs	r2, #32
 800b6c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b6c6:	e010      	b.n	800b6ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d10b      	bne.n	800b6e8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	617b      	str	r3, [r7, #20]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	617b      	str	r3, [r7, #20]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	617b      	str	r3, [r7, #20]
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	e000      	b.n	800b6ea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b6e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b6fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3730      	adds	r7, #48	; 0x30
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
	...

0800b708 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b088      	sub	sp, #32
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	603b      	str	r3, [r7, #0]
 800b714:	4613      	mov	r3, r2
 800b716:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b718:	f7fb f956 	bl	80069c8 <HAL_GetTick>
 800b71c:	4602      	mov	r2, r0
 800b71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b720:	1a9b      	subs	r3, r3, r2
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	4413      	add	r3, r2
 800b726:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b728:	f7fb f94e 	bl	80069c8 <HAL_GetTick>
 800b72c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b72e:	4b39      	ldr	r3, [pc, #228]	; (800b814 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	015b      	lsls	r3, r3, #5
 800b734:	0d1b      	lsrs	r3, r3, #20
 800b736:	69fa      	ldr	r2, [r7, #28]
 800b738:	fb02 f303 	mul.w	r3, r2, r3
 800b73c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b73e:	e054      	b.n	800b7ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b746:	d050      	beq.n	800b7ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b748:	f7fb f93e 	bl	80069c8 <HAL_GetTick>
 800b74c:	4602      	mov	r2, r0
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	69fa      	ldr	r2, [r7, #28]
 800b754:	429a      	cmp	r2, r3
 800b756:	d902      	bls.n	800b75e <SPI_WaitFlagStateUntilTimeout+0x56>
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d13d      	bne.n	800b7da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b76c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b776:	d111      	bne.n	800b79c <SPI_WaitFlagStateUntilTimeout+0x94>
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	689b      	ldr	r3, [r3, #8]
 800b77c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b780:	d004      	beq.n	800b78c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b78a:	d107      	bne.n	800b79c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b79a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7a4:	d10f      	bne.n	800b7c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b7b4:	601a      	str	r2, [r3, #0]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b7c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	e017      	b.n	800b80a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d101      	bne.n	800b7e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	689a      	ldr	r2, [r3, #8]
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	4013      	ands	r3, r2
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	bf0c      	ite	eq
 800b7fa:	2301      	moveq	r3, #1
 800b7fc:	2300      	movne	r3, #0
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	461a      	mov	r2, r3
 800b802:	79fb      	ldrb	r3, [r7, #7]
 800b804:	429a      	cmp	r2, r3
 800b806:	d19b      	bne.n	800b740 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b808:	2300      	movs	r3, #0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3720      	adds	r7, #32
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	20000000 	.word	0x20000000

0800b818 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b086      	sub	sp, #24
 800b81c:	af02      	add	r7, sp, #8
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b82c:	d111      	bne.n	800b852 <SPI_EndRxTransaction+0x3a>
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b836:	d004      	beq.n	800b842 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b840:	d107      	bne.n	800b852 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b850:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b85a:	d12a      	bne.n	800b8b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b864:	d012      	beq.n	800b88c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	9300      	str	r3, [sp, #0]
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	2200      	movs	r2, #0
 800b86e:	2180      	movs	r1, #128	; 0x80
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f7ff ff49 	bl	800b708 <SPI_WaitFlagStateUntilTimeout>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d02d      	beq.n	800b8d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b880:	f043 0220 	orr.w	r2, r3, #32
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b888:	2303      	movs	r3, #3
 800b88a:	e026      	b.n	800b8da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	2200      	movs	r2, #0
 800b894:	2101      	movs	r1, #1
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f7ff ff36 	bl	800b708 <SPI_WaitFlagStateUntilTimeout>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d01a      	beq.n	800b8d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8a6:	f043 0220 	orr.w	r2, r3, #32
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b8ae:	2303      	movs	r3, #3
 800b8b0:	e013      	b.n	800b8da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	9300      	str	r3, [sp, #0]
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	2101      	movs	r1, #1
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f7ff ff23 	bl	800b708 <SPI_WaitFlagStateUntilTimeout>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d007      	beq.n	800b8d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8cc:	f043 0220 	orr.w	r2, r3, #32
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b8d4:	2303      	movs	r3, #3
 800b8d6:	e000      	b.n	800b8da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
	...

0800b8e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b088      	sub	sp, #32
 800b8e8:	af02      	add	r7, sp, #8
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b8f0:	4b1b      	ldr	r3, [pc, #108]	; (800b960 <SPI_EndRxTxTransaction+0x7c>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4a1b      	ldr	r2, [pc, #108]	; (800b964 <SPI_EndRxTxTransaction+0x80>)
 800b8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b8fa:	0d5b      	lsrs	r3, r3, #21
 800b8fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b900:	fb02 f303 	mul.w	r3, r2, r3
 800b904:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b90e:	d112      	bne.n	800b936 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	2200      	movs	r2, #0
 800b918:	2180      	movs	r1, #128	; 0x80
 800b91a:	68f8      	ldr	r0, [r7, #12]
 800b91c:	f7ff fef4 	bl	800b708 <SPI_WaitFlagStateUntilTimeout>
 800b920:	4603      	mov	r3, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d016      	beq.n	800b954 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92a:	f043 0220 	orr.w	r2, r3, #32
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b932:	2303      	movs	r3, #3
 800b934:	e00f      	b.n	800b956 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00a      	beq.n	800b952 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	3b01      	subs	r3, #1
 800b940:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b94c:	2b80      	cmp	r3, #128	; 0x80
 800b94e:	d0f2      	beq.n	800b936 <SPI_EndRxTxTransaction+0x52>
 800b950:	e000      	b.n	800b954 <SPI_EndRxTxTransaction+0x70>
        break;
 800b952:	bf00      	nop
  }

  return HAL_OK;
 800b954:	2300      	movs	r3, #0
}
 800b956:	4618      	mov	r0, r3
 800b958:	3718      	adds	r7, #24
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	20000000 	.word	0x20000000
 800b964:	165e9f81 	.word	0x165e9f81

0800b968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d101      	bne.n	800b97a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b976:	2301      	movs	r3, #1
 800b978:	e03f      	b.n	800b9fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b980:	b2db      	uxtb	r3, r3
 800b982:	2b00      	cmp	r3, #0
 800b984:	d106      	bne.n	800b994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7fa fd24 	bl	80063dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2224      	movs	r2, #36	; 0x24
 800b998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68da      	ldr	r2, [r3, #12]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b9aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fba5 	bl	800c0fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	691a      	ldr	r2, [r3, #16]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	695a      	ldr	r2, [r3, #20]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	68da      	ldr	r2, [r3, #12]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b9e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2220      	movs	r2, #32
 800b9ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2220      	movs	r2, #32
 800b9f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3708      	adds	r7, #8
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b08a      	sub	sp, #40	; 0x28
 800ba06:	af02      	add	r7, sp, #8
 800ba08:	60f8      	str	r0, [r7, #12]
 800ba0a:	60b9      	str	r1, [r7, #8]
 800ba0c:	603b      	str	r3, [r7, #0]
 800ba0e:	4613      	mov	r3, r2
 800ba10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ba12:	2300      	movs	r3, #0
 800ba14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b20      	cmp	r3, #32
 800ba20:	d17c      	bne.n	800bb1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d002      	beq.n	800ba2e <HAL_UART_Transmit+0x2c>
 800ba28:	88fb      	ldrh	r3, [r7, #6]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d101      	bne.n	800ba32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e075      	b.n	800bb1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d101      	bne.n	800ba40 <HAL_UART_Transmit+0x3e>
 800ba3c:	2302      	movs	r3, #2
 800ba3e:	e06e      	b.n	800bb1e <HAL_UART_Transmit+0x11c>
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2221      	movs	r2, #33	; 0x21
 800ba52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba56:	f7fa ffb7 	bl	80069c8 <HAL_GetTick>
 800ba5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	88fa      	ldrh	r2, [r7, #6]
 800ba60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	88fa      	ldrh	r2, [r7, #6]
 800ba66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba70:	d108      	bne.n	800ba84 <HAL_UART_Transmit+0x82>
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d104      	bne.n	800ba84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	61bb      	str	r3, [r7, #24]
 800ba82:	e003      	b.n	800ba8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ba94:	e02a      	b.n	800baec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	2180      	movs	r1, #128	; 0x80
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 f992 	bl	800bdca <UART_WaitOnFlagUntilTimeout>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d001      	beq.n	800bab0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800baac:	2303      	movs	r3, #3
 800baae:	e036      	b.n	800bb1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d10b      	bne.n	800bace <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bab6:	69bb      	ldr	r3, [r7, #24]
 800bab8:	881b      	ldrh	r3, [r3, #0]
 800baba:	461a      	mov	r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bac4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	3302      	adds	r3, #2
 800baca:	61bb      	str	r3, [r7, #24]
 800bacc:	e007      	b.n	800bade <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	781a      	ldrb	r2, [r3, #0]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	3301      	adds	r3, #1
 800badc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	3b01      	subs	r3, #1
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1cf      	bne.n	800ba96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	2200      	movs	r2, #0
 800bafe:	2140      	movs	r1, #64	; 0x40
 800bb00:	68f8      	ldr	r0, [r7, #12]
 800bb02:	f000 f962 	bl	800bdca <UART_WaitOnFlagUntilTimeout>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d001      	beq.n	800bb10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	e006      	b.n	800bb1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2220      	movs	r2, #32
 800bb14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	e000      	b.n	800bb1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bb1c:	2302      	movs	r3, #2
  }
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3720      	adds	r7, #32
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b084      	sub	sp, #16
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	60f8      	str	r0, [r7, #12]
 800bb2e:	60b9      	str	r1, [r7, #8]
 800bb30:	4613      	mov	r3, r2
 800bb32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	2b20      	cmp	r3, #32
 800bb3e:	d11d      	bne.n	800bb7c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d002      	beq.n	800bb4c <HAL_UART_Receive_DMA+0x26>
 800bb46:	88fb      	ldrh	r3, [r7, #6]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d101      	bne.n	800bb50 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e016      	b.n	800bb7e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d101      	bne.n	800bb5e <HAL_UART_Receive_DMA+0x38>
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	e00f      	b.n	800bb7e <HAL_UART_Receive_DMA+0x58>
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bb6c:	88fb      	ldrh	r3, [r7, #6]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	68b9      	ldr	r1, [r7, #8]
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	f000 f998 	bl	800bea8 <UART_Start_Receive_DMA>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	e000      	b.n	800bb7e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bb7c:	2302      	movs	r3, #2
  }
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb86:	b480      	push	{r7}
 800bb88:	b083      	sub	sp, #12
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bb8e:	bf00      	nop
 800bb90:	370c      	adds	r7, #12
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb9a:	b480      	push	{r7}
 800bb9c:	b083      	sub	sp, #12
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bba2:	bf00      	nop
 800bba4:	370c      	adds	r7, #12
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bbae:	b480      	push	{r7}
 800bbb0:	b083      	sub	sp, #12
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bbb6:	bf00      	nop
 800bbb8:	370c      	adds	r7, #12
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr

0800bbc2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	b083      	sub	sp, #12
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
 800bbca:	460b      	mov	r3, r1
 800bbcc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bbce:	bf00      	nop
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b09c      	sub	sp, #112	; 0x70
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d172      	bne.n	800bcdc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800bbf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	330c      	adds	r3, #12
 800bc02:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc06:	e853 3f00 	ldrex	r3, [r3]
 800bc0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bc0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc12:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	330c      	adds	r3, #12
 800bc1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc1c:	65ba      	str	r2, [r7, #88]	; 0x58
 800bc1e:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc24:	e841 2300 	strex	r3, r2, [r1]
 800bc28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bc2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d1e5      	bne.n	800bbfc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	3314      	adds	r3, #20
 800bc36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3a:	e853 3f00 	ldrex	r3, [r3]
 800bc3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc42:	f023 0301 	bic.w	r3, r3, #1
 800bc46:	667b      	str	r3, [r7, #100]	; 0x64
 800bc48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	3314      	adds	r3, #20
 800bc4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc50:	647a      	str	r2, [r7, #68]	; 0x44
 800bc52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc58:	e841 2300 	strex	r3, r2, [r1]
 800bc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d1e5      	bne.n	800bc30 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	3314      	adds	r3, #20
 800bc6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6e:	e853 3f00 	ldrex	r3, [r3]
 800bc72:	623b      	str	r3, [r7, #32]
   return(result);
 800bc74:	6a3b      	ldr	r3, [r7, #32]
 800bc76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc7a:	663b      	str	r3, [r7, #96]	; 0x60
 800bc7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	3314      	adds	r3, #20
 800bc82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc84:	633a      	str	r2, [r7, #48]	; 0x30
 800bc86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc8c:	e841 2300 	strex	r3, r2, [r1]
 800bc90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1e5      	bne.n	800bc64 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bc98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc9a:	2220      	movs	r2, #32
 800bc9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d119      	bne.n	800bcdc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	330c      	adds	r3, #12
 800bcae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	e853 3f00 	ldrex	r3, [r3]
 800bcb6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f023 0310 	bic.w	r3, r3, #16
 800bcbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	330c      	adds	r3, #12
 800bcc6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bcc8:	61fa      	str	r2, [r7, #28]
 800bcca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bccc:	69b9      	ldr	r1, [r7, #24]
 800bcce:	69fa      	ldr	r2, [r7, #28]
 800bcd0:	e841 2300 	strex	r3, r2, [r1]
 800bcd4:	617b      	str	r3, [r7, #20]
   return(result);
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1e5      	bne.n	800bca8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d106      	bne.n	800bcf2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bce6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bce8:	4619      	mov	r1, r3
 800bcea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bcec:	f7ff ff69 	bl	800bbc2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bcf0:	e002      	b.n	800bcf8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800bcf2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bcf4:	f7ff ff47 	bl	800bb86 <HAL_UART_RxCpltCallback>
}
 800bcf8:	bf00      	nop
 800bcfa:	3770      	adds	r7, #112	; 0x70
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d108      	bne.n	800bd28 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bd1a:	085b      	lsrs	r3, r3, #1
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	4619      	mov	r1, r3
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f7ff ff4e 	bl	800bbc2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bd26:	e002      	b.n	800bd2e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f7ff ff36 	bl	800bb9a <HAL_UART_RxHalfCpltCallback>
}
 800bd2e:	bf00      	nop
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b084      	sub	sp, #16
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd46:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	695b      	ldr	r3, [r3, #20]
 800bd4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd52:	2b80      	cmp	r3, #128	; 0x80
 800bd54:	bf0c      	ite	eq
 800bd56:	2301      	moveq	r3, #1
 800bd58:	2300      	movne	r3, #0
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	2b21      	cmp	r3, #33	; 0x21
 800bd68:	d108      	bne.n	800bd7c <UART_DMAError+0x46>
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d005      	beq.n	800bd7c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2200      	movs	r2, #0
 800bd74:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bd76:	68b8      	ldr	r0, [r7, #8]
 800bd78:	f000 f934 	bl	800bfe4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	695b      	ldr	r3, [r3, #20]
 800bd82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd86:	2b40      	cmp	r3, #64	; 0x40
 800bd88:	bf0c      	ite	eq
 800bd8a:	2301      	moveq	r3, #1
 800bd8c:	2300      	movne	r3, #0
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	2b22      	cmp	r3, #34	; 0x22
 800bd9c:	d108      	bne.n	800bdb0 <UART_DMAError+0x7a>
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d005      	beq.n	800bdb0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	2200      	movs	r2, #0
 800bda8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bdaa:	68b8      	ldr	r0, [r7, #8]
 800bdac:	f000 f942 	bl	800c034 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb4:	f043 0210 	orr.w	r2, r3, #16
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bdbc:	68b8      	ldr	r0, [r7, #8]
 800bdbe:	f7ff fef6 	bl	800bbae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdc2:	bf00      	nop
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b090      	sub	sp, #64	; 0x40
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	60f8      	str	r0, [r7, #12]
 800bdd2:	60b9      	str	r1, [r7, #8]
 800bdd4:	603b      	str	r3, [r7, #0]
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdda:	e050      	b.n	800be7e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde2:	d04c      	beq.n	800be7e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bde4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d007      	beq.n	800bdfa <UART_WaitOnFlagUntilTimeout+0x30>
 800bdea:	f7fa fded 	bl	80069c8 <HAL_GetTick>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	1ad3      	subs	r3, r2, r3
 800bdf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d241      	bcs.n	800be7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	330c      	adds	r3, #12
 800be00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be04:	e853 3f00 	ldrex	r3, [r3]
 800be08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800be10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	330c      	adds	r3, #12
 800be18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be1a:	637a      	str	r2, [r7, #52]	; 0x34
 800be1c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be22:	e841 2300 	strex	r3, r2, [r1]
 800be26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800be28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d1e5      	bne.n	800bdfa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	3314      	adds	r3, #20
 800be34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	e853 3f00 	ldrex	r3, [r3]
 800be3c:	613b      	str	r3, [r7, #16]
   return(result);
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	f023 0301 	bic.w	r3, r3, #1
 800be44:	63bb      	str	r3, [r7, #56]	; 0x38
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	3314      	adds	r3, #20
 800be4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be4e:	623a      	str	r2, [r7, #32]
 800be50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be52:	69f9      	ldr	r1, [r7, #28]
 800be54:	6a3a      	ldr	r2, [r7, #32]
 800be56:	e841 2300 	strex	r3, r2, [r1]
 800be5a:	61bb      	str	r3, [r7, #24]
   return(result);
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1e5      	bne.n	800be2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2220      	movs	r2, #32
 800be66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2220      	movs	r2, #32
 800be6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800be7a:	2303      	movs	r3, #3
 800be7c:	e00f      	b.n	800be9e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	4013      	ands	r3, r2
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	bf0c      	ite	eq
 800be8e:	2301      	moveq	r3, #1
 800be90:	2300      	movne	r3, #0
 800be92:	b2db      	uxtb	r3, r3
 800be94:	461a      	mov	r2, r3
 800be96:	79fb      	ldrb	r3, [r7, #7]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d09f      	beq.n	800bddc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3740      	adds	r7, #64	; 0x40
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
	...

0800bea8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b098      	sub	sp, #96	; 0x60
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	4613      	mov	r3, r2
 800beb4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800beb6:	68ba      	ldr	r2, [r7, #8]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	88fa      	ldrh	r2, [r7, #6]
 800bec0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2200      	movs	r2, #0
 800bec6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2222      	movs	r2, #34	; 0x22
 800becc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed4:	4a40      	ldr	r2, [pc, #256]	; (800bfd8 <UART_Start_Receive_DMA+0x130>)
 800bed6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bedc:	4a3f      	ldr	r2, [pc, #252]	; (800bfdc <UART_Start_Receive_DMA+0x134>)
 800bede:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee4:	4a3e      	ldr	r2, [pc, #248]	; (800bfe0 <UART_Start_Receive_DMA+0x138>)
 800bee6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beec:	2200      	movs	r2, #0
 800beee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bef0:	f107 0308 	add.w	r3, r7, #8
 800bef4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	3304      	adds	r3, #4
 800bf00:	4619      	mov	r1, r3
 800bf02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	88fb      	ldrh	r3, [r7, #6]
 800bf08:	f7fa ff4e 	bl	8006da8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	613b      	str	r3, [r7, #16]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	613b      	str	r3, [r7, #16]
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	613b      	str	r3, [r7, #16]
 800bf20:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2200      	movs	r2, #0
 800bf26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	691b      	ldr	r3, [r3, #16]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d019      	beq.n	800bf66 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	330c      	adds	r3, #12
 800bf38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf3c:	e853 3f00 	ldrex	r3, [r3]
 800bf40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf48:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	330c      	adds	r3, #12
 800bf50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf52:	64fa      	str	r2, [r7, #76]	; 0x4c
 800bf54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bf58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf5a:	e841 2300 	strex	r3, r2, [r1]
 800bf5e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bf60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d1e5      	bne.n	800bf32 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	3314      	adds	r3, #20
 800bf6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf70:	e853 3f00 	ldrex	r3, [r3]
 800bf74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf78:	f043 0301 	orr.w	r3, r3, #1
 800bf7c:	657b      	str	r3, [r7, #84]	; 0x54
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	3314      	adds	r3, #20
 800bf84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf86:	63ba      	str	r2, [r7, #56]	; 0x38
 800bf88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bf8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf8e:	e841 2300 	strex	r3, r2, [r1]
 800bf92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d1e5      	bne.n	800bf66 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	3314      	adds	r3, #20
 800bfa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	e853 3f00 	ldrex	r3, [r3]
 800bfa8:	617b      	str	r3, [r7, #20]
   return(result);
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfb0:	653b      	str	r3, [r7, #80]	; 0x50
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	3314      	adds	r3, #20
 800bfb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bfba:	627a      	str	r2, [r7, #36]	; 0x24
 800bfbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbe:	6a39      	ldr	r1, [r7, #32]
 800bfc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfc2:	e841 2300 	strex	r3, r2, [r1]
 800bfc6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1e5      	bne.n	800bf9a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3760      	adds	r7, #96	; 0x60
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	0800bbdb 	.word	0x0800bbdb
 800bfdc:	0800bd01 	.word	0x0800bd01
 800bfe0:	0800bd37 	.word	0x0800bd37

0800bfe4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b089      	sub	sp, #36	; 0x24
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	330c      	adds	r3, #12
 800bff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	e853 3f00 	ldrex	r3, [r3]
 800bffa:	60bb      	str	r3, [r7, #8]
   return(result);
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c002:	61fb      	str	r3, [r7, #28]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	330c      	adds	r3, #12
 800c00a:	69fa      	ldr	r2, [r7, #28]
 800c00c:	61ba      	str	r2, [r7, #24]
 800c00e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c010:	6979      	ldr	r1, [r7, #20]
 800c012:	69ba      	ldr	r2, [r7, #24]
 800c014:	e841 2300 	strex	r3, r2, [r1]
 800c018:	613b      	str	r3, [r7, #16]
   return(result);
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1e5      	bne.n	800bfec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2220      	movs	r2, #32
 800c024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c028:	bf00      	nop
 800c02a:	3724      	adds	r7, #36	; 0x24
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c034:	b480      	push	{r7}
 800c036:	b095      	sub	sp, #84	; 0x54
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	330c      	adds	r3, #12
 800c042:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c046:	e853 3f00 	ldrex	r3, [r3]
 800c04a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c052:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	330c      	adds	r3, #12
 800c05a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c05c:	643a      	str	r2, [r7, #64]	; 0x40
 800c05e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c060:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c064:	e841 2300 	strex	r3, r2, [r1]
 800c068:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1e5      	bne.n	800c03c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	3314      	adds	r3, #20
 800c076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c078:	6a3b      	ldr	r3, [r7, #32]
 800c07a:	e853 3f00 	ldrex	r3, [r3]
 800c07e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	f023 0301 	bic.w	r3, r3, #1
 800c086:	64bb      	str	r3, [r7, #72]	; 0x48
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3314      	adds	r3, #20
 800c08e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c090:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c098:	e841 2300 	strex	r3, r2, [r1]
 800c09c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d1e5      	bne.n	800c070 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d119      	bne.n	800c0e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	330c      	adds	r3, #12
 800c0b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	e853 3f00 	ldrex	r3, [r3]
 800c0ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	f023 0310 	bic.w	r3, r3, #16
 800c0c2:	647b      	str	r3, [r7, #68]	; 0x44
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	330c      	adds	r3, #12
 800c0ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0cc:	61ba      	str	r2, [r7, #24]
 800c0ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d0:	6979      	ldr	r1, [r7, #20]
 800c0d2:	69ba      	ldr	r2, [r7, #24]
 800c0d4:	e841 2300 	strex	r3, r2, [r1]
 800c0d8:	613b      	str	r3, [r7, #16]
   return(result);
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d1e5      	bne.n	800c0ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2220      	movs	r2, #32
 800c0e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c0ee:	bf00      	nop
 800c0f0:	3754      	adds	r7, #84	; 0x54
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
	...

0800c0fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c100:	b0c0      	sub	sp, #256	; 0x100
 800c102:	af00      	add	r7, sp, #0
 800c104:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c118:	68d9      	ldr	r1, [r3, #12]
 800c11a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	ea40 0301 	orr.w	r3, r0, r1
 800c124:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c12a:	689a      	ldr	r2, [r3, #8]
 800c12c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	431a      	orrs	r2, r3
 800c134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c138:	695b      	ldr	r3, [r3, #20]
 800c13a:	431a      	orrs	r2, r3
 800c13c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c140:	69db      	ldr	r3, [r3, #28]
 800c142:	4313      	orrs	r3, r2
 800c144:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c154:	f021 010c 	bic.w	r1, r1, #12
 800c158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c162:	430b      	orrs	r3, r1
 800c164:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	695b      	ldr	r3, [r3, #20]
 800c16e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c176:	6999      	ldr	r1, [r3, #24]
 800c178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	ea40 0301 	orr.w	r3, r0, r1
 800c182:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	4b8f      	ldr	r3, [pc, #572]	; (800c3c8 <UART_SetConfig+0x2cc>)
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d005      	beq.n	800c19c <UART_SetConfig+0xa0>
 800c190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	4b8d      	ldr	r3, [pc, #564]	; (800c3cc <UART_SetConfig+0x2d0>)
 800c198:	429a      	cmp	r2, r3
 800c19a:	d104      	bne.n	800c1a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c19c:	f7fc fb14 	bl	80087c8 <HAL_RCC_GetPCLK2Freq>
 800c1a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c1a4:	e003      	b.n	800c1ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c1a6:	f7fc fafb 	bl	80087a0 <HAL_RCC_GetPCLK1Freq>
 800c1aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1b2:	69db      	ldr	r3, [r3, #28]
 800c1b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1b8:	f040 810c 	bne.w	800c3d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c1bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c1c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c1ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c1ce:	4622      	mov	r2, r4
 800c1d0:	462b      	mov	r3, r5
 800c1d2:	1891      	adds	r1, r2, r2
 800c1d4:	65b9      	str	r1, [r7, #88]	; 0x58
 800c1d6:	415b      	adcs	r3, r3
 800c1d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c1de:	4621      	mov	r1, r4
 800c1e0:	eb12 0801 	adds.w	r8, r2, r1
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	eb43 0901 	adc.w	r9, r3, r1
 800c1ea:	f04f 0200 	mov.w	r2, #0
 800c1ee:	f04f 0300 	mov.w	r3, #0
 800c1f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c1f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c1fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c1fe:	4690      	mov	r8, r2
 800c200:	4699      	mov	r9, r3
 800c202:	4623      	mov	r3, r4
 800c204:	eb18 0303 	adds.w	r3, r8, r3
 800c208:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c20c:	462b      	mov	r3, r5
 800c20e:	eb49 0303 	adc.w	r3, r9, r3
 800c212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c222:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c226:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c22a:	460b      	mov	r3, r1
 800c22c:	18db      	adds	r3, r3, r3
 800c22e:	653b      	str	r3, [r7, #80]	; 0x50
 800c230:	4613      	mov	r3, r2
 800c232:	eb42 0303 	adc.w	r3, r2, r3
 800c236:	657b      	str	r3, [r7, #84]	; 0x54
 800c238:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c23c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c240:	f7f4 fcd2 	bl	8000be8 <__aeabi_uldivmod>
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	4b61      	ldr	r3, [pc, #388]	; (800c3d0 <UART_SetConfig+0x2d4>)
 800c24a:	fba3 2302 	umull	r2, r3, r3, r2
 800c24e:	095b      	lsrs	r3, r3, #5
 800c250:	011c      	lsls	r4, r3, #4
 800c252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c256:	2200      	movs	r2, #0
 800c258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c25c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c260:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c264:	4642      	mov	r2, r8
 800c266:	464b      	mov	r3, r9
 800c268:	1891      	adds	r1, r2, r2
 800c26a:	64b9      	str	r1, [r7, #72]	; 0x48
 800c26c:	415b      	adcs	r3, r3
 800c26e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c270:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c274:	4641      	mov	r1, r8
 800c276:	eb12 0a01 	adds.w	sl, r2, r1
 800c27a:	4649      	mov	r1, r9
 800c27c:	eb43 0b01 	adc.w	fp, r3, r1
 800c280:	f04f 0200 	mov.w	r2, #0
 800c284:	f04f 0300 	mov.w	r3, #0
 800c288:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c28c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c290:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c294:	4692      	mov	sl, r2
 800c296:	469b      	mov	fp, r3
 800c298:	4643      	mov	r3, r8
 800c29a:	eb1a 0303 	adds.w	r3, sl, r3
 800c29e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c2a2:	464b      	mov	r3, r9
 800c2a4:	eb4b 0303 	adc.w	r3, fp, r3
 800c2a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c2ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c2b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c2bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	18db      	adds	r3, r3, r3
 800c2c4:	643b      	str	r3, [r7, #64]	; 0x40
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	eb42 0303 	adc.w	r3, r2, r3
 800c2cc:	647b      	str	r3, [r7, #68]	; 0x44
 800c2ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c2d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c2d6:	f7f4 fc87 	bl	8000be8 <__aeabi_uldivmod>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	460b      	mov	r3, r1
 800c2de:	4611      	mov	r1, r2
 800c2e0:	4b3b      	ldr	r3, [pc, #236]	; (800c3d0 <UART_SetConfig+0x2d4>)
 800c2e2:	fba3 2301 	umull	r2, r3, r3, r1
 800c2e6:	095b      	lsrs	r3, r3, #5
 800c2e8:	2264      	movs	r2, #100	; 0x64
 800c2ea:	fb02 f303 	mul.w	r3, r2, r3
 800c2ee:	1acb      	subs	r3, r1, r3
 800c2f0:	00db      	lsls	r3, r3, #3
 800c2f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c2f6:	4b36      	ldr	r3, [pc, #216]	; (800c3d0 <UART_SetConfig+0x2d4>)
 800c2f8:	fba3 2302 	umull	r2, r3, r3, r2
 800c2fc:	095b      	lsrs	r3, r3, #5
 800c2fe:	005b      	lsls	r3, r3, #1
 800c300:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c304:	441c      	add	r4, r3
 800c306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c30a:	2200      	movs	r2, #0
 800c30c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c310:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c314:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c318:	4642      	mov	r2, r8
 800c31a:	464b      	mov	r3, r9
 800c31c:	1891      	adds	r1, r2, r2
 800c31e:	63b9      	str	r1, [r7, #56]	; 0x38
 800c320:	415b      	adcs	r3, r3
 800c322:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c324:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c328:	4641      	mov	r1, r8
 800c32a:	1851      	adds	r1, r2, r1
 800c32c:	6339      	str	r1, [r7, #48]	; 0x30
 800c32e:	4649      	mov	r1, r9
 800c330:	414b      	adcs	r3, r1
 800c332:	637b      	str	r3, [r7, #52]	; 0x34
 800c334:	f04f 0200 	mov.w	r2, #0
 800c338:	f04f 0300 	mov.w	r3, #0
 800c33c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c340:	4659      	mov	r1, fp
 800c342:	00cb      	lsls	r3, r1, #3
 800c344:	4651      	mov	r1, sl
 800c346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c34a:	4651      	mov	r1, sl
 800c34c:	00ca      	lsls	r2, r1, #3
 800c34e:	4610      	mov	r0, r2
 800c350:	4619      	mov	r1, r3
 800c352:	4603      	mov	r3, r0
 800c354:	4642      	mov	r2, r8
 800c356:	189b      	adds	r3, r3, r2
 800c358:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c35c:	464b      	mov	r3, r9
 800c35e:	460a      	mov	r2, r1
 800c360:	eb42 0303 	adc.w	r3, r2, r3
 800c364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c374:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c378:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c37c:	460b      	mov	r3, r1
 800c37e:	18db      	adds	r3, r3, r3
 800c380:	62bb      	str	r3, [r7, #40]	; 0x28
 800c382:	4613      	mov	r3, r2
 800c384:	eb42 0303 	adc.w	r3, r2, r3
 800c388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c38a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c38e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c392:	f7f4 fc29 	bl	8000be8 <__aeabi_uldivmod>
 800c396:	4602      	mov	r2, r0
 800c398:	460b      	mov	r3, r1
 800c39a:	4b0d      	ldr	r3, [pc, #52]	; (800c3d0 <UART_SetConfig+0x2d4>)
 800c39c:	fba3 1302 	umull	r1, r3, r3, r2
 800c3a0:	095b      	lsrs	r3, r3, #5
 800c3a2:	2164      	movs	r1, #100	; 0x64
 800c3a4:	fb01 f303 	mul.w	r3, r1, r3
 800c3a8:	1ad3      	subs	r3, r2, r3
 800c3aa:	00db      	lsls	r3, r3, #3
 800c3ac:	3332      	adds	r3, #50	; 0x32
 800c3ae:	4a08      	ldr	r2, [pc, #32]	; (800c3d0 <UART_SetConfig+0x2d4>)
 800c3b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c3b4:	095b      	lsrs	r3, r3, #5
 800c3b6:	f003 0207 	and.w	r2, r3, #7
 800c3ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4422      	add	r2, r4
 800c3c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c3c4:	e105      	b.n	800c5d2 <UART_SetConfig+0x4d6>
 800c3c6:	bf00      	nop
 800c3c8:	40011000 	.word	0x40011000
 800c3cc:	40011400 	.word	0x40011400
 800c3d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c3d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c3de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c3e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c3e6:	4642      	mov	r2, r8
 800c3e8:	464b      	mov	r3, r9
 800c3ea:	1891      	adds	r1, r2, r2
 800c3ec:	6239      	str	r1, [r7, #32]
 800c3ee:	415b      	adcs	r3, r3
 800c3f0:	627b      	str	r3, [r7, #36]	; 0x24
 800c3f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c3f6:	4641      	mov	r1, r8
 800c3f8:	1854      	adds	r4, r2, r1
 800c3fa:	4649      	mov	r1, r9
 800c3fc:	eb43 0501 	adc.w	r5, r3, r1
 800c400:	f04f 0200 	mov.w	r2, #0
 800c404:	f04f 0300 	mov.w	r3, #0
 800c408:	00eb      	lsls	r3, r5, #3
 800c40a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c40e:	00e2      	lsls	r2, r4, #3
 800c410:	4614      	mov	r4, r2
 800c412:	461d      	mov	r5, r3
 800c414:	4643      	mov	r3, r8
 800c416:	18e3      	adds	r3, r4, r3
 800c418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c41c:	464b      	mov	r3, r9
 800c41e:	eb45 0303 	adc.w	r3, r5, r3
 800c422:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	2200      	movs	r2, #0
 800c42e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c432:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c436:	f04f 0200 	mov.w	r2, #0
 800c43a:	f04f 0300 	mov.w	r3, #0
 800c43e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c442:	4629      	mov	r1, r5
 800c444:	008b      	lsls	r3, r1, #2
 800c446:	4621      	mov	r1, r4
 800c448:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c44c:	4621      	mov	r1, r4
 800c44e:	008a      	lsls	r2, r1, #2
 800c450:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c454:	f7f4 fbc8 	bl	8000be8 <__aeabi_uldivmod>
 800c458:	4602      	mov	r2, r0
 800c45a:	460b      	mov	r3, r1
 800c45c:	4b60      	ldr	r3, [pc, #384]	; (800c5e0 <UART_SetConfig+0x4e4>)
 800c45e:	fba3 2302 	umull	r2, r3, r3, r2
 800c462:	095b      	lsrs	r3, r3, #5
 800c464:	011c      	lsls	r4, r3, #4
 800c466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c46a:	2200      	movs	r2, #0
 800c46c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c470:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c474:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c478:	4642      	mov	r2, r8
 800c47a:	464b      	mov	r3, r9
 800c47c:	1891      	adds	r1, r2, r2
 800c47e:	61b9      	str	r1, [r7, #24]
 800c480:	415b      	adcs	r3, r3
 800c482:	61fb      	str	r3, [r7, #28]
 800c484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c488:	4641      	mov	r1, r8
 800c48a:	1851      	adds	r1, r2, r1
 800c48c:	6139      	str	r1, [r7, #16]
 800c48e:	4649      	mov	r1, r9
 800c490:	414b      	adcs	r3, r1
 800c492:	617b      	str	r3, [r7, #20]
 800c494:	f04f 0200 	mov.w	r2, #0
 800c498:	f04f 0300 	mov.w	r3, #0
 800c49c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c4a0:	4659      	mov	r1, fp
 800c4a2:	00cb      	lsls	r3, r1, #3
 800c4a4:	4651      	mov	r1, sl
 800c4a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4aa:	4651      	mov	r1, sl
 800c4ac:	00ca      	lsls	r2, r1, #3
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	4642      	mov	r2, r8
 800c4b6:	189b      	adds	r3, r3, r2
 800c4b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c4bc:	464b      	mov	r3, r9
 800c4be:	460a      	mov	r2, r1
 800c4c0:	eb42 0303 	adc.w	r3, r2, r3
 800c4c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c4c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c4d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c4d4:	f04f 0200 	mov.w	r2, #0
 800c4d8:	f04f 0300 	mov.w	r3, #0
 800c4dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c4e0:	4649      	mov	r1, r9
 800c4e2:	008b      	lsls	r3, r1, #2
 800c4e4:	4641      	mov	r1, r8
 800c4e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c4ea:	4641      	mov	r1, r8
 800c4ec:	008a      	lsls	r2, r1, #2
 800c4ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c4f2:	f7f4 fb79 	bl	8000be8 <__aeabi_uldivmod>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	4b39      	ldr	r3, [pc, #228]	; (800c5e0 <UART_SetConfig+0x4e4>)
 800c4fc:	fba3 1302 	umull	r1, r3, r3, r2
 800c500:	095b      	lsrs	r3, r3, #5
 800c502:	2164      	movs	r1, #100	; 0x64
 800c504:	fb01 f303 	mul.w	r3, r1, r3
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	011b      	lsls	r3, r3, #4
 800c50c:	3332      	adds	r3, #50	; 0x32
 800c50e:	4a34      	ldr	r2, [pc, #208]	; (800c5e0 <UART_SetConfig+0x4e4>)
 800c510:	fba2 2303 	umull	r2, r3, r2, r3
 800c514:	095b      	lsrs	r3, r3, #5
 800c516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c51a:	441c      	add	r4, r3
 800c51c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c520:	2200      	movs	r2, #0
 800c522:	673b      	str	r3, [r7, #112]	; 0x70
 800c524:	677a      	str	r2, [r7, #116]	; 0x74
 800c526:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c52a:	4642      	mov	r2, r8
 800c52c:	464b      	mov	r3, r9
 800c52e:	1891      	adds	r1, r2, r2
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	415b      	adcs	r3, r3
 800c534:	60fb      	str	r3, [r7, #12]
 800c536:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c53a:	4641      	mov	r1, r8
 800c53c:	1851      	adds	r1, r2, r1
 800c53e:	6039      	str	r1, [r7, #0]
 800c540:	4649      	mov	r1, r9
 800c542:	414b      	adcs	r3, r1
 800c544:	607b      	str	r3, [r7, #4]
 800c546:	f04f 0200 	mov.w	r2, #0
 800c54a:	f04f 0300 	mov.w	r3, #0
 800c54e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c552:	4659      	mov	r1, fp
 800c554:	00cb      	lsls	r3, r1, #3
 800c556:	4651      	mov	r1, sl
 800c558:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c55c:	4651      	mov	r1, sl
 800c55e:	00ca      	lsls	r2, r1, #3
 800c560:	4610      	mov	r0, r2
 800c562:	4619      	mov	r1, r3
 800c564:	4603      	mov	r3, r0
 800c566:	4642      	mov	r2, r8
 800c568:	189b      	adds	r3, r3, r2
 800c56a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c56c:	464b      	mov	r3, r9
 800c56e:	460a      	mov	r2, r1
 800c570:	eb42 0303 	adc.w	r3, r2, r3
 800c574:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	663b      	str	r3, [r7, #96]	; 0x60
 800c580:	667a      	str	r2, [r7, #100]	; 0x64
 800c582:	f04f 0200 	mov.w	r2, #0
 800c586:	f04f 0300 	mov.w	r3, #0
 800c58a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c58e:	4649      	mov	r1, r9
 800c590:	008b      	lsls	r3, r1, #2
 800c592:	4641      	mov	r1, r8
 800c594:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c598:	4641      	mov	r1, r8
 800c59a:	008a      	lsls	r2, r1, #2
 800c59c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c5a0:	f7f4 fb22 	bl	8000be8 <__aeabi_uldivmod>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	4b0d      	ldr	r3, [pc, #52]	; (800c5e0 <UART_SetConfig+0x4e4>)
 800c5aa:	fba3 1302 	umull	r1, r3, r3, r2
 800c5ae:	095b      	lsrs	r3, r3, #5
 800c5b0:	2164      	movs	r1, #100	; 0x64
 800c5b2:	fb01 f303 	mul.w	r3, r1, r3
 800c5b6:	1ad3      	subs	r3, r2, r3
 800c5b8:	011b      	lsls	r3, r3, #4
 800c5ba:	3332      	adds	r3, #50	; 0x32
 800c5bc:	4a08      	ldr	r2, [pc, #32]	; (800c5e0 <UART_SetConfig+0x4e4>)
 800c5be:	fba2 2303 	umull	r2, r3, r2, r3
 800c5c2:	095b      	lsrs	r3, r3, #5
 800c5c4:	f003 020f 	and.w	r2, r3, #15
 800c5c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4422      	add	r2, r4
 800c5d0:	609a      	str	r2, [r3, #8]
}
 800c5d2:	bf00      	nop
 800c5d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5de:	bf00      	nop
 800c5e0:	51eb851f 	.word	0x51eb851f

0800c5e4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c5e4:	b084      	sub	sp, #16
 800c5e6:	b480      	push	{r7}
 800c5e8:	b085      	sub	sp, #20
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
 800c5ee:	f107 001c 	add.w	r0, r7, #28
 800c5f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c5fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c5fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c5fe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c602:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c604:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c606:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c60a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c60e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c610:	68fa      	ldr	r2, [r7, #12]
 800c612:	4313      	orrs	r3, r2
 800c614:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c61e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	431a      	orrs	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3714      	adds	r7, #20
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	b004      	add	sp, #16
 800c638:	4770      	bx	lr

0800c63a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c63a:	b480      	push	{r7}
 800c63c:	b083      	sub	sp, #12
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c648:	4618      	mov	r0, r3
 800c64a:	370c      	adds	r7, #12
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	370c      	adds	r7, #12
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr

0800c676 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c676:	b480      	push	{r7}
 800c678:	b083      	sub	sp, #12
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2203      	movs	r2, #3
 800c682:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c684:	2300      	movs	r3, #0
}
 800c686:	4618      	mov	r0, r3
 800c688:	370c      	adds	r7, #12
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c692:	b480      	push	{r7}
 800c694:	b083      	sub	sp, #12
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f003 0303 	and.w	r3, r3, #3
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	370c      	adds	r7, #12
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	b085      	sub	sp, #20
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6cc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c6d2:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c6d8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c6e8:	f023 030f 	bic.w	r3, r3, #15
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	431a      	orrs	r2, r3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3714      	adds	r7, #20
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr

0800c702 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c702:	b480      	push	{r7}
 800c704:	b083      	sub	sp, #12
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	b2db      	uxtb	r3, r3
}
 800c710:	4618      	mov	r0, r3
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b085      	sub	sp, #20
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	3314      	adds	r3, #20
 800c72a:	461a      	mov	r2, r3
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	4413      	add	r3, r2
 800c730:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
}  
 800c736:	4618      	mov	r0, r3
 800c738:	3714      	adds	r7, #20
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr

0800c742 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c742:	b480      	push	{r7}
 800c744:	b085      	sub	sp, #20
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c768:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c76e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c774:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	4313      	orrs	r3, r2
 800c77a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c780:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	431a      	orrs	r2, r3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c78c:	2300      	movs	r3, #0

}
 800c78e:	4618      	mov	r0, r3
 800c790:	3714      	adds	r7, #20
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr

0800c79a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b088      	sub	sp, #32
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
 800c7a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c7a8:	2310      	movs	r3, #16
 800c7aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7ac:	2340      	movs	r3, #64	; 0x40
 800c7ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7ba:	f107 0308 	add.w	r3, r7, #8
 800c7be:	4619      	mov	r1, r3
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f7ff ff74 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c7c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7ca:	2110      	movs	r1, #16
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 fa19 	bl	800cc04 <SDMMC_GetCmdResp1>
 800c7d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7d4:	69fb      	ldr	r3, [r7, #28]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3720      	adds	r7, #32
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}

0800c7de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c7de:	b580      	push	{r7, lr}
 800c7e0:	b088      	sub	sp, #32
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
 800c7e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c7ec:	2311      	movs	r3, #17
 800c7ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7f0:	2340      	movs	r3, #64	; 0x40
 800c7f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7fe:	f107 0308 	add.w	r3, r7, #8
 800c802:	4619      	mov	r1, r3
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f7ff ff52 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c80a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c80e:	2111      	movs	r1, #17
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 f9f7 	bl	800cc04 <SDMMC_GetCmdResp1>
 800c816:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c818:	69fb      	ldr	r3, [r7, #28]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3720      	adds	r7, #32
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b088      	sub	sp, #32
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
 800c82a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c830:	2312      	movs	r3, #18
 800c832:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c834:	2340      	movs	r3, #64	; 0x40
 800c836:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c838:	2300      	movs	r3, #0
 800c83a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c83c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c840:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c842:	f107 0308 	add.w	r3, r7, #8
 800c846:	4619      	mov	r1, r3
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7ff ff30 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c84e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c852:	2112      	movs	r1, #18
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f9d5 	bl	800cc04 <SDMMC_GetCmdResp1>
 800c85a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c85c:	69fb      	ldr	r3, [r7, #28]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3720      	adds	r7, #32
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}

0800c866 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b088      	sub	sp, #32
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
 800c86e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c874:	2318      	movs	r3, #24
 800c876:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c878:	2340      	movs	r3, #64	; 0x40
 800c87a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c87c:	2300      	movs	r3, #0
 800c87e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c884:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c886:	f107 0308 	add.w	r3, r7, #8
 800c88a:	4619      	mov	r1, r3
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f7ff ff0e 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c892:	f241 3288 	movw	r2, #5000	; 0x1388
 800c896:	2118      	movs	r1, #24
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 f9b3 	bl	800cc04 <SDMMC_GetCmdResp1>
 800c89e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8a0:	69fb      	ldr	r3, [r7, #28]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3720      	adds	r7, #32
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b088      	sub	sp, #32
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
 800c8b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c8b8:	2319      	movs	r3, #25
 800c8ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8bc:	2340      	movs	r3, #64	; 0x40
 800c8be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8ca:	f107 0308 	add.w	r3, r7, #8
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f7ff feec 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c8d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8da:	2119      	movs	r1, #25
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f991 	bl	800cc04 <SDMMC_GetCmdResp1>
 800c8e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8e4:	69fb      	ldr	r3, [r7, #28]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3720      	adds	r7, #32
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
	...

0800c8f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b088      	sub	sp, #32
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c8fc:	230c      	movs	r3, #12
 800c8fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c900:	2340      	movs	r3, #64	; 0x40
 800c902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c904:	2300      	movs	r3, #0
 800c906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c90c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c90e:	f107 0308 	add.w	r3, r7, #8
 800c912:	4619      	mov	r1, r3
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7ff feca 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c91a:	4a05      	ldr	r2, [pc, #20]	; (800c930 <SDMMC_CmdStopTransfer+0x40>)
 800c91c:	210c      	movs	r1, #12
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 f970 	bl	800cc04 <SDMMC_GetCmdResp1>
 800c924:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c926:	69fb      	ldr	r3, [r7, #28]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3720      	adds	r7, #32
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	05f5e100 	.word	0x05f5e100

0800c934 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b08a      	sub	sp, #40	; 0x28
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c944:	2307      	movs	r3, #7
 800c946:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c948:	2340      	movs	r3, #64	; 0x40
 800c94a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c94c:	2300      	movs	r3, #0
 800c94e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c954:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c956:	f107 0310 	add.w	r3, r7, #16
 800c95a:	4619      	mov	r1, r3
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f7ff fea6 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c962:	f241 3288 	movw	r2, #5000	; 0x1388
 800c966:	2107      	movs	r1, #7
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f000 f94b 	bl	800cc04 <SDMMC_GetCmdResp1>
 800c96e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c972:	4618      	mov	r0, r3
 800c974:	3728      	adds	r7, #40	; 0x28
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b088      	sub	sp, #32
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c982:	2300      	movs	r3, #0
 800c984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c986:	2300      	movs	r3, #0
 800c988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c98a:	2300      	movs	r3, #0
 800c98c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c98e:	2300      	movs	r3, #0
 800c990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c996:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c998:	f107 0308 	add.w	r3, r7, #8
 800c99c:	4619      	mov	r1, r3
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f7ff fe85 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fb65 	bl	800d074 <SDMMC_GetCmdError>
 800c9aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9ac:	69fb      	ldr	r3, [r7, #28]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3720      	adds	r7, #32
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b088      	sub	sp, #32
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c9be:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c9c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c9c4:	2308      	movs	r3, #8
 800c9c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c9c8:	2340      	movs	r3, #64	; 0x40
 800c9ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c9d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c9d6:	f107 0308 	add.w	r3, r7, #8
 800c9da:	4619      	mov	r1, r3
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f7ff fe66 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 faf8 	bl	800cfd8 <SDMMC_GetCmdResp7>
 800c9e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9ea:	69fb      	ldr	r3, [r7, #28]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3720      	adds	r7, #32
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b088      	sub	sp, #32
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ca02:	2337      	movs	r3, #55	; 0x37
 800ca04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca06:	2340      	movs	r3, #64	; 0x40
 800ca08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca14:	f107 0308 	add.w	r3, r7, #8
 800ca18:	4619      	mov	r1, r3
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7ff fe47 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ca20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca24:	2137      	movs	r1, #55	; 0x37
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 f8ec 	bl	800cc04 <SDMMC_GetCmdResp1>
 800ca2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca2e:	69fb      	ldr	r3, [r7, #28]
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3720      	adds	r7, #32
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b088      	sub	sp, #32
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ca4e:	2329      	movs	r3, #41	; 0x29
 800ca50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca52:	2340      	movs	r3, #64	; 0x40
 800ca54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca56:	2300      	movs	r3, #0
 800ca58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca60:	f107 0308 	add.w	r3, r7, #8
 800ca64:	4619      	mov	r1, r3
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f7ff fe21 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 f9ff 	bl	800ce70 <SDMMC_GetCmdResp3>
 800ca72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca74:	69fb      	ldr	r3, [r7, #28]
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3720      	adds	r7, #32
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b088      	sub	sp, #32
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ca8c:	2306      	movs	r3, #6
 800ca8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca90:	2340      	movs	r3, #64	; 0x40
 800ca92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca94:	2300      	movs	r3, #0
 800ca96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca9e:	f107 0308 	add.w	r3, r7, #8
 800caa2:	4619      	mov	r1, r3
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7ff fe02 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800caaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800caae:	2106      	movs	r1, #6
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 f8a7 	bl	800cc04 <SDMMC_GetCmdResp1>
 800cab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cab8:	69fb      	ldr	r3, [r7, #28]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3720      	adds	r7, #32
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b088      	sub	sp, #32
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800caca:	2300      	movs	r3, #0
 800cacc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cace:	2333      	movs	r3, #51	; 0x33
 800cad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cad2:	2340      	movs	r3, #64	; 0x40
 800cad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cad6:	2300      	movs	r3, #0
 800cad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cade:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cae0:	f107 0308 	add.w	r3, r7, #8
 800cae4:	4619      	mov	r1, r3
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7ff fde1 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800caec:	f241 3288 	movw	r2, #5000	; 0x1388
 800caf0:	2133      	movs	r1, #51	; 0x33
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 f886 	bl	800cc04 <SDMMC_GetCmdResp1>
 800caf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cafa:	69fb      	ldr	r3, [r7, #28]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3720      	adds	r7, #32
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b088      	sub	sp, #32
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cb10:	2302      	movs	r3, #2
 800cb12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cb14:	23c0      	movs	r3, #192	; 0xc0
 800cb16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb22:	f107 0308 	add.w	r3, r7, #8
 800cb26:	4619      	mov	r1, r3
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7ff fdc0 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f000 f956 	bl	800cde0 <SDMMC_GetCmdResp2>
 800cb34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb36:	69fb      	ldr	r3, [r7, #28]
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3720      	adds	r7, #32
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b088      	sub	sp, #32
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cb4e:	2309      	movs	r3, #9
 800cb50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cb52:	23c0      	movs	r3, #192	; 0xc0
 800cb54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb56:	2300      	movs	r3, #0
 800cb58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb60:	f107 0308 	add.w	r3, r7, #8
 800cb64:	4619      	mov	r1, r3
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f7ff fda1 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 f937 	bl	800cde0 <SDMMC_GetCmdResp2>
 800cb72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb74:	69fb      	ldr	r3, [r7, #28]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3720      	adds	r7, #32
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b088      	sub	sp, #32
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
 800cb86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cb8c:	2303      	movs	r3, #3
 800cb8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb90:	2340      	movs	r3, #64	; 0x40
 800cb92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb94:	2300      	movs	r3, #0
 800cb96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb9e:	f107 0308 	add.w	r3, r7, #8
 800cba2:	4619      	mov	r1, r3
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7ff fd82 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cbaa:	683a      	ldr	r2, [r7, #0]
 800cbac:	2103      	movs	r1, #3
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 f99c 	bl	800ceec <SDMMC_GetCmdResp6>
 800cbb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbb6:	69fb      	ldr	r3, [r7, #28]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3720      	adds	r7, #32
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b088      	sub	sp, #32
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cbce:	230d      	movs	r3, #13
 800cbd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cbd2:	2340      	movs	r3, #64	; 0x40
 800cbd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cbda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbe0:	f107 0308 	add.w	r3, r7, #8
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f7ff fd61 	bl	800c6ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800cbec:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbf0:	210d      	movs	r1, #13
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 f806 	bl	800cc04 <SDMMC_GetCmdResp1>
 800cbf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbfa:	69fb      	ldr	r3, [r7, #28]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3720      	adds	r7, #32
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b088      	sub	sp, #32
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	607a      	str	r2, [r7, #4]
 800cc10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cc12:	4b70      	ldr	r3, [pc, #448]	; (800cdd4 <SDMMC_GetCmdResp1+0x1d0>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a70      	ldr	r2, [pc, #448]	; (800cdd8 <SDMMC_GetCmdResp1+0x1d4>)
 800cc18:	fba2 2303 	umull	r2, r3, r2, r3
 800cc1c:	0a5a      	lsrs	r2, r3, #9
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	fb02 f303 	mul.w	r3, r2, r3
 800cc24:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	1e5a      	subs	r2, r3, #1
 800cc2a:	61fa      	str	r2, [r7, #28]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d102      	bne.n	800cc36 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc34:	e0c9      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc3a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc3c:	69bb      	ldr	r3, [r7, #24]
 800cc3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d0ef      	beq.n	800cc26 <SDMMC_GetCmdResp1+0x22>
 800cc46:	69bb      	ldr	r3, [r7, #24]
 800cc48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1ea      	bne.n	800cc26 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc54:	f003 0304 	and.w	r3, r3, #4
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d004      	beq.n	800cc66 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2204      	movs	r2, #4
 800cc60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc62:	2304      	movs	r3, #4
 800cc64:	e0b1      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc6a:	f003 0301 	and.w	r3, r3, #1
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d004      	beq.n	800cc7c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2201      	movs	r2, #1
 800cc76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e0a6      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	22c5      	movs	r2, #197	; 0xc5
 800cc80:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	f7ff fd3d 	bl	800c702 <SDIO_GetCommandResponse>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	7afb      	ldrb	r3, [r7, #11]
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d001      	beq.n	800cc96 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc92:	2301      	movs	r3, #1
 800cc94:	e099      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cc96:	2100      	movs	r1, #0
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	f7ff fd3f 	bl	800c71c <SDIO_GetResponse>
 800cc9e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cca0:	697a      	ldr	r2, [r7, #20]
 800cca2:	4b4e      	ldr	r3, [pc, #312]	; (800cddc <SDMMC_GetCmdResp1+0x1d8>)
 800cca4:	4013      	ands	r3, r2
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d101      	bne.n	800ccae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	e08d      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	da02      	bge.n	800ccba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ccb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ccb8:	e087      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d001      	beq.n	800ccc8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ccc4:	2340      	movs	r3, #64	; 0x40
 800ccc6:	e080      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d001      	beq.n	800ccd6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ccd2:	2380      	movs	r3, #128	; 0x80
 800ccd4:	e079      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d002      	beq.n	800cce6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cce4:	e071      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d002      	beq.n	800ccf6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ccf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccf4:	e069      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cd00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd04:	e061      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d002      	beq.n	800cd16 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cd10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd14:	e059      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d002      	beq.n	800cd26 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cd20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd24:	e051      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d002      	beq.n	800cd36 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cd30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cd34:	e049      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d002      	beq.n	800cd46 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cd40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cd44:	e041      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d002      	beq.n	800cd56 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cd50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd54:	e039      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d002      	beq.n	800cd66 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cd60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cd64:	e031      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cd70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cd74:	e029      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cd80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cd84:	e021      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cd90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cd94:	e019      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d002      	beq.n	800cda6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cda0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cda4:	e011      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d002      	beq.n	800cdb6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cdb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cdb4:	e009      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	f003 0308 	and.w	r3, r3, #8
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d002      	beq.n	800cdc6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cdc0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cdc4:	e001      	b.n	800cdca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cdc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3720      	adds	r7, #32
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	20000000 	.word	0x20000000
 800cdd8:	10624dd3 	.word	0x10624dd3
 800cddc:	fdffe008 	.word	0xfdffe008

0800cde0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cde8:	4b1f      	ldr	r3, [pc, #124]	; (800ce68 <SDMMC_GetCmdResp2+0x88>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a1f      	ldr	r2, [pc, #124]	; (800ce6c <SDMMC_GetCmdResp2+0x8c>)
 800cdee:	fba2 2303 	umull	r2, r3, r2, r3
 800cdf2:	0a5b      	lsrs	r3, r3, #9
 800cdf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdf8:	fb02 f303 	mul.w	r3, r2, r3
 800cdfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	1e5a      	subs	r2, r3, #1
 800ce02:	60fa      	str	r2, [r7, #12]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d102      	bne.n	800ce0e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce0c:	e026      	b.n	800ce5c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d0ef      	beq.n	800cdfe <SDMMC_GetCmdResp2+0x1e>
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d1ea      	bne.n	800cdfe <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce2c:	f003 0304 	and.w	r3, r3, #4
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d004      	beq.n	800ce3e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2204      	movs	r2, #4
 800ce38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce3a:	2304      	movs	r3, #4
 800ce3c:	e00e      	b.n	800ce5c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce42:	f003 0301 	and.w	r3, r3, #1
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d004      	beq.n	800ce54 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce50:	2301      	movs	r3, #1
 800ce52:	e003      	b.n	800ce5c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	22c5      	movs	r2, #197	; 0xc5
 800ce58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ce5a:	2300      	movs	r3, #0
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3714      	adds	r7, #20
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr
 800ce68:	20000000 	.word	0x20000000
 800ce6c:	10624dd3 	.word	0x10624dd3

0800ce70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b085      	sub	sp, #20
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce78:	4b1a      	ldr	r3, [pc, #104]	; (800cee4 <SDMMC_GetCmdResp3+0x74>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4a1a      	ldr	r2, [pc, #104]	; (800cee8 <SDMMC_GetCmdResp3+0x78>)
 800ce7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce82:	0a5b      	lsrs	r3, r3, #9
 800ce84:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce88:	fb02 f303 	mul.w	r3, r2, r3
 800ce8c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	1e5a      	subs	r2, r3, #1
 800ce92:	60fa      	str	r2, [r7, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d102      	bne.n	800ce9e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce9c:	e01b      	b.n	800ced6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cea2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d0ef      	beq.n	800ce8e <SDMMC_GetCmdResp3+0x1e>
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d1ea      	bne.n	800ce8e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cebc:	f003 0304 	and.w	r3, r3, #4
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d004      	beq.n	800cece <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2204      	movs	r2, #4
 800cec8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ceca:	2304      	movs	r3, #4
 800cecc:	e003      	b.n	800ced6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	22c5      	movs	r2, #197	; 0xc5
 800ced2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ced4:	2300      	movs	r3, #0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3714      	adds	r7, #20
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	20000000 	.word	0x20000000
 800cee8:	10624dd3 	.word	0x10624dd3

0800ceec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b088      	sub	sp, #32
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	460b      	mov	r3, r1
 800cef6:	607a      	str	r2, [r7, #4]
 800cef8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cefa:	4b35      	ldr	r3, [pc, #212]	; (800cfd0 <SDMMC_GetCmdResp6+0xe4>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4a35      	ldr	r2, [pc, #212]	; (800cfd4 <SDMMC_GetCmdResp6+0xe8>)
 800cf00:	fba2 2303 	umull	r2, r3, r2, r3
 800cf04:	0a5b      	lsrs	r3, r3, #9
 800cf06:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf0a:	fb02 f303 	mul.w	r3, r2, r3
 800cf0e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	1e5a      	subs	r2, r3, #1
 800cf14:	61fa      	str	r2, [r7, #28]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d102      	bne.n	800cf20 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cf1e:	e052      	b.n	800cfc6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf24:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d0ef      	beq.n	800cf10 <SDMMC_GetCmdResp6+0x24>
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d1ea      	bne.n	800cf10 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf3e:	f003 0304 	and.w	r3, r3, #4
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d004      	beq.n	800cf50 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2204      	movs	r2, #4
 800cf4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf4c:	2304      	movs	r3, #4
 800cf4e:	e03a      	b.n	800cfc6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf54:	f003 0301 	and.w	r3, r3, #1
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d004      	beq.n	800cf66 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf62:	2301      	movs	r3, #1
 800cf64:	e02f      	b.n	800cfc6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	f7ff fbcb 	bl	800c702 <SDIO_GetCommandResponse>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	461a      	mov	r2, r3
 800cf70:	7afb      	ldrb	r3, [r7, #11]
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d001      	beq.n	800cf7a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf76:	2301      	movs	r3, #1
 800cf78:	e025      	b.n	800cfc6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	22c5      	movs	r2, #197	; 0xc5
 800cf7e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cf80:	2100      	movs	r1, #0
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	f7ff fbca 	bl	800c71c <SDIO_GetResponse>
 800cf88:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d106      	bne.n	800cfa2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	0c1b      	lsrs	r3, r3, #16
 800cf98:	b29a      	uxth	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	e011      	b.n	800cfc6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d002      	beq.n	800cfb2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cfac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfb0:	e009      	b.n	800cfc6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cfbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfc0:	e001      	b.n	800cfc6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cfc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3720      	adds	r7, #32
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	20000000 	.word	0x20000000
 800cfd4:	10624dd3 	.word	0x10624dd3

0800cfd8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cfe0:	4b22      	ldr	r3, [pc, #136]	; (800d06c <SDMMC_GetCmdResp7+0x94>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a22      	ldr	r2, [pc, #136]	; (800d070 <SDMMC_GetCmdResp7+0x98>)
 800cfe6:	fba2 2303 	umull	r2, r3, r2, r3
 800cfea:	0a5b      	lsrs	r3, r3, #9
 800cfec:	f241 3288 	movw	r2, #5000	; 0x1388
 800cff0:	fb02 f303 	mul.w	r3, r2, r3
 800cff4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	1e5a      	subs	r2, r3, #1
 800cffa:	60fa      	str	r2, [r7, #12]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d102      	bne.n	800d006 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d000:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d004:	e02c      	b.n	800d060 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d00a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d012:	2b00      	cmp	r3, #0
 800d014:	d0ef      	beq.n	800cff6 <SDMMC_GetCmdResp7+0x1e>
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1ea      	bne.n	800cff6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d024:	f003 0304 	and.w	r3, r3, #4
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d004      	beq.n	800d036 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2204      	movs	r2, #4
 800d030:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d032:	2304      	movs	r3, #4
 800d034:	e014      	b.n	800d060 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d03a:	f003 0301 	and.w	r3, r3, #1
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d004      	beq.n	800d04c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2201      	movs	r2, #1
 800d046:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d048:	2301      	movs	r3, #1
 800d04a:	e009      	b.n	800d060 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d054:	2b00      	cmp	r3, #0
 800d056:	d002      	beq.n	800d05e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2240      	movs	r2, #64	; 0x40
 800d05c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d05e:	2300      	movs	r3, #0
  
}
 800d060:	4618      	mov	r0, r3
 800d062:	3714      	adds	r7, #20
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	20000000 	.word	0x20000000
 800d070:	10624dd3 	.word	0x10624dd3

0800d074 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d074:	b480      	push	{r7}
 800d076:	b085      	sub	sp, #20
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d07c:	4b11      	ldr	r3, [pc, #68]	; (800d0c4 <SDMMC_GetCmdError+0x50>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a11      	ldr	r2, [pc, #68]	; (800d0c8 <SDMMC_GetCmdError+0x54>)
 800d082:	fba2 2303 	umull	r2, r3, r2, r3
 800d086:	0a5b      	lsrs	r3, r3, #9
 800d088:	f241 3288 	movw	r2, #5000	; 0x1388
 800d08c:	fb02 f303 	mul.w	r3, r2, r3
 800d090:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	1e5a      	subs	r2, r3, #1
 800d096:	60fa      	str	r2, [r7, #12]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d102      	bne.n	800d0a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d09c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d0a0:	e009      	b.n	800d0b6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d0f1      	beq.n	800d092 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	22c5      	movs	r2, #197	; 0xc5
 800d0b2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3714      	adds	r7, #20
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop
 800d0c4:	20000000 	.word	0x20000000
 800d0c8:	10624dd3 	.word	0x10624dd3

0800d0cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d0d0:	4904      	ldr	r1, [pc, #16]	; (800d0e4 <MX_FATFS_Init+0x18>)
 800d0d2:	4805      	ldr	r0, [pc, #20]	; (800d0e8 <MX_FATFS_Init+0x1c>)
 800d0d4:	f000 ff02 	bl	800dedc <FATFS_LinkDriver>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	461a      	mov	r2, r3
 800d0dc:	4b03      	ldr	r3, [pc, #12]	; (800d0ec <MX_FATFS_Init+0x20>)
 800d0de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d0e0:	bf00      	nop
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	20000608 	.word	0x20000608
 800d0e8:	08011c38 	.word	0x08011c38
 800d0ec:	20000604 	.word	0x20000604

0800d0f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d0fa:	f000 f896 	bl	800d22a <BSP_SD_IsDetected>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b01      	cmp	r3, #1
 800d102:	d001      	beq.n	800d108 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d104:	2301      	movs	r3, #1
 800d106:	e012      	b.n	800d12e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d108:	480b      	ldr	r0, [pc, #44]	; (800d138 <BSP_SD_Init+0x48>)
 800d10a:	f7fc fb67 	bl	80097dc <HAL_SD_Init>
 800d10e:	4603      	mov	r3, r0
 800d110:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d112:	79fb      	ldrb	r3, [r7, #7]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d109      	bne.n	800d12c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d11c:	4806      	ldr	r0, [pc, #24]	; (800d138 <BSP_SD_Init+0x48>)
 800d11e:	f7fd f91f 	bl	800a360 <HAL_SD_ConfigWideBusOperation>
 800d122:	4603      	mov	r3, r0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d001      	beq.n	800d12c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d12c:	79fb      	ldrb	r3, [r7, #7]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3708      	adds	r7, #8
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	20000300 	.word	0x20000300

0800d13c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b086      	sub	sp, #24
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d148:	2300      	movs	r3, #0
 800d14a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	68ba      	ldr	r2, [r7, #8]
 800d150:	68f9      	ldr	r1, [r7, #12]
 800d152:	4806      	ldr	r0, [pc, #24]	; (800d16c <BSP_SD_ReadBlocks_DMA+0x30>)
 800d154:	f7fc fbf2 	bl	800993c <HAL_SD_ReadBlocks_DMA>
 800d158:	4603      	mov	r3, r0
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d001      	beq.n	800d162 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d162:	7dfb      	ldrb	r3, [r7, #23]
}
 800d164:	4618      	mov	r0, r3
 800d166:	3718      	adds	r7, #24
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	20000300 	.word	0x20000300

0800d170 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d17c:	2300      	movs	r3, #0
 800d17e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	68ba      	ldr	r2, [r7, #8]
 800d184:	68f9      	ldr	r1, [r7, #12]
 800d186:	4806      	ldr	r0, [pc, #24]	; (800d1a0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d188:	f7fc fcb8 	bl	8009afc <HAL_SD_WriteBlocks_DMA>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d001      	beq.n	800d196 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d192:	2301      	movs	r3, #1
 800d194:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d196:	7dfb      	ldrb	r3, [r7, #23]
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3718      	adds	r7, #24
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	20000300 	.word	0x20000300

0800d1a4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d1a8:	4805      	ldr	r0, [pc, #20]	; (800d1c0 <BSP_SD_GetCardState+0x1c>)
 800d1aa:	f7fd f973 	bl	800a494 <HAL_SD_GetCardState>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b04      	cmp	r3, #4
 800d1b2:	bf14      	ite	ne
 800d1b4:	2301      	movne	r3, #1
 800d1b6:	2300      	moveq	r3, #0
 800d1b8:	b2db      	uxtb	r3, r3
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	20000300 	.word	0x20000300

0800d1c4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d1cc:	6879      	ldr	r1, [r7, #4]
 800d1ce:	4803      	ldr	r0, [pc, #12]	; (800d1dc <BSP_SD_GetCardInfo+0x18>)
 800d1d0:	f7fd f89a 	bl	800a308 <HAL_SD_GetCardInfo>
}
 800d1d4:	bf00      	nop
 800d1d6:	3708      	adds	r7, #8
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	20000300 	.word	0x20000300

0800d1e0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d1e8:	f000 f818 	bl	800d21c <BSP_SD_AbortCallback>
}
 800d1ec:	bf00      	nop
 800d1ee:	3708      	adds	r7, #8
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d1fc:	f000 f98c 	bl	800d518 <BSP_SD_WriteCpltCallback>
}
 800d200:	bf00      	nop
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d210:	f000 f98e 	bl	800d530 <BSP_SD_ReadCpltCallback>
}
 800d214:	bf00      	nop
 800d216:	3708      	adds	r7, #8
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d21c:	b480      	push	{r7}
 800d21e:	af00      	add	r7, sp, #0

}
 800d220:	bf00      	nop
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr

0800d22a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d22a:	b480      	push	{r7}
 800d22c:	b083      	sub	sp, #12
 800d22e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d230:	2301      	movs	r3, #1
 800d232:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800d234:	79fb      	ldrb	r3, [r7, #7]
 800d236:	b2db      	uxtb	r3, r3
}
 800d238:	4618      	mov	r0, r3
 800d23a:	370c      	adds	r7, #12
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d24c:	f7f9 fbbc 	bl	80069c8 <HAL_GetTick>
 800d250:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d252:	e006      	b.n	800d262 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d254:	f7ff ffa6 	bl	800d1a4 <BSP_SD_GetCardState>
 800d258:	4603      	mov	r3, r0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d101      	bne.n	800d262 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d25e:	2300      	movs	r3, #0
 800d260:	e009      	b.n	800d276 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d262:	f7f9 fbb1 	bl	80069c8 <HAL_GetTick>
 800d266:	4602      	mov	r2, r0
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	1ad3      	subs	r3, r2, r3
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d8f0      	bhi.n	800d254 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d272:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d276:	4618      	mov	r0, r3
 800d278:	3710      	adds	r7, #16
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
	...

0800d280 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	4603      	mov	r3, r0
 800d288:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d28a:	4b0b      	ldr	r3, [pc, #44]	; (800d2b8 <SD_CheckStatus+0x38>)
 800d28c:	2201      	movs	r2, #1
 800d28e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d290:	f7ff ff88 	bl	800d1a4 <BSP_SD_GetCardState>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	d107      	bne.n	800d2aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d29a:	4b07      	ldr	r3, [pc, #28]	; (800d2b8 <SD_CheckStatus+0x38>)
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	f023 0301 	bic.w	r3, r3, #1
 800d2a4:	b2da      	uxtb	r2, r3
 800d2a6:	4b04      	ldr	r3, [pc, #16]	; (800d2b8 <SD_CheckStatus+0x38>)
 800d2a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d2aa:	4b03      	ldr	r3, [pc, #12]	; (800d2b8 <SD_CheckStatus+0x38>)
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	b2db      	uxtb	r3, r3
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	20000009 	.word	0x20000009

0800d2bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d2c6:	f7ff ff13 	bl	800d0f0 <BSP_SD_Init>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d107      	bne.n	800d2e0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d2d0:	79fb      	ldrb	r3, [r7, #7]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7ff ffd4 	bl	800d280 <SD_CheckStatus>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	461a      	mov	r2, r3
 800d2dc:	4b04      	ldr	r3, [pc, #16]	; (800d2f0 <SD_initialize+0x34>)
 800d2de:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d2e0:	4b03      	ldr	r3, [pc, #12]	; (800d2f0 <SD_initialize+0x34>)
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	b2db      	uxtb	r3, r3
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3708      	adds	r7, #8
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	20000009 	.word	0x20000009

0800d2f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d2fe:	79fb      	ldrb	r3, [r7, #7]
 800d300:	4618      	mov	r0, r3
 800d302:	f7ff ffbd 	bl	800d280 <SD_CheckStatus>
 800d306:	4603      	mov	r3, r0
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3708      	adds	r7, #8
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b086      	sub	sp, #24
 800d314:	af00      	add	r7, sp, #0
 800d316:	60b9      	str	r1, [r7, #8]
 800d318:	607a      	str	r2, [r7, #4]
 800d31a:	603b      	str	r3, [r7, #0]
 800d31c:	4603      	mov	r3, r0
 800d31e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d320:	2301      	movs	r3, #1
 800d322:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d324:	f247 5030 	movw	r0, #30000	; 0x7530
 800d328:	f7ff ff8c 	bl	800d244 <SD_CheckStatusWithTimeout>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	da01      	bge.n	800d336 <SD_read+0x26>
  {
    return res;
 800d332:	7dfb      	ldrb	r3, [r7, #23]
 800d334:	e03b      	b.n	800d3ae <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d336:	683a      	ldr	r2, [r7, #0]
 800d338:	6879      	ldr	r1, [r7, #4]
 800d33a:	68b8      	ldr	r0, [r7, #8]
 800d33c:	f7ff fefe 	bl	800d13c <BSP_SD_ReadBlocks_DMA>
 800d340:	4603      	mov	r3, r0
 800d342:	2b00      	cmp	r3, #0
 800d344:	d132      	bne.n	800d3ac <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d346:	4b1c      	ldr	r3, [pc, #112]	; (800d3b8 <SD_read+0xa8>)
 800d348:	2200      	movs	r2, #0
 800d34a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d34c:	f7f9 fb3c 	bl	80069c8 <HAL_GetTick>
 800d350:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d352:	bf00      	nop
 800d354:	4b18      	ldr	r3, [pc, #96]	; (800d3b8 <SD_read+0xa8>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d108      	bne.n	800d36e <SD_read+0x5e>
 800d35c:	f7f9 fb34 	bl	80069c8 <HAL_GetTick>
 800d360:	4602      	mov	r2, r0
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	1ad3      	subs	r3, r2, r3
 800d366:	f247 522f 	movw	r2, #29999	; 0x752f
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d9f2      	bls.n	800d354 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800d36e:	4b12      	ldr	r3, [pc, #72]	; (800d3b8 <SD_read+0xa8>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d102      	bne.n	800d37c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d376:	2301      	movs	r3, #1
 800d378:	75fb      	strb	r3, [r7, #23]
 800d37a:	e017      	b.n	800d3ac <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d37c:	4b0e      	ldr	r3, [pc, #56]	; (800d3b8 <SD_read+0xa8>)
 800d37e:	2200      	movs	r2, #0
 800d380:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d382:	f7f9 fb21 	bl	80069c8 <HAL_GetTick>
 800d386:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d388:	e007      	b.n	800d39a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d38a:	f7ff ff0b 	bl	800d1a4 <BSP_SD_GetCardState>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d102      	bne.n	800d39a <SD_read+0x8a>
          {
            res = RES_OK;
 800d394:	2300      	movs	r3, #0
 800d396:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d398:	e008      	b.n	800d3ac <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d39a:	f7f9 fb15 	bl	80069c8 <HAL_GetTick>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	1ad3      	subs	r3, r2, r3
 800d3a4:	f247 522f 	movw	r2, #29999	; 0x752f
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d9ee      	bls.n	800d38a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d3ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3718      	adds	r7, #24
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	20000610 	.word	0x20000610

0800d3bc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b086      	sub	sp, #24
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60b9      	str	r1, [r7, #8]
 800d3c4:	607a      	str	r2, [r7, #4]
 800d3c6:	603b      	str	r3, [r7, #0]
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d3d0:	4b24      	ldr	r3, [pc, #144]	; (800d464 <SD_write+0xa8>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d3d6:	f247 5030 	movw	r0, #30000	; 0x7530
 800d3da:	f7ff ff33 	bl	800d244 <SD_CheckStatusWithTimeout>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	da01      	bge.n	800d3e8 <SD_write+0x2c>
  {
    return res;
 800d3e4:	7dfb      	ldrb	r3, [r7, #23]
 800d3e6:	e038      	b.n	800d45a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d3e8:	683a      	ldr	r2, [r7, #0]
 800d3ea:	6879      	ldr	r1, [r7, #4]
 800d3ec:	68b8      	ldr	r0, [r7, #8]
 800d3ee:	f7ff febf 	bl	800d170 <BSP_SD_WriteBlocks_DMA>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d12f      	bne.n	800d458 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d3f8:	f7f9 fae6 	bl	80069c8 <HAL_GetTick>
 800d3fc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d3fe:	bf00      	nop
 800d400:	4b18      	ldr	r3, [pc, #96]	; (800d464 <SD_write+0xa8>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d108      	bne.n	800d41a <SD_write+0x5e>
 800d408:	f7f9 fade 	bl	80069c8 <HAL_GetTick>
 800d40c:	4602      	mov	r2, r0
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	1ad3      	subs	r3, r2, r3
 800d412:	f247 522f 	movw	r2, #29999	; 0x752f
 800d416:	4293      	cmp	r3, r2
 800d418:	d9f2      	bls.n	800d400 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800d41a:	4b12      	ldr	r3, [pc, #72]	; (800d464 <SD_write+0xa8>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d102      	bne.n	800d428 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d422:	2301      	movs	r3, #1
 800d424:	75fb      	strb	r3, [r7, #23]
 800d426:	e017      	b.n	800d458 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d428:	4b0e      	ldr	r3, [pc, #56]	; (800d464 <SD_write+0xa8>)
 800d42a:	2200      	movs	r2, #0
 800d42c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d42e:	f7f9 facb 	bl	80069c8 <HAL_GetTick>
 800d432:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d434:	e007      	b.n	800d446 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d436:	f7ff feb5 	bl	800d1a4 <BSP_SD_GetCardState>
 800d43a:	4603      	mov	r3, r0
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d102      	bne.n	800d446 <SD_write+0x8a>
          {
            res = RES_OK;
 800d440:	2300      	movs	r3, #0
 800d442:	75fb      	strb	r3, [r7, #23]
            break;
 800d444:	e008      	b.n	800d458 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d446:	f7f9 fabf 	bl	80069c8 <HAL_GetTick>
 800d44a:	4602      	mov	r2, r0
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	f247 522f 	movw	r2, #29999	; 0x752f
 800d454:	4293      	cmp	r3, r2
 800d456:	d9ee      	bls.n	800d436 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d458:	7dfb      	ldrb	r3, [r7, #23]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3718      	adds	r7, #24
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	2000060c 	.word	0x2000060c

0800d468 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b08c      	sub	sp, #48	; 0x30
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	4603      	mov	r3, r0
 800d470:	603a      	str	r2, [r7, #0]
 800d472:	71fb      	strb	r3, [r7, #7]
 800d474:	460b      	mov	r3, r1
 800d476:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d478:	2301      	movs	r3, #1
 800d47a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d47e:	4b25      	ldr	r3, [pc, #148]	; (800d514 <SD_ioctl+0xac>)
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	b2db      	uxtb	r3, r3
 800d484:	f003 0301 	and.w	r3, r3, #1
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d001      	beq.n	800d490 <SD_ioctl+0x28>
 800d48c:	2303      	movs	r3, #3
 800d48e:	e03c      	b.n	800d50a <SD_ioctl+0xa2>

  switch (cmd)
 800d490:	79bb      	ldrb	r3, [r7, #6]
 800d492:	2b03      	cmp	r3, #3
 800d494:	d834      	bhi.n	800d500 <SD_ioctl+0x98>
 800d496:	a201      	add	r2, pc, #4	; (adr r2, 800d49c <SD_ioctl+0x34>)
 800d498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d49c:	0800d4ad 	.word	0x0800d4ad
 800d4a0:	0800d4b5 	.word	0x0800d4b5
 800d4a4:	0800d4cd 	.word	0x0800d4cd
 800d4a8:	0800d4e7 	.word	0x0800d4e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d4b2:	e028      	b.n	800d506 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d4b4:	f107 030c 	add.w	r3, r7, #12
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7ff fe83 	bl	800d1c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d4be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d4ca:	e01c      	b.n	800d506 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d4cc:	f107 030c 	add.w	r3, r7, #12
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7ff fe77 	bl	800d1c4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d8:	b29a      	uxth	r2, r3
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d4e4:	e00f      	b.n	800d506 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d4e6:	f107 030c 	add.w	r3, r7, #12
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7ff fe6a 	bl	800d1c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f2:	0a5a      	lsrs	r2, r3, #9
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d4fe:	e002      	b.n	800d506 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d500:	2304      	movs	r3, #4
 800d502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d506:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3730      	adds	r7, #48	; 0x30
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	20000009 	.word	0x20000009

0800d518 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d518:	b480      	push	{r7}
 800d51a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d51c:	4b03      	ldr	r3, [pc, #12]	; (800d52c <BSP_SD_WriteCpltCallback+0x14>)
 800d51e:	2201      	movs	r2, #1
 800d520:	601a      	str	r2, [r3, #0]
}
 800d522:	bf00      	nop
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr
 800d52c:	2000060c 	.word	0x2000060c

0800d530 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d530:	b480      	push	{r7}
 800d532:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d534:	4b03      	ldr	r3, [pc, #12]	; (800d544 <BSP_SD_ReadCpltCallback+0x14>)
 800d536:	2201      	movs	r2, #1
 800d538:	601a      	str	r2, [r3, #0]
}
 800d53a:	bf00      	nop
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr
 800d544:	20000610 	.word	0x20000610

0800d548 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	4603      	mov	r3, r0
 800d550:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d552:	79fb      	ldrb	r3, [r7, #7]
 800d554:	4a08      	ldr	r2, [pc, #32]	; (800d578 <disk_status+0x30>)
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	4413      	add	r3, r2
 800d55a:	685b      	ldr	r3, [r3, #4]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	79fa      	ldrb	r2, [r7, #7]
 800d560:	4905      	ldr	r1, [pc, #20]	; (800d578 <disk_status+0x30>)
 800d562:	440a      	add	r2, r1
 800d564:	7a12      	ldrb	r2, [r2, #8]
 800d566:	4610      	mov	r0, r2
 800d568:	4798      	blx	r3
 800d56a:	4603      	mov	r3, r0
 800d56c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d570:	4618      	mov	r0, r3
 800d572:	3710      	adds	r7, #16
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}
 800d578:	2000063c 	.word	0x2000063c

0800d57c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
 800d582:	4603      	mov	r3, r0
 800d584:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d586:	2300      	movs	r3, #0
 800d588:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d58a:	79fb      	ldrb	r3, [r7, #7]
 800d58c:	4a0d      	ldr	r2, [pc, #52]	; (800d5c4 <disk_initialize+0x48>)
 800d58e:	5cd3      	ldrb	r3, [r2, r3]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d111      	bne.n	800d5b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d594:	79fb      	ldrb	r3, [r7, #7]
 800d596:	4a0b      	ldr	r2, [pc, #44]	; (800d5c4 <disk_initialize+0x48>)
 800d598:	2101      	movs	r1, #1
 800d59a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d59c:	79fb      	ldrb	r3, [r7, #7]
 800d59e:	4a09      	ldr	r2, [pc, #36]	; (800d5c4 <disk_initialize+0x48>)
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	4413      	add	r3, r2
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	79fa      	ldrb	r2, [r7, #7]
 800d5aa:	4906      	ldr	r1, [pc, #24]	; (800d5c4 <disk_initialize+0x48>)
 800d5ac:	440a      	add	r2, r1
 800d5ae:	7a12      	ldrb	r2, [r2, #8]
 800d5b0:	4610      	mov	r0, r2
 800d5b2:	4798      	blx	r3
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	2000063c 	.word	0x2000063c

0800d5c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d5c8:	b590      	push	{r4, r7, lr}
 800d5ca:	b087      	sub	sp, #28
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	60b9      	str	r1, [r7, #8]
 800d5d0:	607a      	str	r2, [r7, #4]
 800d5d2:	603b      	str	r3, [r7, #0]
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d5d8:	7bfb      	ldrb	r3, [r7, #15]
 800d5da:	4a0a      	ldr	r2, [pc, #40]	; (800d604 <disk_read+0x3c>)
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	4413      	add	r3, r2
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	689c      	ldr	r4, [r3, #8]
 800d5e4:	7bfb      	ldrb	r3, [r7, #15]
 800d5e6:	4a07      	ldr	r2, [pc, #28]	; (800d604 <disk_read+0x3c>)
 800d5e8:	4413      	add	r3, r2
 800d5ea:	7a18      	ldrb	r0, [r3, #8]
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	68b9      	ldr	r1, [r7, #8]
 800d5f2:	47a0      	blx	r4
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d5f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	371c      	adds	r7, #28
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd90      	pop	{r4, r7, pc}
 800d602:	bf00      	nop
 800d604:	2000063c 	.word	0x2000063c

0800d608 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d608:	b590      	push	{r4, r7, lr}
 800d60a:	b087      	sub	sp, #28
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60b9      	str	r1, [r7, #8]
 800d610:	607a      	str	r2, [r7, #4]
 800d612:	603b      	str	r3, [r7, #0]
 800d614:	4603      	mov	r3, r0
 800d616:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d618:	7bfb      	ldrb	r3, [r7, #15]
 800d61a:	4a0a      	ldr	r2, [pc, #40]	; (800d644 <disk_write+0x3c>)
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	4413      	add	r3, r2
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	68dc      	ldr	r4, [r3, #12]
 800d624:	7bfb      	ldrb	r3, [r7, #15]
 800d626:	4a07      	ldr	r2, [pc, #28]	; (800d644 <disk_write+0x3c>)
 800d628:	4413      	add	r3, r2
 800d62a:	7a18      	ldrb	r0, [r3, #8]
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	68b9      	ldr	r1, [r7, #8]
 800d632:	47a0      	blx	r4
 800d634:	4603      	mov	r3, r0
 800d636:	75fb      	strb	r3, [r7, #23]
  return res;
 800d638:	7dfb      	ldrb	r3, [r7, #23]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	371c      	adds	r7, #28
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd90      	pop	{r4, r7, pc}
 800d642:	bf00      	nop
 800d644:	2000063c 	.word	0x2000063c

0800d648 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d648:	b480      	push	{r7}
 800d64a:	b085      	sub	sp, #20
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	3301      	adds	r3, #1
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d658:	89fb      	ldrh	r3, [r7, #14]
 800d65a:	021b      	lsls	r3, r3, #8
 800d65c:	b21a      	sxth	r2, r3
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	b21b      	sxth	r3, r3
 800d664:	4313      	orrs	r3, r2
 800d666:	b21b      	sxth	r3, r3
 800d668:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d66a:	89fb      	ldrh	r3, [r7, #14]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3714      	adds	r7, #20
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d678:	b480      	push	{r7}
 800d67a:	b085      	sub	sp, #20
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	3303      	adds	r3, #3
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	021b      	lsls	r3, r3, #8
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	3202      	adds	r2, #2
 800d690:	7812      	ldrb	r2, [r2, #0]
 800d692:	4313      	orrs	r3, r2
 800d694:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	021b      	lsls	r3, r3, #8
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	3201      	adds	r2, #1
 800d69e:	7812      	ldrb	r2, [r2, #0]
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	021b      	lsls	r3, r3, #8
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	7812      	ldrb	r2, [r2, #0]
 800d6ac:	4313      	orrs	r3, r2
 800d6ae:	60fb      	str	r3, [r7, #12]
	return rv;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3714      	adds	r7, #20
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6bc:	4770      	bx	lr
	...

0800d6c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	60fb      	str	r3, [r7, #12]
 800d6cc:	e010      	b.n	800d6f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d6ce:	4a0d      	ldr	r2, [pc, #52]	; (800d704 <clear_lock+0x44>)
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	011b      	lsls	r3, r3, #4
 800d6d4:	4413      	add	r3, r2
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d105      	bne.n	800d6ea <clear_lock+0x2a>
 800d6de:	4a09      	ldr	r2, [pc, #36]	; (800d704 <clear_lock+0x44>)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	011b      	lsls	r3, r3, #4
 800d6e4:	4413      	add	r3, r2
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	60fb      	str	r3, [r7, #12]
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d9eb      	bls.n	800d6ce <clear_lock+0xe>
	}
}
 800d6f6:	bf00      	nop
 800d6f8:	bf00      	nop
 800d6fa:	3714      	adds	r7, #20
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr
 800d704:	2000061c 	.word	0x2000061c

0800d708 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d710:	2300      	movs	r3, #0
 800d712:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	78db      	ldrb	r3, [r3, #3]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d034      	beq.n	800d786 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d720:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	7858      	ldrb	r0, [r3, #1]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d72c:	2301      	movs	r3, #1
 800d72e:	697a      	ldr	r2, [r7, #20]
 800d730:	f7ff ff6a 	bl	800d608 <disk_write>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d002      	beq.n	800d740 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d73a:	2301      	movs	r3, #1
 800d73c:	73fb      	strb	r3, [r7, #15]
 800d73e:	e022      	b.n	800d786 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2200      	movs	r2, #0
 800d744:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6a1b      	ldr	r3, [r3, #32]
 800d74a:	697a      	ldr	r2, [r7, #20]
 800d74c:	1ad2      	subs	r2, r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	699b      	ldr	r3, [r3, #24]
 800d752:	429a      	cmp	r2, r3
 800d754:	d217      	bcs.n	800d786 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	789b      	ldrb	r3, [r3, #2]
 800d75a:	613b      	str	r3, [r7, #16]
 800d75c:	e010      	b.n	800d780 <sync_window+0x78>
					wsect += fs->fsize;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	699b      	ldr	r3, [r3, #24]
 800d762:	697a      	ldr	r2, [r7, #20]
 800d764:	4413      	add	r3, r2
 800d766:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	7858      	ldrb	r0, [r3, #1]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d772:	2301      	movs	r3, #1
 800d774:	697a      	ldr	r2, [r7, #20]
 800d776:	f7ff ff47 	bl	800d608 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	3b01      	subs	r3, #1
 800d77e:	613b      	str	r3, [r7, #16]
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	2b01      	cmp	r3, #1
 800d784:	d8eb      	bhi.n	800d75e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d786:	7bfb      	ldrb	r3, [r7, #15]
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3718      	adds	r7, #24
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b084      	sub	sp, #16
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d79a:	2300      	movs	r3, #0
 800d79c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a2:	683a      	ldr	r2, [r7, #0]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d01b      	beq.n	800d7e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f7ff ffad 	bl	800d708 <sync_window>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d7b2:	7bfb      	ldrb	r3, [r7, #15]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d113      	bne.n	800d7e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	7858      	ldrb	r0, [r3, #1]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	683a      	ldr	r2, [r7, #0]
 800d7c6:	f7ff feff 	bl	800d5c8 <disk_read>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d004      	beq.n	800d7da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d7d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	683a      	ldr	r2, [r7, #0]
 800d7de:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800d7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d7ea:	b480      	push	{r7}
 800d7ec:	b087      	sub	sp, #28
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d7f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d7f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d031      	beq.n	800d864 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	617b      	str	r3, [r7, #20]
 800d806:	e002      	b.n	800d80e <get_ldnumber+0x24>
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	3301      	adds	r3, #1
 800d80c:	617b      	str	r3, [r7, #20]
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	2b20      	cmp	r3, #32
 800d814:	d903      	bls.n	800d81e <get_ldnumber+0x34>
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	2b3a      	cmp	r3, #58	; 0x3a
 800d81c:	d1f4      	bne.n	800d808 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	2b3a      	cmp	r3, #58	; 0x3a
 800d824:	d11c      	bne.n	800d860 <get_ldnumber+0x76>
			tp = *path;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	1c5a      	adds	r2, r3, #1
 800d830:	60fa      	str	r2, [r7, #12]
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	3b30      	subs	r3, #48	; 0x30
 800d836:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	2b09      	cmp	r3, #9
 800d83c:	d80e      	bhi.n	800d85c <get_ldnumber+0x72>
 800d83e:	68fa      	ldr	r2, [r7, #12]
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	429a      	cmp	r2, r3
 800d844:	d10a      	bne.n	800d85c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d107      	bne.n	800d85c <get_ldnumber+0x72>
					vol = (int)i;
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	3301      	adds	r3, #1
 800d854:	617b      	str	r3, [r7, #20]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	697a      	ldr	r2, [r7, #20]
 800d85a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	e002      	b.n	800d866 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d860:	2300      	movs	r3, #0
 800d862:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d864:	693b      	ldr	r3, [r7, #16]
}
 800d866:	4618      	mov	r0, r3
 800d868:	371c      	adds	r7, #28
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr
	...

0800d874 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b082      	sub	sp, #8
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2200      	movs	r2, #0
 800d882:	70da      	strb	r2, [r3, #3]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f04f 32ff 	mov.w	r2, #4294967295
 800d88a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d88c:	6839      	ldr	r1, [r7, #0]
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f7ff ff7e 	bl	800d790 <move_window>
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <check_fs+0x2a>
 800d89a:	2304      	movs	r3, #4
 800d89c:	e038      	b.n	800d910 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	3330      	adds	r3, #48	; 0x30
 800d8a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7ff fece 	bl	800d648 <ld_word>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d001      	beq.n	800d8bc <check_fs+0x48>
 800d8b8:	2303      	movs	r3, #3
 800d8ba:	e029      	b.n	800d910 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d8c2:	2be9      	cmp	r3, #233	; 0xe9
 800d8c4:	d009      	beq.n	800d8da <check_fs+0x66>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d8cc:	2beb      	cmp	r3, #235	; 0xeb
 800d8ce:	d11e      	bne.n	800d90e <check_fs+0x9a>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d8d6:	2b90      	cmp	r3, #144	; 0x90
 800d8d8:	d119      	bne.n	800d90e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	3330      	adds	r3, #48	; 0x30
 800d8de:	3336      	adds	r3, #54	; 0x36
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7ff fec9 	bl	800d678 <ld_dword>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d8ec:	4a0a      	ldr	r2, [pc, #40]	; (800d918 <check_fs+0xa4>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d101      	bne.n	800d8f6 <check_fs+0x82>
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	e00c      	b.n	800d910 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	3330      	adds	r3, #48	; 0x30
 800d8fa:	3352      	adds	r3, #82	; 0x52
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7ff febb 	bl	800d678 <ld_dword>
 800d902:	4603      	mov	r3, r0
 800d904:	4a05      	ldr	r2, [pc, #20]	; (800d91c <check_fs+0xa8>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d101      	bne.n	800d90e <check_fs+0x9a>
 800d90a:	2300      	movs	r3, #0
 800d90c:	e000      	b.n	800d910 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d90e:	2302      	movs	r3, #2
}
 800d910:	4618      	mov	r0, r3
 800d912:	3708      	adds	r7, #8
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	00544146 	.word	0x00544146
 800d91c:	33544146 	.word	0x33544146

0800d920 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b096      	sub	sp, #88	; 0x58
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	4613      	mov	r3, r2
 800d92c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	2200      	movs	r2, #0
 800d932:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	f7ff ff58 	bl	800d7ea <get_ldnumber>
 800d93a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d93c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d93e:	2b00      	cmp	r3, #0
 800d940:	da01      	bge.n	800d946 <find_volume+0x26>
 800d942:	230b      	movs	r3, #11
 800d944:	e22d      	b.n	800dda2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d946:	4aa1      	ldr	r2, [pc, #644]	; (800dbcc <find_volume+0x2ac>)
 800d948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d94a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d94e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d952:	2b00      	cmp	r3, #0
 800d954:	d101      	bne.n	800d95a <find_volume+0x3a>
 800d956:	230c      	movs	r3, #12
 800d958:	e223      	b.n	800dda2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d95e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d960:	79fb      	ldrb	r3, [r7, #7]
 800d962:	f023 0301 	bic.w	r3, r3, #1
 800d966:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d01a      	beq.n	800d9a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d972:	785b      	ldrb	r3, [r3, #1]
 800d974:	4618      	mov	r0, r3
 800d976:	f7ff fde7 	bl	800d548 <disk_status>
 800d97a:	4603      	mov	r3, r0
 800d97c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d980:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d984:	f003 0301 	and.w	r3, r3, #1
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d10c      	bne.n	800d9a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d98c:	79fb      	ldrb	r3, [r7, #7]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d007      	beq.n	800d9a2 <find_volume+0x82>
 800d992:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d996:	f003 0304 	and.w	r3, r3, #4
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d001      	beq.n	800d9a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d99e:	230a      	movs	r3, #10
 800d9a0:	e1ff      	b.n	800dda2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	e1fd      	b.n	800dda2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b6:	785b      	ldrb	r3, [r3, #1]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7ff fddf 	bl	800d57c <disk_initialize>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d9c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9c8:	f003 0301 	and.w	r3, r3, #1
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d9d0:	2303      	movs	r3, #3
 800d9d2:	e1e6      	b.n	800dda2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d9d4:	79fb      	ldrb	r3, [r7, #7]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d007      	beq.n	800d9ea <find_volume+0xca>
 800d9da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9de:	f003 0304 	and.w	r3, r3, #4
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d001      	beq.n	800d9ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d9e6:	230a      	movs	r3, #10
 800d9e8:	e1db      	b.n	800dda2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d9ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d9f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d9f2:	f7ff ff3f 	bl	800d874 <check_fs>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d9fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da00:	2b02      	cmp	r3, #2
 800da02:	d149      	bne.n	800da98 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800da04:	2300      	movs	r3, #0
 800da06:	643b      	str	r3, [r7, #64]	; 0x40
 800da08:	e01e      	b.n	800da48 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800da0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da12:	011b      	lsls	r3, r3, #4
 800da14:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800da18:	4413      	add	r3, r2
 800da1a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800da1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1e:	3304      	adds	r3, #4
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d006      	beq.n	800da34 <find_volume+0x114>
 800da26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da28:	3308      	adds	r3, #8
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7ff fe24 	bl	800d678 <ld_dword>
 800da30:	4602      	mov	r2, r0
 800da32:	e000      	b.n	800da36 <find_volume+0x116>
 800da34:	2200      	movs	r2, #0
 800da36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	3358      	adds	r3, #88	; 0x58
 800da3c:	443b      	add	r3, r7
 800da3e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800da42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da44:	3301      	adds	r3, #1
 800da46:	643b      	str	r3, [r7, #64]	; 0x40
 800da48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da4a:	2b03      	cmp	r3, #3
 800da4c:	d9dd      	bls.n	800da0a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800da4e:	2300      	movs	r3, #0
 800da50:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800da52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da54:	2b00      	cmp	r3, #0
 800da56:	d002      	beq.n	800da5e <find_volume+0x13e>
 800da58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da5a:	3b01      	subs	r3, #1
 800da5c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800da5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da60:	009b      	lsls	r3, r3, #2
 800da62:	3358      	adds	r3, #88	; 0x58
 800da64:	443b      	add	r3, r7
 800da66:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800da6a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800da6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d005      	beq.n	800da7e <find_volume+0x15e>
 800da72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da76:	f7ff fefd 	bl	800d874 <check_fs>
 800da7a:	4603      	mov	r3, r0
 800da7c:	e000      	b.n	800da80 <find_volume+0x160>
 800da7e:	2303      	movs	r3, #3
 800da80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800da84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d905      	bls.n	800da98 <find_volume+0x178>
 800da8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da8e:	3301      	adds	r3, #1
 800da90:	643b      	str	r3, [r7, #64]	; 0x40
 800da92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da94:	2b03      	cmp	r3, #3
 800da96:	d9e2      	bls.n	800da5e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800da98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da9c:	2b04      	cmp	r3, #4
 800da9e:	d101      	bne.n	800daa4 <find_volume+0x184>
 800daa0:	2301      	movs	r3, #1
 800daa2:	e17e      	b.n	800dda2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800daa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d901      	bls.n	800dab0 <find_volume+0x190>
 800daac:	230d      	movs	r3, #13
 800daae:	e178      	b.n	800dda2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab2:	3330      	adds	r3, #48	; 0x30
 800dab4:	330b      	adds	r3, #11
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7ff fdc6 	bl	800d648 <ld_word>
 800dabc:	4603      	mov	r3, r0
 800dabe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dac2:	d001      	beq.n	800dac8 <find_volume+0x1a8>
 800dac4:	230d      	movs	r3, #13
 800dac6:	e16c      	b.n	800dda2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daca:	3330      	adds	r3, #48	; 0x30
 800dacc:	3316      	adds	r3, #22
 800dace:	4618      	mov	r0, r3
 800dad0:	f7ff fdba 	bl	800d648 <ld_word>
 800dad4:	4603      	mov	r3, r0
 800dad6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d106      	bne.n	800daec <find_volume+0x1cc>
 800dade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae0:	3330      	adds	r3, #48	; 0x30
 800dae2:	3324      	adds	r3, #36	; 0x24
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7ff fdc7 	bl	800d678 <ld_dword>
 800daea:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800daec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800daf0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800daf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800daf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafe:	789b      	ldrb	r3, [r3, #2]
 800db00:	2b01      	cmp	r3, #1
 800db02:	d005      	beq.n	800db10 <find_volume+0x1f0>
 800db04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db06:	789b      	ldrb	r3, [r3, #2]
 800db08:	2b02      	cmp	r3, #2
 800db0a:	d001      	beq.n	800db10 <find_volume+0x1f0>
 800db0c:	230d      	movs	r3, #13
 800db0e:	e148      	b.n	800dda2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800db10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db12:	789b      	ldrb	r3, [r3, #2]
 800db14:	461a      	mov	r2, r3
 800db16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db18:	fb02 f303 	mul.w	r3, r2, r3
 800db1c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800db1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db24:	b29a      	uxth	r2, r3
 800db26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db28:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800db2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2c:	895b      	ldrh	r3, [r3, #10]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d008      	beq.n	800db44 <find_volume+0x224>
 800db32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db34:	895b      	ldrh	r3, [r3, #10]
 800db36:	461a      	mov	r2, r3
 800db38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db3a:	895b      	ldrh	r3, [r3, #10]
 800db3c:	3b01      	subs	r3, #1
 800db3e:	4013      	ands	r3, r2
 800db40:	2b00      	cmp	r3, #0
 800db42:	d001      	beq.n	800db48 <find_volume+0x228>
 800db44:	230d      	movs	r3, #13
 800db46:	e12c      	b.n	800dda2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800db48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db4a:	3330      	adds	r3, #48	; 0x30
 800db4c:	3311      	adds	r3, #17
 800db4e:	4618      	mov	r0, r3
 800db50:	f7ff fd7a 	bl	800d648 <ld_word>
 800db54:	4603      	mov	r3, r0
 800db56:	461a      	mov	r2, r3
 800db58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db5a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800db5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db5e:	891b      	ldrh	r3, [r3, #8]
 800db60:	f003 030f 	and.w	r3, r3, #15
 800db64:	b29b      	uxth	r3, r3
 800db66:	2b00      	cmp	r3, #0
 800db68:	d001      	beq.n	800db6e <find_volume+0x24e>
 800db6a:	230d      	movs	r3, #13
 800db6c:	e119      	b.n	800dda2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800db6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db70:	3330      	adds	r3, #48	; 0x30
 800db72:	3313      	adds	r3, #19
 800db74:	4618      	mov	r0, r3
 800db76:	f7ff fd67 	bl	800d648 <ld_word>
 800db7a:	4603      	mov	r3, r0
 800db7c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800db7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db80:	2b00      	cmp	r3, #0
 800db82:	d106      	bne.n	800db92 <find_volume+0x272>
 800db84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db86:	3330      	adds	r3, #48	; 0x30
 800db88:	3320      	adds	r3, #32
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7ff fd74 	bl	800d678 <ld_dword>
 800db90:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800db92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db94:	3330      	adds	r3, #48	; 0x30
 800db96:	330e      	adds	r3, #14
 800db98:	4618      	mov	r0, r3
 800db9a:	f7ff fd55 	bl	800d648 <ld_word>
 800db9e:	4603      	mov	r3, r0
 800dba0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dba2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d101      	bne.n	800dbac <find_volume+0x28c>
 800dba8:	230d      	movs	r3, #13
 800dbaa:	e0fa      	b.n	800dda2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dbac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dbae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbb0:	4413      	add	r3, r2
 800dbb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbb4:	8912      	ldrh	r2, [r2, #8]
 800dbb6:	0912      	lsrs	r2, r2, #4
 800dbb8:	b292      	uxth	r2, r2
 800dbba:	4413      	add	r3, r2
 800dbbc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dbbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d204      	bcs.n	800dbd0 <find_volume+0x2b0>
 800dbc6:	230d      	movs	r3, #13
 800dbc8:	e0eb      	b.n	800dda2 <find_volume+0x482>
 800dbca:	bf00      	nop
 800dbcc:	20000614 	.word	0x20000614
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dbd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd4:	1ad3      	subs	r3, r2, r3
 800dbd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbd8:	8952      	ldrh	r2, [r2, #10]
 800dbda:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbde:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <find_volume+0x2ca>
 800dbe6:	230d      	movs	r3, #13
 800dbe8:	e0db      	b.n	800dda2 <find_volume+0x482>
		fmt = FS_FAT32;
 800dbea:	2303      	movs	r3, #3
 800dbec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d802      	bhi.n	800dc00 <find_volume+0x2e0>
 800dbfa:	2302      	movs	r3, #2
 800dbfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc02:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d802      	bhi.n	800dc10 <find_volume+0x2f0>
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc12:	1c9a      	adds	r2, r3, #2
 800dc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc16:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800dc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc1c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dc1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dc20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc22:	441a      	add	r2, r3
 800dc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc26:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800dc28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2c:	441a      	add	r2, r3
 800dc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc30:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800dc32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc36:	2b03      	cmp	r3, #3
 800dc38:	d11e      	bne.n	800dc78 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3c:	3330      	adds	r3, #48	; 0x30
 800dc3e:	332a      	adds	r3, #42	; 0x2a
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7ff fd01 	bl	800d648 <ld_word>
 800dc46:	4603      	mov	r3, r0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d001      	beq.n	800dc50 <find_volume+0x330>
 800dc4c:	230d      	movs	r3, #13
 800dc4e:	e0a8      	b.n	800dda2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc52:	891b      	ldrh	r3, [r3, #8]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d001      	beq.n	800dc5c <find_volume+0x33c>
 800dc58:	230d      	movs	r3, #13
 800dc5a:	e0a2      	b.n	800dda2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5e:	3330      	adds	r3, #48	; 0x30
 800dc60:	332c      	adds	r3, #44	; 0x2c
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7ff fd08 	bl	800d678 <ld_dword>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc70:	695b      	ldr	r3, [r3, #20]
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	647b      	str	r3, [r7, #68]	; 0x44
 800dc76:	e01f      	b.n	800dcb8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7a:	891b      	ldrh	r3, [r3, #8]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d101      	bne.n	800dc84 <find_volume+0x364>
 800dc80:	230d      	movs	r3, #13
 800dc82:	e08e      	b.n	800dda2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc86:	6a1a      	ldr	r2, [r3, #32]
 800dc88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc8a:	441a      	add	r2, r3
 800dc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dc90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc94:	2b02      	cmp	r3, #2
 800dc96:	d103      	bne.n	800dca0 <find_volume+0x380>
 800dc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9a:	695b      	ldr	r3, [r3, #20]
 800dc9c:	005b      	lsls	r3, r3, #1
 800dc9e:	e00a      	b.n	800dcb6 <find_volume+0x396>
 800dca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca2:	695a      	ldr	r2, [r3, #20]
 800dca4:	4613      	mov	r3, r2
 800dca6:	005b      	lsls	r3, r3, #1
 800dca8:	4413      	add	r3, r2
 800dcaa:	085a      	lsrs	r2, r3, #1
 800dcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcae:	695b      	ldr	r3, [r3, #20]
 800dcb0:	f003 0301 	and.w	r3, r3, #1
 800dcb4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dcb6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcba:	699a      	ldr	r2, [r3, #24]
 800dcbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcbe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800dcc2:	0a5b      	lsrs	r3, r3, #9
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d201      	bcs.n	800dccc <find_volume+0x3ac>
 800dcc8:	230d      	movs	r3, #13
 800dcca:	e06a      	b.n	800dda2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcce:	f04f 32ff 	mov.w	r2, #4294967295
 800dcd2:	611a      	str	r2, [r3, #16]
 800dcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd6:	691a      	ldr	r2, [r3, #16]
 800dcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcda:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800dcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcde:	2280      	movs	r2, #128	; 0x80
 800dce0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dce2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dce6:	2b03      	cmp	r3, #3
 800dce8:	d149      	bne.n	800dd7e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcec:	3330      	adds	r3, #48	; 0x30
 800dcee:	3330      	adds	r3, #48	; 0x30
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7ff fca9 	bl	800d648 <ld_word>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d140      	bne.n	800dd7e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dcfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcfe:	3301      	adds	r3, #1
 800dd00:	4619      	mov	r1, r3
 800dd02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd04:	f7ff fd44 	bl	800d790 <move_window>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d137      	bne.n	800dd7e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800dd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd10:	2200      	movs	r2, #0
 800dd12:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd16:	3330      	adds	r3, #48	; 0x30
 800dd18:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7ff fc93 	bl	800d648 <ld_word>
 800dd22:	4603      	mov	r3, r0
 800dd24:	461a      	mov	r2, r3
 800dd26:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d127      	bne.n	800dd7e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd30:	3330      	adds	r3, #48	; 0x30
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7ff fca0 	bl	800d678 <ld_dword>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	4a1c      	ldr	r2, [pc, #112]	; (800ddac <find_volume+0x48c>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d11e      	bne.n	800dd7e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd42:	3330      	adds	r3, #48	; 0x30
 800dd44:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7ff fc95 	bl	800d678 <ld_dword>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	4a17      	ldr	r2, [pc, #92]	; (800ddb0 <find_volume+0x490>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d113      	bne.n	800dd7e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd58:	3330      	adds	r3, #48	; 0x30
 800dd5a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7ff fc8a 	bl	800d678 <ld_dword>
 800dd64:	4602      	mov	r2, r0
 800dd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd68:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd6c:	3330      	adds	r3, #48	; 0x30
 800dd6e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7ff fc80 	bl	800d678 <ld_dword>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd80:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dd84:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dd86:	4b0b      	ldr	r3, [pc, #44]	; (800ddb4 <find_volume+0x494>)
 800dd88:	881b      	ldrh	r3, [r3, #0]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	b29a      	uxth	r2, r3
 800dd8e:	4b09      	ldr	r3, [pc, #36]	; (800ddb4 <find_volume+0x494>)
 800dd90:	801a      	strh	r2, [r3, #0]
 800dd92:	4b08      	ldr	r3, [pc, #32]	; (800ddb4 <find_volume+0x494>)
 800dd94:	881a      	ldrh	r2, [r3, #0]
 800dd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd98:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dd9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd9c:	f7ff fc90 	bl	800d6c0 <clear_lock>
#endif
	return FR_OK;
 800dda0:	2300      	movs	r3, #0
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3758      	adds	r7, #88	; 0x58
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	41615252 	.word	0x41615252
 800ddb0:	61417272 	.word	0x61417272
 800ddb4:	20000618 	.word	0x20000618

0800ddb8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b088      	sub	sp, #32
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	4613      	mov	r3, r2
 800ddc4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ddca:	f107 0310 	add.w	r3, r7, #16
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7ff fd0b 	bl	800d7ea <get_ldnumber>
 800ddd4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	da01      	bge.n	800dde0 <f_mount+0x28>
 800dddc:	230b      	movs	r3, #11
 800ddde:	e02b      	b.n	800de38 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dde0:	4a17      	ldr	r2, [pc, #92]	; (800de40 <f_mount+0x88>)
 800dde2:	69fb      	ldr	r3, [r7, #28]
 800dde4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dde8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d005      	beq.n	800ddfc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ddf0:	69b8      	ldr	r0, [r7, #24]
 800ddf2:	f7ff fc65 	bl	800d6c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ddf6:	69bb      	ldr	r3, [r7, #24]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d002      	beq.n	800de08 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2200      	movs	r2, #0
 800de06:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	490d      	ldr	r1, [pc, #52]	; (800de40 <f_mount+0x88>)
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d002      	beq.n	800de1e <f_mount+0x66>
 800de18:	79fb      	ldrb	r3, [r7, #7]
 800de1a:	2b01      	cmp	r3, #1
 800de1c:	d001      	beq.n	800de22 <f_mount+0x6a>
 800de1e:	2300      	movs	r3, #0
 800de20:	e00a      	b.n	800de38 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800de22:	f107 010c 	add.w	r1, r7, #12
 800de26:	f107 0308 	add.w	r3, r7, #8
 800de2a:	2200      	movs	r2, #0
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7ff fd77 	bl	800d920 <find_volume>
 800de32:	4603      	mov	r3, r0
 800de34:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800de36:	7dfb      	ldrb	r3, [r7, #23]
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3720      	adds	r7, #32
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	20000614 	.word	0x20000614

0800de44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800de44:	b480      	push	{r7}
 800de46:	b087      	sub	sp, #28
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	4613      	mov	r3, r2
 800de50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800de52:	2301      	movs	r3, #1
 800de54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800de56:	2300      	movs	r3, #0
 800de58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800de5a:	4b1f      	ldr	r3, [pc, #124]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de5c:	7a5b      	ldrb	r3, [r3, #9]
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	2b00      	cmp	r3, #0
 800de62:	d131      	bne.n	800dec8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800de64:	4b1c      	ldr	r3, [pc, #112]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de66:	7a5b      	ldrb	r3, [r3, #9]
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	461a      	mov	r2, r3
 800de6c:	4b1a      	ldr	r3, [pc, #104]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de6e:	2100      	movs	r1, #0
 800de70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800de72:	4b19      	ldr	r3, [pc, #100]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de74:	7a5b      	ldrb	r3, [r3, #9]
 800de76:	b2db      	uxtb	r3, r3
 800de78:	4a17      	ldr	r2, [pc, #92]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	4413      	add	r3, r2
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800de82:	4b15      	ldr	r3, [pc, #84]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de84:	7a5b      	ldrb	r3, [r3, #9]
 800de86:	b2db      	uxtb	r3, r3
 800de88:	461a      	mov	r2, r3
 800de8a:	4b13      	ldr	r3, [pc, #76]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de8c:	4413      	add	r3, r2
 800de8e:	79fa      	ldrb	r2, [r7, #7]
 800de90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800de92:	4b11      	ldr	r3, [pc, #68]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de94:	7a5b      	ldrb	r3, [r3, #9]
 800de96:	b2db      	uxtb	r3, r3
 800de98:	1c5a      	adds	r2, r3, #1
 800de9a:	b2d1      	uxtb	r1, r2
 800de9c:	4a0e      	ldr	r2, [pc, #56]	; (800ded8 <FATFS_LinkDriverEx+0x94>)
 800de9e:	7251      	strb	r1, [r2, #9]
 800dea0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dea2:	7dbb      	ldrb	r3, [r7, #22]
 800dea4:	3330      	adds	r3, #48	; 0x30
 800dea6:	b2da      	uxtb	r2, r3
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	3301      	adds	r3, #1
 800deb0:	223a      	movs	r2, #58	; 0x3a
 800deb2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	3302      	adds	r3, #2
 800deb8:	222f      	movs	r2, #47	; 0x2f
 800deba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	3303      	adds	r3, #3
 800dec0:	2200      	movs	r2, #0
 800dec2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dec4:	2300      	movs	r3, #0
 800dec6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800deca:	4618      	mov	r0, r3
 800decc:	371c      	adds	r7, #28
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr
 800ded6:	bf00      	nop
 800ded8:	2000063c 	.word	0x2000063c

0800dedc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dee6:	2200      	movs	r2, #0
 800dee8:	6839      	ldr	r1, [r7, #0]
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f7ff ffaa 	bl	800de44 <FATFS_LinkDriverEx>
 800def0:	4603      	mov	r3, r0
}
 800def2:	4618      	mov	r0, r3
 800def4:	3708      	adds	r7, #8
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <_ZdlPvj>:
 800defa:	f000 b986 	b.w	800e20a <_ZdlPv>

0800defe <_Znwj>:
 800defe:	2801      	cmp	r0, #1
 800df00:	bf38      	it	cc
 800df02:	2001      	movcc	r0, #1
 800df04:	b510      	push	{r4, lr}
 800df06:	4604      	mov	r4, r0
 800df08:	4620      	mov	r0, r4
 800df0a:	f000 f9bb 	bl	800e284 <malloc>
 800df0e:	b930      	cbnz	r0, 800df1e <_Znwj+0x20>
 800df10:	f000 f97e 	bl	800e210 <_ZSt15get_new_handlerv>
 800df14:	b908      	cbnz	r0, 800df1a <_Znwj+0x1c>
 800df16:	f000 f983 	bl	800e220 <abort>
 800df1a:	4780      	blx	r0
 800df1c:	e7f4      	b.n	800df08 <_Znwj+0xa>
 800df1e:	bd10      	pop	{r4, pc}

0800df20 <_ZNSaIcEC1Ev>:
 800df20:	4770      	bx	lr

0800df22 <_ZNSaIcED1Ev>:
 800df22:	4770      	bx	lr

0800df24 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 800df24:	68c3      	ldr	r3, [r0, #12]
 800df26:	689a      	ldr	r2, [r3, #8]
 800df28:	60c2      	str	r2, [r0, #12]
 800df2a:	b510      	push	{r4, lr}
 800df2c:	b102      	cbz	r2, 800df30 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 800df2e:	6050      	str	r0, [r2, #4]
 800df30:	6842      	ldr	r2, [r0, #4]
 800df32:	605a      	str	r2, [r3, #4]
 800df34:	680c      	ldr	r4, [r1, #0]
 800df36:	4284      	cmp	r4, r0
 800df38:	d103      	bne.n	800df42 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 800df3a:	600b      	str	r3, [r1, #0]
 800df3c:	6098      	str	r0, [r3, #8]
 800df3e:	6043      	str	r3, [r0, #4]
 800df40:	bd10      	pop	{r4, pc}
 800df42:	6891      	ldr	r1, [r2, #8]
 800df44:	4281      	cmp	r1, r0
 800df46:	bf0c      	ite	eq
 800df48:	6093      	streq	r3, [r2, #8]
 800df4a:	60d3      	strne	r3, [r2, #12]
 800df4c:	e7f6      	b.n	800df3c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0800df4e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 800df4e:	6883      	ldr	r3, [r0, #8]
 800df50:	68da      	ldr	r2, [r3, #12]
 800df52:	6082      	str	r2, [r0, #8]
 800df54:	b510      	push	{r4, lr}
 800df56:	b102      	cbz	r2, 800df5a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 800df58:	6050      	str	r0, [r2, #4]
 800df5a:	6842      	ldr	r2, [r0, #4]
 800df5c:	605a      	str	r2, [r3, #4]
 800df5e:	680c      	ldr	r4, [r1, #0]
 800df60:	4284      	cmp	r4, r0
 800df62:	d103      	bne.n	800df6c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 800df64:	600b      	str	r3, [r1, #0]
 800df66:	60d8      	str	r0, [r3, #12]
 800df68:	6043      	str	r3, [r0, #4]
 800df6a:	bd10      	pop	{r4, pc}
 800df6c:	68d1      	ldr	r1, [r2, #12]
 800df6e:	4281      	cmp	r1, r0
 800df70:	bf0c      	ite	eq
 800df72:	60d3      	streq	r3, [r2, #12]
 800df74:	6093      	strne	r3, [r2, #8]
 800df76:	e7f6      	b.n	800df66 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0800df78 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 800df78:	68c3      	ldr	r3, [r0, #12]
 800df7a:	b123      	cbz	r3, 800df86 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 800df7c:	4618      	mov	r0, r3
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d1fb      	bne.n	800df7c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 800df84:	4770      	bx	lr
 800df86:	6843      	ldr	r3, [r0, #4]
 800df88:	68da      	ldr	r2, [r3, #12]
 800df8a:	4282      	cmp	r2, r0
 800df8c:	d102      	bne.n	800df94 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 800df8e:	4618      	mov	r0, r3
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	e7f9      	b.n	800df88 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 800df94:	68c2      	ldr	r2, [r0, #12]
 800df96:	4293      	cmp	r3, r2
 800df98:	bf18      	it	ne
 800df9a:	4618      	movne	r0, r3
 800df9c:	4770      	bx	lr

0800df9e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 800df9e:	7803      	ldrb	r3, [r0, #0]
 800dfa0:	b933      	cbnz	r3, 800dfb0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 800dfa2:	6843      	ldr	r3, [r0, #4]
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	4283      	cmp	r3, r0
 800dfa8:	d102      	bne.n	800dfb0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	4618      	mov	r0, r3
 800dfae:	4770      	bx	lr
 800dfb0:	6882      	ldr	r2, [r0, #8]
 800dfb2:	b122      	cbz	r2, 800dfbe <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 800dfb4:	4613      	mov	r3, r2
 800dfb6:	68d2      	ldr	r2, [r2, #12]
 800dfb8:	2a00      	cmp	r2, #0
 800dfba:	d1fb      	bne.n	800dfb4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 800dfbc:	e7f6      	b.n	800dfac <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 800dfbe:	6843      	ldr	r3, [r0, #4]
 800dfc0:	689a      	ldr	r2, [r3, #8]
 800dfc2:	4282      	cmp	r2, r0
 800dfc4:	d1f2      	bne.n	800dfac <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	e7f9      	b.n	800dfc0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

0800dfcc <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 800dfcc:	f7ff bfd4 	b.w	800df78 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

0800dfd0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 800dfd0:	f7ff bfe5 	b.w	800df9e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0800dfd4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 800dfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfd8:	461e      	mov	r6, r3
 800dfda:	f103 0804 	add.w	r8, r3, #4
 800dfde:	2300      	movs	r3, #0
 800dfe0:	e9c1 3302 	strd	r3, r3, [r1, #8]
 800dfe4:	460c      	mov	r4, r1
 800dfe6:	604a      	str	r2, [r1, #4]
 800dfe8:	700b      	strb	r3, [r1, #0]
 800dfea:	b300      	cbz	r0, 800e02e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 800dfec:	4296      	cmp	r6, r2
 800dfee:	6091      	str	r1, [r2, #8]
 800dff0:	d118      	bne.n	800e024 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 800dff2:	6071      	str	r1, [r6, #4]
 800dff4:	60f4      	str	r4, [r6, #12]
 800dff6:	2701      	movs	r7, #1
 800dff8:	f04f 0900 	mov.w	r9, #0
 800dffc:	6873      	ldr	r3, [r6, #4]
 800dffe:	42a3      	cmp	r3, r4
 800e000:	d03f      	beq.n	800e082 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 800e002:	6860      	ldr	r0, [r4, #4]
 800e004:	7802      	ldrb	r2, [r0, #0]
 800e006:	2a00      	cmp	r2, #0
 800e008:	d13b      	bne.n	800e082 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 800e00a:	6845      	ldr	r5, [r0, #4]
 800e00c:	68ab      	ldr	r3, [r5, #8]
 800e00e:	4298      	cmp	r0, r3
 800e010:	d123      	bne.n	800e05a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 800e012:	68eb      	ldr	r3, [r5, #12]
 800e014:	b183      	cbz	r3, 800e038 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 800e016:	781a      	ldrb	r2, [r3, #0]
 800e018:	b972      	cbnz	r2, 800e038 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 800e01a:	7007      	strb	r7, [r0, #0]
 800e01c:	701f      	strb	r7, [r3, #0]
 800e01e:	702a      	strb	r2, [r5, #0]
 800e020:	462c      	mov	r4, r5
 800e022:	e7eb      	b.n	800dffc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 800e024:	68b3      	ldr	r3, [r6, #8]
 800e026:	4293      	cmp	r3, r2
 800e028:	d1e5      	bne.n	800dff6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 800e02a:	60b1      	str	r1, [r6, #8]
 800e02c:	e7e3      	b.n	800dff6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 800e02e:	60d1      	str	r1, [r2, #12]
 800e030:	68f3      	ldr	r3, [r6, #12]
 800e032:	4293      	cmp	r3, r2
 800e034:	d1df      	bne.n	800dff6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 800e036:	e7dd      	b.n	800dff4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 800e038:	68c3      	ldr	r3, [r0, #12]
 800e03a:	42a3      	cmp	r3, r4
 800e03c:	d103      	bne.n	800e046 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 800e03e:	4641      	mov	r1, r8
 800e040:	f7ff ff70 	bl	800df24 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800e044:	4604      	mov	r4, r0
 800e046:	6863      	ldr	r3, [r4, #4]
 800e048:	4641      	mov	r1, r8
 800e04a:	701f      	strb	r7, [r3, #0]
 800e04c:	4628      	mov	r0, r5
 800e04e:	f885 9000 	strb.w	r9, [r5]
 800e052:	f7ff ff7c 	bl	800df4e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800e056:	4625      	mov	r5, r4
 800e058:	e7e2      	b.n	800e020 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 800e05a:	b113      	cbz	r3, 800e062 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 800e05c:	781a      	ldrb	r2, [r3, #0]
 800e05e:	2a00      	cmp	r2, #0
 800e060:	d0db      	beq.n	800e01a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 800e062:	6883      	ldr	r3, [r0, #8]
 800e064:	42a3      	cmp	r3, r4
 800e066:	d103      	bne.n	800e070 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 800e068:	4641      	mov	r1, r8
 800e06a:	f7ff ff70 	bl	800df4e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800e06e:	4604      	mov	r4, r0
 800e070:	6863      	ldr	r3, [r4, #4]
 800e072:	4641      	mov	r1, r8
 800e074:	701f      	strb	r7, [r3, #0]
 800e076:	4628      	mov	r0, r5
 800e078:	f885 9000 	strb.w	r9, [r5]
 800e07c:	f7ff ff52 	bl	800df24 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800e080:	e7e9      	b.n	800e056 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 800e082:	2201      	movs	r2, #1
 800e084:	701a      	strb	r2, [r3, #0]
 800e086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e08a <_ZSt17__throw_bad_allocv>:
 800e08a:	b508      	push	{r3, lr}
 800e08c:	f000 f8c8 	bl	800e220 <abort>

0800e090 <_ZSt19__throw_logic_errorPKc>:
 800e090:	b508      	push	{r3, lr}
 800e092:	f000 f8c5 	bl	800e220 <abort>

0800e096 <_ZSt20__throw_length_errorPKc>:
 800e096:	b508      	push	{r3, lr}
 800e098:	f000 f8c2 	bl	800e220 <abort>

0800e09c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800e09c:	b10a      	cbz	r2, 800e0a2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800e09e:	f000 b901 	b.w	800e2a4 <memcpy>
 800e0a2:	4770      	bx	lr

0800e0a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800e0a4:	b508      	push	{r3, lr}
 800e0a6:	680b      	ldr	r3, [r1, #0]
 800e0a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0ac:	d302      	bcc.n	800e0b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800e0ae:	480d      	ldr	r0, [pc, #52]	; (800e0e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800e0b0:	f7ff fff1 	bl	800e096 <_ZSt20__throw_length_errorPKc>
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d90b      	bls.n	800e0d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800e0b8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800e0bc:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800e0c0:	d206      	bcs.n	800e0d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800e0c2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800e0c6:	bf2a      	itet	cs
 800e0c8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800e0cc:	6008      	strcc	r0, [r1, #0]
 800e0ce:	600b      	strcs	r3, [r1, #0]
 800e0d0:	6808      	ldr	r0, [r1, #0]
 800e0d2:	3001      	adds	r0, #1
 800e0d4:	d501      	bpl.n	800e0da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800e0d6:	f7ff ffd8 	bl	800e08a <_ZSt17__throw_bad_allocv>
 800e0da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e0de:	f7ff bf0e 	b.w	800defe <_Znwj>
 800e0e2:	bf00      	nop
 800e0e4:	08011c4c 	.word	0x08011c4c

0800e0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800e0e8:	f850 3b08 	ldr.w	r3, [r0], #8
 800e0ec:	4283      	cmp	r3, r0
 800e0ee:	d002      	beq.n	800e0f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f000 b88a 	b.w	800e20a <_ZdlPv>
 800e0f6:	4770      	bx	lr

0800e0f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800e0f8:	2a01      	cmp	r2, #1
 800e0fa:	b410      	push	{r4}
 800e0fc:	d104      	bne.n	800e108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800e0fe:	780a      	ldrb	r2, [r1, #0]
 800e100:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e104:	7002      	strb	r2, [r0, #0]
 800e106:	4770      	bx	lr
 800e108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e10c:	f7ff bfc6 	b.w	800e09c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800e110 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800e110:	b508      	push	{r3, lr}
 800e112:	1a52      	subs	r2, r2, r1
 800e114:	f7ff fff0 	bl	800e0f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800e118:	bd08      	pop	{r3, pc}

0800e11a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800e11a:	b508      	push	{r3, lr}
 800e11c:	1a52      	subs	r2, r2, r1
 800e11e:	f7ff ffeb 	bl	800e0f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800e122:	bd08      	pop	{r3, pc}

0800e124 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800e124:	b510      	push	{r4, lr}
 800e126:	4604      	mov	r4, r0
 800e128:	f7ff ffde 	bl	800e0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800e12c:	4620      	mov	r0, r4
 800e12e:	bd10      	pop	{r4, pc}

0800e130 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800e130:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e132:	4604      	mov	r4, r0
 800e134:	4616      	mov	r6, r2
 800e136:	460d      	mov	r5, r1
 800e138:	b919      	cbnz	r1, 800e142 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800e13a:	b112      	cbz	r2, 800e142 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800e13c:	480d      	ldr	r0, [pc, #52]	; (800e174 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800e13e:	f7ff ffa7 	bl	800e090 <_ZSt19__throw_logic_errorPKc>
 800e142:	1b73      	subs	r3, r6, r5
 800e144:	2b0f      	cmp	r3, #15
 800e146:	9301      	str	r3, [sp, #4]
 800e148:	d907      	bls.n	800e15a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800e14a:	2200      	movs	r2, #0
 800e14c:	a901      	add	r1, sp, #4
 800e14e:	4620      	mov	r0, r4
 800e150:	f7ff ffa8 	bl	800e0a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800e154:	9b01      	ldr	r3, [sp, #4]
 800e156:	6020      	str	r0, [r4, #0]
 800e158:	60a3      	str	r3, [r4, #8]
 800e15a:	4632      	mov	r2, r6
 800e15c:	4629      	mov	r1, r5
 800e15e:	6820      	ldr	r0, [r4, #0]
 800e160:	f7ff ffd6 	bl	800e110 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800e164:	9b01      	ldr	r3, [sp, #4]
 800e166:	6822      	ldr	r2, [r4, #0]
 800e168:	6063      	str	r3, [r4, #4]
 800e16a:	2100      	movs	r1, #0
 800e16c:	54d1      	strb	r1, [r2, r3]
 800e16e:	b002      	add	sp, #8
 800e170:	bd70      	pop	{r4, r5, r6, pc}
 800e172:	bf00      	nop
 800e174:	08011c64 	.word	0x08011c64

0800e178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800e178:	b538      	push	{r3, r4, r5, lr}
 800e17a:	f100 0308 	add.w	r3, r0, #8
 800e17e:	6003      	str	r3, [r0, #0]
 800e180:	e9d1 5200 	ldrd	r5, r2, [r1]
 800e184:	4604      	mov	r4, r0
 800e186:	f04f 0300 	mov.w	r3, #0
 800e18a:	442a      	add	r2, r5
 800e18c:	4629      	mov	r1, r5
 800e18e:	f7ff ffcf 	bl	800e130 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800e192:	4620      	mov	r0, r4
 800e194:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800e198:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e19a:	4604      	mov	r4, r0
 800e19c:	4616      	mov	r6, r2
 800e19e:	460d      	mov	r5, r1
 800e1a0:	b919      	cbnz	r1, 800e1aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800e1a2:	b112      	cbz	r2, 800e1aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800e1a4:	480d      	ldr	r0, [pc, #52]	; (800e1dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800e1a6:	f7ff ff73 	bl	800e090 <_ZSt19__throw_logic_errorPKc>
 800e1aa:	1b73      	subs	r3, r6, r5
 800e1ac:	2b0f      	cmp	r3, #15
 800e1ae:	9301      	str	r3, [sp, #4]
 800e1b0:	d907      	bls.n	800e1c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	a901      	add	r1, sp, #4
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	f7ff ff74 	bl	800e0a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800e1bc:	9b01      	ldr	r3, [sp, #4]
 800e1be:	6020      	str	r0, [r4, #0]
 800e1c0:	60a3      	str	r3, [r4, #8]
 800e1c2:	4632      	mov	r2, r6
 800e1c4:	4629      	mov	r1, r5
 800e1c6:	6820      	ldr	r0, [r4, #0]
 800e1c8:	f7ff ffa7 	bl	800e11a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800e1cc:	9b01      	ldr	r3, [sp, #4]
 800e1ce:	6822      	ldr	r2, [r4, #0]
 800e1d0:	6063      	str	r3, [r4, #4]
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	54d1      	strb	r1, [r2, r3]
 800e1d6:	b002      	add	sp, #8
 800e1d8:	bd70      	pop	{r4, r5, r6, pc}
 800e1da:	bf00      	nop
 800e1dc:	08011c64 	.word	0x08011c64

0800e1e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800e1e0:	b538      	push	{r3, r4, r5, lr}
 800e1e2:	f100 0308 	add.w	r3, r0, #8
 800e1e6:	4604      	mov	r4, r0
 800e1e8:	6003      	str	r3, [r0, #0]
 800e1ea:	460d      	mov	r5, r1
 800e1ec:	b159      	cbz	r1, 800e206 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800e1ee:	4608      	mov	r0, r1
 800e1f0:	f7f2 f85e 	bl	80002b0 <strlen>
 800e1f4:	182a      	adds	r2, r5, r0
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	f04f 0300 	mov.w	r3, #0
 800e1fc:	4629      	mov	r1, r5
 800e1fe:	f7ff ffcb 	bl	800e198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800e202:	4620      	mov	r0, r4
 800e204:	bd38      	pop	{r3, r4, r5, pc}
 800e206:	2201      	movs	r2, #1
 800e208:	e7f5      	b.n	800e1f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800e20a <_ZdlPv>:
 800e20a:	f000 b843 	b.w	800e294 <free>
	...

0800e210 <_ZSt15get_new_handlerv>:
 800e210:	4b02      	ldr	r3, [pc, #8]	; (800e21c <_ZSt15get_new_handlerv+0xc>)
 800e212:	6818      	ldr	r0, [r3, #0]
 800e214:	f3bf 8f5b 	dmb	ish
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop
 800e21c:	20000648 	.word	0x20000648

0800e220 <abort>:
 800e220:	b508      	push	{r3, lr}
 800e222:	2006      	movs	r0, #6
 800e224:	f000 fdf0 	bl	800ee08 <raise>
 800e228:	2001      	movs	r0, #1
 800e22a:	f7f8 f9e7 	bl	80065fc <_exit>
	...

0800e230 <__errno>:
 800e230:	4b01      	ldr	r3, [pc, #4]	; (800e238 <__errno+0x8>)
 800e232:	6818      	ldr	r0, [r3, #0]
 800e234:	4770      	bx	lr
 800e236:	bf00      	nop
 800e238:	2000000c 	.word	0x2000000c

0800e23c <__libc_init_array>:
 800e23c:	b570      	push	{r4, r5, r6, lr}
 800e23e:	4d0d      	ldr	r5, [pc, #52]	; (800e274 <__libc_init_array+0x38>)
 800e240:	4c0d      	ldr	r4, [pc, #52]	; (800e278 <__libc_init_array+0x3c>)
 800e242:	1b64      	subs	r4, r4, r5
 800e244:	10a4      	asrs	r4, r4, #2
 800e246:	2600      	movs	r6, #0
 800e248:	42a6      	cmp	r6, r4
 800e24a:	d109      	bne.n	800e260 <__libc_init_array+0x24>
 800e24c:	4d0b      	ldr	r5, [pc, #44]	; (800e27c <__libc_init_array+0x40>)
 800e24e:	4c0c      	ldr	r4, [pc, #48]	; (800e280 <__libc_init_array+0x44>)
 800e250:	f002 ff02 	bl	8011058 <_init>
 800e254:	1b64      	subs	r4, r4, r5
 800e256:	10a4      	asrs	r4, r4, #2
 800e258:	2600      	movs	r6, #0
 800e25a:	42a6      	cmp	r6, r4
 800e25c:	d105      	bne.n	800e26a <__libc_init_array+0x2e>
 800e25e:	bd70      	pop	{r4, r5, r6, pc}
 800e260:	f855 3b04 	ldr.w	r3, [r5], #4
 800e264:	4798      	blx	r3
 800e266:	3601      	adds	r6, #1
 800e268:	e7ee      	b.n	800e248 <__libc_init_array+0xc>
 800e26a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e26e:	4798      	blx	r3
 800e270:	3601      	adds	r6, #1
 800e272:	e7f2      	b.n	800e25a <__libc_init_array+0x1e>
 800e274:	08012074 	.word	0x08012074
 800e278:	08012074 	.word	0x08012074
 800e27c:	08012074 	.word	0x08012074
 800e280:	08012080 	.word	0x08012080

0800e284 <malloc>:
 800e284:	4b02      	ldr	r3, [pc, #8]	; (800e290 <malloc+0xc>)
 800e286:	4601      	mov	r1, r0
 800e288:	6818      	ldr	r0, [r3, #0]
 800e28a:	f000 b8a7 	b.w	800e3dc <_malloc_r>
 800e28e:	bf00      	nop
 800e290:	2000000c 	.word	0x2000000c

0800e294 <free>:
 800e294:	4b02      	ldr	r3, [pc, #8]	; (800e2a0 <free+0xc>)
 800e296:	4601      	mov	r1, r0
 800e298:	6818      	ldr	r0, [r3, #0]
 800e29a:	f000 b833 	b.w	800e304 <_free_r>
 800e29e:	bf00      	nop
 800e2a0:	2000000c 	.word	0x2000000c

0800e2a4 <memcpy>:
 800e2a4:	440a      	add	r2, r1
 800e2a6:	4291      	cmp	r1, r2
 800e2a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2ac:	d100      	bne.n	800e2b0 <memcpy+0xc>
 800e2ae:	4770      	bx	lr
 800e2b0:	b510      	push	{r4, lr}
 800e2b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2ba:	4291      	cmp	r1, r2
 800e2bc:	d1f9      	bne.n	800e2b2 <memcpy+0xe>
 800e2be:	bd10      	pop	{r4, pc}

0800e2c0 <memmove>:
 800e2c0:	4288      	cmp	r0, r1
 800e2c2:	b510      	push	{r4, lr}
 800e2c4:	eb01 0402 	add.w	r4, r1, r2
 800e2c8:	d902      	bls.n	800e2d0 <memmove+0x10>
 800e2ca:	4284      	cmp	r4, r0
 800e2cc:	4623      	mov	r3, r4
 800e2ce:	d807      	bhi.n	800e2e0 <memmove+0x20>
 800e2d0:	1e43      	subs	r3, r0, #1
 800e2d2:	42a1      	cmp	r1, r4
 800e2d4:	d008      	beq.n	800e2e8 <memmove+0x28>
 800e2d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2de:	e7f8      	b.n	800e2d2 <memmove+0x12>
 800e2e0:	4402      	add	r2, r0
 800e2e2:	4601      	mov	r1, r0
 800e2e4:	428a      	cmp	r2, r1
 800e2e6:	d100      	bne.n	800e2ea <memmove+0x2a>
 800e2e8:	bd10      	pop	{r4, pc}
 800e2ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e2ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e2f2:	e7f7      	b.n	800e2e4 <memmove+0x24>

0800e2f4 <memset>:
 800e2f4:	4402      	add	r2, r0
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d100      	bne.n	800e2fe <memset+0xa>
 800e2fc:	4770      	bx	lr
 800e2fe:	f803 1b01 	strb.w	r1, [r3], #1
 800e302:	e7f9      	b.n	800e2f8 <memset+0x4>

0800e304 <_free_r>:
 800e304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e306:	2900      	cmp	r1, #0
 800e308:	d044      	beq.n	800e394 <_free_r+0x90>
 800e30a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e30e:	9001      	str	r0, [sp, #4]
 800e310:	2b00      	cmp	r3, #0
 800e312:	f1a1 0404 	sub.w	r4, r1, #4
 800e316:	bfb8      	it	lt
 800e318:	18e4      	addlt	r4, r4, r3
 800e31a:	f001 fc2f 	bl	800fb7c <__malloc_lock>
 800e31e:	4a1e      	ldr	r2, [pc, #120]	; (800e398 <_free_r+0x94>)
 800e320:	9801      	ldr	r0, [sp, #4]
 800e322:	6813      	ldr	r3, [r2, #0]
 800e324:	b933      	cbnz	r3, 800e334 <_free_r+0x30>
 800e326:	6063      	str	r3, [r4, #4]
 800e328:	6014      	str	r4, [r2, #0]
 800e32a:	b003      	add	sp, #12
 800e32c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e330:	f001 bc2a 	b.w	800fb88 <__malloc_unlock>
 800e334:	42a3      	cmp	r3, r4
 800e336:	d908      	bls.n	800e34a <_free_r+0x46>
 800e338:	6825      	ldr	r5, [r4, #0]
 800e33a:	1961      	adds	r1, r4, r5
 800e33c:	428b      	cmp	r3, r1
 800e33e:	bf01      	itttt	eq
 800e340:	6819      	ldreq	r1, [r3, #0]
 800e342:	685b      	ldreq	r3, [r3, #4]
 800e344:	1949      	addeq	r1, r1, r5
 800e346:	6021      	streq	r1, [r4, #0]
 800e348:	e7ed      	b.n	800e326 <_free_r+0x22>
 800e34a:	461a      	mov	r2, r3
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	b10b      	cbz	r3, 800e354 <_free_r+0x50>
 800e350:	42a3      	cmp	r3, r4
 800e352:	d9fa      	bls.n	800e34a <_free_r+0x46>
 800e354:	6811      	ldr	r1, [r2, #0]
 800e356:	1855      	adds	r5, r2, r1
 800e358:	42a5      	cmp	r5, r4
 800e35a:	d10b      	bne.n	800e374 <_free_r+0x70>
 800e35c:	6824      	ldr	r4, [r4, #0]
 800e35e:	4421      	add	r1, r4
 800e360:	1854      	adds	r4, r2, r1
 800e362:	42a3      	cmp	r3, r4
 800e364:	6011      	str	r1, [r2, #0]
 800e366:	d1e0      	bne.n	800e32a <_free_r+0x26>
 800e368:	681c      	ldr	r4, [r3, #0]
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	6053      	str	r3, [r2, #4]
 800e36e:	4421      	add	r1, r4
 800e370:	6011      	str	r1, [r2, #0]
 800e372:	e7da      	b.n	800e32a <_free_r+0x26>
 800e374:	d902      	bls.n	800e37c <_free_r+0x78>
 800e376:	230c      	movs	r3, #12
 800e378:	6003      	str	r3, [r0, #0]
 800e37a:	e7d6      	b.n	800e32a <_free_r+0x26>
 800e37c:	6825      	ldr	r5, [r4, #0]
 800e37e:	1961      	adds	r1, r4, r5
 800e380:	428b      	cmp	r3, r1
 800e382:	bf04      	itt	eq
 800e384:	6819      	ldreq	r1, [r3, #0]
 800e386:	685b      	ldreq	r3, [r3, #4]
 800e388:	6063      	str	r3, [r4, #4]
 800e38a:	bf04      	itt	eq
 800e38c:	1949      	addeq	r1, r1, r5
 800e38e:	6021      	streq	r1, [r4, #0]
 800e390:	6054      	str	r4, [r2, #4]
 800e392:	e7ca      	b.n	800e32a <_free_r+0x26>
 800e394:	b003      	add	sp, #12
 800e396:	bd30      	pop	{r4, r5, pc}
 800e398:	2000064c 	.word	0x2000064c

0800e39c <sbrk_aligned>:
 800e39c:	b570      	push	{r4, r5, r6, lr}
 800e39e:	4e0e      	ldr	r6, [pc, #56]	; (800e3d8 <sbrk_aligned+0x3c>)
 800e3a0:	460c      	mov	r4, r1
 800e3a2:	6831      	ldr	r1, [r6, #0]
 800e3a4:	4605      	mov	r5, r0
 800e3a6:	b911      	cbnz	r1, 800e3ae <sbrk_aligned+0x12>
 800e3a8:	f000 fcf6 	bl	800ed98 <_sbrk_r>
 800e3ac:	6030      	str	r0, [r6, #0]
 800e3ae:	4621      	mov	r1, r4
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	f000 fcf1 	bl	800ed98 <_sbrk_r>
 800e3b6:	1c43      	adds	r3, r0, #1
 800e3b8:	d00a      	beq.n	800e3d0 <sbrk_aligned+0x34>
 800e3ba:	1cc4      	adds	r4, r0, #3
 800e3bc:	f024 0403 	bic.w	r4, r4, #3
 800e3c0:	42a0      	cmp	r0, r4
 800e3c2:	d007      	beq.n	800e3d4 <sbrk_aligned+0x38>
 800e3c4:	1a21      	subs	r1, r4, r0
 800e3c6:	4628      	mov	r0, r5
 800e3c8:	f000 fce6 	bl	800ed98 <_sbrk_r>
 800e3cc:	3001      	adds	r0, #1
 800e3ce:	d101      	bne.n	800e3d4 <sbrk_aligned+0x38>
 800e3d0:	f04f 34ff 	mov.w	r4, #4294967295
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	bd70      	pop	{r4, r5, r6, pc}
 800e3d8:	20000650 	.word	0x20000650

0800e3dc <_malloc_r>:
 800e3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e0:	1ccd      	adds	r5, r1, #3
 800e3e2:	f025 0503 	bic.w	r5, r5, #3
 800e3e6:	3508      	adds	r5, #8
 800e3e8:	2d0c      	cmp	r5, #12
 800e3ea:	bf38      	it	cc
 800e3ec:	250c      	movcc	r5, #12
 800e3ee:	2d00      	cmp	r5, #0
 800e3f0:	4607      	mov	r7, r0
 800e3f2:	db01      	blt.n	800e3f8 <_malloc_r+0x1c>
 800e3f4:	42a9      	cmp	r1, r5
 800e3f6:	d905      	bls.n	800e404 <_malloc_r+0x28>
 800e3f8:	230c      	movs	r3, #12
 800e3fa:	603b      	str	r3, [r7, #0]
 800e3fc:	2600      	movs	r6, #0
 800e3fe:	4630      	mov	r0, r6
 800e400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e404:	4e2e      	ldr	r6, [pc, #184]	; (800e4c0 <_malloc_r+0xe4>)
 800e406:	f001 fbb9 	bl	800fb7c <__malloc_lock>
 800e40a:	6833      	ldr	r3, [r6, #0]
 800e40c:	461c      	mov	r4, r3
 800e40e:	bb34      	cbnz	r4, 800e45e <_malloc_r+0x82>
 800e410:	4629      	mov	r1, r5
 800e412:	4638      	mov	r0, r7
 800e414:	f7ff ffc2 	bl	800e39c <sbrk_aligned>
 800e418:	1c43      	adds	r3, r0, #1
 800e41a:	4604      	mov	r4, r0
 800e41c:	d14d      	bne.n	800e4ba <_malloc_r+0xde>
 800e41e:	6834      	ldr	r4, [r6, #0]
 800e420:	4626      	mov	r6, r4
 800e422:	2e00      	cmp	r6, #0
 800e424:	d140      	bne.n	800e4a8 <_malloc_r+0xcc>
 800e426:	6823      	ldr	r3, [r4, #0]
 800e428:	4631      	mov	r1, r6
 800e42a:	4638      	mov	r0, r7
 800e42c:	eb04 0803 	add.w	r8, r4, r3
 800e430:	f000 fcb2 	bl	800ed98 <_sbrk_r>
 800e434:	4580      	cmp	r8, r0
 800e436:	d13a      	bne.n	800e4ae <_malloc_r+0xd2>
 800e438:	6821      	ldr	r1, [r4, #0]
 800e43a:	3503      	adds	r5, #3
 800e43c:	1a6d      	subs	r5, r5, r1
 800e43e:	f025 0503 	bic.w	r5, r5, #3
 800e442:	3508      	adds	r5, #8
 800e444:	2d0c      	cmp	r5, #12
 800e446:	bf38      	it	cc
 800e448:	250c      	movcc	r5, #12
 800e44a:	4629      	mov	r1, r5
 800e44c:	4638      	mov	r0, r7
 800e44e:	f7ff ffa5 	bl	800e39c <sbrk_aligned>
 800e452:	3001      	adds	r0, #1
 800e454:	d02b      	beq.n	800e4ae <_malloc_r+0xd2>
 800e456:	6823      	ldr	r3, [r4, #0]
 800e458:	442b      	add	r3, r5
 800e45a:	6023      	str	r3, [r4, #0]
 800e45c:	e00e      	b.n	800e47c <_malloc_r+0xa0>
 800e45e:	6822      	ldr	r2, [r4, #0]
 800e460:	1b52      	subs	r2, r2, r5
 800e462:	d41e      	bmi.n	800e4a2 <_malloc_r+0xc6>
 800e464:	2a0b      	cmp	r2, #11
 800e466:	d916      	bls.n	800e496 <_malloc_r+0xba>
 800e468:	1961      	adds	r1, r4, r5
 800e46a:	42a3      	cmp	r3, r4
 800e46c:	6025      	str	r5, [r4, #0]
 800e46e:	bf18      	it	ne
 800e470:	6059      	strne	r1, [r3, #4]
 800e472:	6863      	ldr	r3, [r4, #4]
 800e474:	bf08      	it	eq
 800e476:	6031      	streq	r1, [r6, #0]
 800e478:	5162      	str	r2, [r4, r5]
 800e47a:	604b      	str	r3, [r1, #4]
 800e47c:	4638      	mov	r0, r7
 800e47e:	f104 060b 	add.w	r6, r4, #11
 800e482:	f001 fb81 	bl	800fb88 <__malloc_unlock>
 800e486:	f026 0607 	bic.w	r6, r6, #7
 800e48a:	1d23      	adds	r3, r4, #4
 800e48c:	1af2      	subs	r2, r6, r3
 800e48e:	d0b6      	beq.n	800e3fe <_malloc_r+0x22>
 800e490:	1b9b      	subs	r3, r3, r6
 800e492:	50a3      	str	r3, [r4, r2]
 800e494:	e7b3      	b.n	800e3fe <_malloc_r+0x22>
 800e496:	6862      	ldr	r2, [r4, #4]
 800e498:	42a3      	cmp	r3, r4
 800e49a:	bf0c      	ite	eq
 800e49c:	6032      	streq	r2, [r6, #0]
 800e49e:	605a      	strne	r2, [r3, #4]
 800e4a0:	e7ec      	b.n	800e47c <_malloc_r+0xa0>
 800e4a2:	4623      	mov	r3, r4
 800e4a4:	6864      	ldr	r4, [r4, #4]
 800e4a6:	e7b2      	b.n	800e40e <_malloc_r+0x32>
 800e4a8:	4634      	mov	r4, r6
 800e4aa:	6876      	ldr	r6, [r6, #4]
 800e4ac:	e7b9      	b.n	800e422 <_malloc_r+0x46>
 800e4ae:	230c      	movs	r3, #12
 800e4b0:	603b      	str	r3, [r7, #0]
 800e4b2:	4638      	mov	r0, r7
 800e4b4:	f001 fb68 	bl	800fb88 <__malloc_unlock>
 800e4b8:	e7a1      	b.n	800e3fe <_malloc_r+0x22>
 800e4ba:	6025      	str	r5, [r4, #0]
 800e4bc:	e7de      	b.n	800e47c <_malloc_r+0xa0>
 800e4be:	bf00      	nop
 800e4c0:	2000064c 	.word	0x2000064c

0800e4c4 <__cvt>:
 800e4c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4c8:	ec55 4b10 	vmov	r4, r5, d0
 800e4cc:	2d00      	cmp	r5, #0
 800e4ce:	460e      	mov	r6, r1
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	462b      	mov	r3, r5
 800e4d4:	bfbb      	ittet	lt
 800e4d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e4da:	461d      	movlt	r5, r3
 800e4dc:	2300      	movge	r3, #0
 800e4de:	232d      	movlt	r3, #45	; 0x2d
 800e4e0:	700b      	strb	r3, [r1, #0]
 800e4e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e4e8:	4691      	mov	r9, r2
 800e4ea:	f023 0820 	bic.w	r8, r3, #32
 800e4ee:	bfbc      	itt	lt
 800e4f0:	4622      	movlt	r2, r4
 800e4f2:	4614      	movlt	r4, r2
 800e4f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e4f8:	d005      	beq.n	800e506 <__cvt+0x42>
 800e4fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e4fe:	d100      	bne.n	800e502 <__cvt+0x3e>
 800e500:	3601      	adds	r6, #1
 800e502:	2102      	movs	r1, #2
 800e504:	e000      	b.n	800e508 <__cvt+0x44>
 800e506:	2103      	movs	r1, #3
 800e508:	ab03      	add	r3, sp, #12
 800e50a:	9301      	str	r3, [sp, #4]
 800e50c:	ab02      	add	r3, sp, #8
 800e50e:	9300      	str	r3, [sp, #0]
 800e510:	ec45 4b10 	vmov	d0, r4, r5
 800e514:	4653      	mov	r3, sl
 800e516:	4632      	mov	r2, r6
 800e518:	f000 fd3e 	bl	800ef98 <_dtoa_r>
 800e51c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e520:	4607      	mov	r7, r0
 800e522:	d102      	bne.n	800e52a <__cvt+0x66>
 800e524:	f019 0f01 	tst.w	r9, #1
 800e528:	d022      	beq.n	800e570 <__cvt+0xac>
 800e52a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e52e:	eb07 0906 	add.w	r9, r7, r6
 800e532:	d110      	bne.n	800e556 <__cvt+0x92>
 800e534:	783b      	ldrb	r3, [r7, #0]
 800e536:	2b30      	cmp	r3, #48	; 0x30
 800e538:	d10a      	bne.n	800e550 <__cvt+0x8c>
 800e53a:	2200      	movs	r2, #0
 800e53c:	2300      	movs	r3, #0
 800e53e:	4620      	mov	r0, r4
 800e540:	4629      	mov	r1, r5
 800e542:	f7f2 fae1 	bl	8000b08 <__aeabi_dcmpeq>
 800e546:	b918      	cbnz	r0, 800e550 <__cvt+0x8c>
 800e548:	f1c6 0601 	rsb	r6, r6, #1
 800e54c:	f8ca 6000 	str.w	r6, [sl]
 800e550:	f8da 3000 	ldr.w	r3, [sl]
 800e554:	4499      	add	r9, r3
 800e556:	2200      	movs	r2, #0
 800e558:	2300      	movs	r3, #0
 800e55a:	4620      	mov	r0, r4
 800e55c:	4629      	mov	r1, r5
 800e55e:	f7f2 fad3 	bl	8000b08 <__aeabi_dcmpeq>
 800e562:	b108      	cbz	r0, 800e568 <__cvt+0xa4>
 800e564:	f8cd 900c 	str.w	r9, [sp, #12]
 800e568:	2230      	movs	r2, #48	; 0x30
 800e56a:	9b03      	ldr	r3, [sp, #12]
 800e56c:	454b      	cmp	r3, r9
 800e56e:	d307      	bcc.n	800e580 <__cvt+0xbc>
 800e570:	9b03      	ldr	r3, [sp, #12]
 800e572:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e574:	1bdb      	subs	r3, r3, r7
 800e576:	4638      	mov	r0, r7
 800e578:	6013      	str	r3, [r2, #0]
 800e57a:	b004      	add	sp, #16
 800e57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e580:	1c59      	adds	r1, r3, #1
 800e582:	9103      	str	r1, [sp, #12]
 800e584:	701a      	strb	r2, [r3, #0]
 800e586:	e7f0      	b.n	800e56a <__cvt+0xa6>

0800e588 <__exponent>:
 800e588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e58a:	4603      	mov	r3, r0
 800e58c:	2900      	cmp	r1, #0
 800e58e:	bfb8      	it	lt
 800e590:	4249      	neglt	r1, r1
 800e592:	f803 2b02 	strb.w	r2, [r3], #2
 800e596:	bfb4      	ite	lt
 800e598:	222d      	movlt	r2, #45	; 0x2d
 800e59a:	222b      	movge	r2, #43	; 0x2b
 800e59c:	2909      	cmp	r1, #9
 800e59e:	7042      	strb	r2, [r0, #1]
 800e5a0:	dd2a      	ble.n	800e5f8 <__exponent+0x70>
 800e5a2:	f10d 0407 	add.w	r4, sp, #7
 800e5a6:	46a4      	mov	ip, r4
 800e5a8:	270a      	movs	r7, #10
 800e5aa:	46a6      	mov	lr, r4
 800e5ac:	460a      	mov	r2, r1
 800e5ae:	fb91 f6f7 	sdiv	r6, r1, r7
 800e5b2:	fb07 1516 	mls	r5, r7, r6, r1
 800e5b6:	3530      	adds	r5, #48	; 0x30
 800e5b8:	2a63      	cmp	r2, #99	; 0x63
 800e5ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800e5be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e5c2:	4631      	mov	r1, r6
 800e5c4:	dcf1      	bgt.n	800e5aa <__exponent+0x22>
 800e5c6:	3130      	adds	r1, #48	; 0x30
 800e5c8:	f1ae 0502 	sub.w	r5, lr, #2
 800e5cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e5d0:	1c44      	adds	r4, r0, #1
 800e5d2:	4629      	mov	r1, r5
 800e5d4:	4561      	cmp	r1, ip
 800e5d6:	d30a      	bcc.n	800e5ee <__exponent+0x66>
 800e5d8:	f10d 0209 	add.w	r2, sp, #9
 800e5dc:	eba2 020e 	sub.w	r2, r2, lr
 800e5e0:	4565      	cmp	r5, ip
 800e5e2:	bf88      	it	hi
 800e5e4:	2200      	movhi	r2, #0
 800e5e6:	4413      	add	r3, r2
 800e5e8:	1a18      	subs	r0, r3, r0
 800e5ea:	b003      	add	sp, #12
 800e5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e5f6:	e7ed      	b.n	800e5d4 <__exponent+0x4c>
 800e5f8:	2330      	movs	r3, #48	; 0x30
 800e5fa:	3130      	adds	r1, #48	; 0x30
 800e5fc:	7083      	strb	r3, [r0, #2]
 800e5fe:	70c1      	strb	r1, [r0, #3]
 800e600:	1d03      	adds	r3, r0, #4
 800e602:	e7f1      	b.n	800e5e8 <__exponent+0x60>

0800e604 <_printf_float>:
 800e604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e608:	ed2d 8b02 	vpush	{d8}
 800e60c:	b08d      	sub	sp, #52	; 0x34
 800e60e:	460c      	mov	r4, r1
 800e610:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e614:	4616      	mov	r6, r2
 800e616:	461f      	mov	r7, r3
 800e618:	4605      	mov	r5, r0
 800e61a:	f001 faab 	bl	800fb74 <_localeconv_r>
 800e61e:	f8d0 a000 	ldr.w	sl, [r0]
 800e622:	4650      	mov	r0, sl
 800e624:	f7f1 fe44 	bl	80002b0 <strlen>
 800e628:	2300      	movs	r3, #0
 800e62a:	930a      	str	r3, [sp, #40]	; 0x28
 800e62c:	6823      	ldr	r3, [r4, #0]
 800e62e:	9305      	str	r3, [sp, #20]
 800e630:	f8d8 3000 	ldr.w	r3, [r8]
 800e634:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e638:	3307      	adds	r3, #7
 800e63a:	f023 0307 	bic.w	r3, r3, #7
 800e63e:	f103 0208 	add.w	r2, r3, #8
 800e642:	f8c8 2000 	str.w	r2, [r8]
 800e646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e64e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e652:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e656:	9307      	str	r3, [sp, #28]
 800e658:	f8cd 8018 	str.w	r8, [sp, #24]
 800e65c:	ee08 0a10 	vmov	s16, r0
 800e660:	4b9f      	ldr	r3, [pc, #636]	; (800e8e0 <_printf_float+0x2dc>)
 800e662:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e666:	f04f 32ff 	mov.w	r2, #4294967295
 800e66a:	f7f2 fa7f 	bl	8000b6c <__aeabi_dcmpun>
 800e66e:	bb88      	cbnz	r0, 800e6d4 <_printf_float+0xd0>
 800e670:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e674:	4b9a      	ldr	r3, [pc, #616]	; (800e8e0 <_printf_float+0x2dc>)
 800e676:	f04f 32ff 	mov.w	r2, #4294967295
 800e67a:	f7f2 fa59 	bl	8000b30 <__aeabi_dcmple>
 800e67e:	bb48      	cbnz	r0, 800e6d4 <_printf_float+0xd0>
 800e680:	2200      	movs	r2, #0
 800e682:	2300      	movs	r3, #0
 800e684:	4640      	mov	r0, r8
 800e686:	4649      	mov	r1, r9
 800e688:	f7f2 fa48 	bl	8000b1c <__aeabi_dcmplt>
 800e68c:	b110      	cbz	r0, 800e694 <_printf_float+0x90>
 800e68e:	232d      	movs	r3, #45	; 0x2d
 800e690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e694:	4b93      	ldr	r3, [pc, #588]	; (800e8e4 <_printf_float+0x2e0>)
 800e696:	4894      	ldr	r0, [pc, #592]	; (800e8e8 <_printf_float+0x2e4>)
 800e698:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e69c:	bf94      	ite	ls
 800e69e:	4698      	movls	r8, r3
 800e6a0:	4680      	movhi	r8, r0
 800e6a2:	2303      	movs	r3, #3
 800e6a4:	6123      	str	r3, [r4, #16]
 800e6a6:	9b05      	ldr	r3, [sp, #20]
 800e6a8:	f023 0204 	bic.w	r2, r3, #4
 800e6ac:	6022      	str	r2, [r4, #0]
 800e6ae:	f04f 0900 	mov.w	r9, #0
 800e6b2:	9700      	str	r7, [sp, #0]
 800e6b4:	4633      	mov	r3, r6
 800e6b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800e6b8:	4621      	mov	r1, r4
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	f000 f9d8 	bl	800ea70 <_printf_common>
 800e6c0:	3001      	adds	r0, #1
 800e6c2:	f040 8090 	bne.w	800e7e6 <_printf_float+0x1e2>
 800e6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ca:	b00d      	add	sp, #52	; 0x34
 800e6cc:	ecbd 8b02 	vpop	{d8}
 800e6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d4:	4642      	mov	r2, r8
 800e6d6:	464b      	mov	r3, r9
 800e6d8:	4640      	mov	r0, r8
 800e6da:	4649      	mov	r1, r9
 800e6dc:	f7f2 fa46 	bl	8000b6c <__aeabi_dcmpun>
 800e6e0:	b140      	cbz	r0, 800e6f4 <_printf_float+0xf0>
 800e6e2:	464b      	mov	r3, r9
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	bfbc      	itt	lt
 800e6e8:	232d      	movlt	r3, #45	; 0x2d
 800e6ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e6ee:	487f      	ldr	r0, [pc, #508]	; (800e8ec <_printf_float+0x2e8>)
 800e6f0:	4b7f      	ldr	r3, [pc, #508]	; (800e8f0 <_printf_float+0x2ec>)
 800e6f2:	e7d1      	b.n	800e698 <_printf_float+0x94>
 800e6f4:	6863      	ldr	r3, [r4, #4]
 800e6f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e6fa:	9206      	str	r2, [sp, #24]
 800e6fc:	1c5a      	adds	r2, r3, #1
 800e6fe:	d13f      	bne.n	800e780 <_printf_float+0x17c>
 800e700:	2306      	movs	r3, #6
 800e702:	6063      	str	r3, [r4, #4]
 800e704:	9b05      	ldr	r3, [sp, #20]
 800e706:	6861      	ldr	r1, [r4, #4]
 800e708:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e70c:	2300      	movs	r3, #0
 800e70e:	9303      	str	r3, [sp, #12]
 800e710:	ab0a      	add	r3, sp, #40	; 0x28
 800e712:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e716:	ab09      	add	r3, sp, #36	; 0x24
 800e718:	ec49 8b10 	vmov	d0, r8, r9
 800e71c:	9300      	str	r3, [sp, #0]
 800e71e:	6022      	str	r2, [r4, #0]
 800e720:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e724:	4628      	mov	r0, r5
 800e726:	f7ff fecd 	bl	800e4c4 <__cvt>
 800e72a:	9b06      	ldr	r3, [sp, #24]
 800e72c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e72e:	2b47      	cmp	r3, #71	; 0x47
 800e730:	4680      	mov	r8, r0
 800e732:	d108      	bne.n	800e746 <_printf_float+0x142>
 800e734:	1cc8      	adds	r0, r1, #3
 800e736:	db02      	blt.n	800e73e <_printf_float+0x13a>
 800e738:	6863      	ldr	r3, [r4, #4]
 800e73a:	4299      	cmp	r1, r3
 800e73c:	dd41      	ble.n	800e7c2 <_printf_float+0x1be>
 800e73e:	f1ab 0b02 	sub.w	fp, fp, #2
 800e742:	fa5f fb8b 	uxtb.w	fp, fp
 800e746:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e74a:	d820      	bhi.n	800e78e <_printf_float+0x18a>
 800e74c:	3901      	subs	r1, #1
 800e74e:	465a      	mov	r2, fp
 800e750:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e754:	9109      	str	r1, [sp, #36]	; 0x24
 800e756:	f7ff ff17 	bl	800e588 <__exponent>
 800e75a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e75c:	1813      	adds	r3, r2, r0
 800e75e:	2a01      	cmp	r2, #1
 800e760:	4681      	mov	r9, r0
 800e762:	6123      	str	r3, [r4, #16]
 800e764:	dc02      	bgt.n	800e76c <_printf_float+0x168>
 800e766:	6822      	ldr	r2, [r4, #0]
 800e768:	07d2      	lsls	r2, r2, #31
 800e76a:	d501      	bpl.n	800e770 <_printf_float+0x16c>
 800e76c:	3301      	adds	r3, #1
 800e76e:	6123      	str	r3, [r4, #16]
 800e770:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e774:	2b00      	cmp	r3, #0
 800e776:	d09c      	beq.n	800e6b2 <_printf_float+0xae>
 800e778:	232d      	movs	r3, #45	; 0x2d
 800e77a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e77e:	e798      	b.n	800e6b2 <_printf_float+0xae>
 800e780:	9a06      	ldr	r2, [sp, #24]
 800e782:	2a47      	cmp	r2, #71	; 0x47
 800e784:	d1be      	bne.n	800e704 <_printf_float+0x100>
 800e786:	2b00      	cmp	r3, #0
 800e788:	d1bc      	bne.n	800e704 <_printf_float+0x100>
 800e78a:	2301      	movs	r3, #1
 800e78c:	e7b9      	b.n	800e702 <_printf_float+0xfe>
 800e78e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e792:	d118      	bne.n	800e7c6 <_printf_float+0x1c2>
 800e794:	2900      	cmp	r1, #0
 800e796:	6863      	ldr	r3, [r4, #4]
 800e798:	dd0b      	ble.n	800e7b2 <_printf_float+0x1ae>
 800e79a:	6121      	str	r1, [r4, #16]
 800e79c:	b913      	cbnz	r3, 800e7a4 <_printf_float+0x1a0>
 800e79e:	6822      	ldr	r2, [r4, #0]
 800e7a0:	07d0      	lsls	r0, r2, #31
 800e7a2:	d502      	bpl.n	800e7aa <_printf_float+0x1a6>
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	440b      	add	r3, r1
 800e7a8:	6123      	str	r3, [r4, #16]
 800e7aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800e7ac:	f04f 0900 	mov.w	r9, #0
 800e7b0:	e7de      	b.n	800e770 <_printf_float+0x16c>
 800e7b2:	b913      	cbnz	r3, 800e7ba <_printf_float+0x1b6>
 800e7b4:	6822      	ldr	r2, [r4, #0]
 800e7b6:	07d2      	lsls	r2, r2, #31
 800e7b8:	d501      	bpl.n	800e7be <_printf_float+0x1ba>
 800e7ba:	3302      	adds	r3, #2
 800e7bc:	e7f4      	b.n	800e7a8 <_printf_float+0x1a4>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e7f2      	b.n	800e7a8 <_printf_float+0x1a4>
 800e7c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e7c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7c8:	4299      	cmp	r1, r3
 800e7ca:	db05      	blt.n	800e7d8 <_printf_float+0x1d4>
 800e7cc:	6823      	ldr	r3, [r4, #0]
 800e7ce:	6121      	str	r1, [r4, #16]
 800e7d0:	07d8      	lsls	r0, r3, #31
 800e7d2:	d5ea      	bpl.n	800e7aa <_printf_float+0x1a6>
 800e7d4:	1c4b      	adds	r3, r1, #1
 800e7d6:	e7e7      	b.n	800e7a8 <_printf_float+0x1a4>
 800e7d8:	2900      	cmp	r1, #0
 800e7da:	bfd4      	ite	le
 800e7dc:	f1c1 0202 	rsble	r2, r1, #2
 800e7e0:	2201      	movgt	r2, #1
 800e7e2:	4413      	add	r3, r2
 800e7e4:	e7e0      	b.n	800e7a8 <_printf_float+0x1a4>
 800e7e6:	6823      	ldr	r3, [r4, #0]
 800e7e8:	055a      	lsls	r2, r3, #21
 800e7ea:	d407      	bmi.n	800e7fc <_printf_float+0x1f8>
 800e7ec:	6923      	ldr	r3, [r4, #16]
 800e7ee:	4642      	mov	r2, r8
 800e7f0:	4631      	mov	r1, r6
 800e7f2:	4628      	mov	r0, r5
 800e7f4:	47b8      	blx	r7
 800e7f6:	3001      	adds	r0, #1
 800e7f8:	d12c      	bne.n	800e854 <_printf_float+0x250>
 800e7fa:	e764      	b.n	800e6c6 <_printf_float+0xc2>
 800e7fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e800:	f240 80e0 	bls.w	800e9c4 <_printf_float+0x3c0>
 800e804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e808:	2200      	movs	r2, #0
 800e80a:	2300      	movs	r3, #0
 800e80c:	f7f2 f97c 	bl	8000b08 <__aeabi_dcmpeq>
 800e810:	2800      	cmp	r0, #0
 800e812:	d034      	beq.n	800e87e <_printf_float+0x27a>
 800e814:	4a37      	ldr	r2, [pc, #220]	; (800e8f4 <_printf_float+0x2f0>)
 800e816:	2301      	movs	r3, #1
 800e818:	4631      	mov	r1, r6
 800e81a:	4628      	mov	r0, r5
 800e81c:	47b8      	blx	r7
 800e81e:	3001      	adds	r0, #1
 800e820:	f43f af51 	beq.w	800e6c6 <_printf_float+0xc2>
 800e824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e828:	429a      	cmp	r2, r3
 800e82a:	db02      	blt.n	800e832 <_printf_float+0x22e>
 800e82c:	6823      	ldr	r3, [r4, #0]
 800e82e:	07d8      	lsls	r0, r3, #31
 800e830:	d510      	bpl.n	800e854 <_printf_float+0x250>
 800e832:	ee18 3a10 	vmov	r3, s16
 800e836:	4652      	mov	r2, sl
 800e838:	4631      	mov	r1, r6
 800e83a:	4628      	mov	r0, r5
 800e83c:	47b8      	blx	r7
 800e83e:	3001      	adds	r0, #1
 800e840:	f43f af41 	beq.w	800e6c6 <_printf_float+0xc2>
 800e844:	f04f 0800 	mov.w	r8, #0
 800e848:	f104 091a 	add.w	r9, r4, #26
 800e84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e84e:	3b01      	subs	r3, #1
 800e850:	4543      	cmp	r3, r8
 800e852:	dc09      	bgt.n	800e868 <_printf_float+0x264>
 800e854:	6823      	ldr	r3, [r4, #0]
 800e856:	079b      	lsls	r3, r3, #30
 800e858:	f100 8105 	bmi.w	800ea66 <_printf_float+0x462>
 800e85c:	68e0      	ldr	r0, [r4, #12]
 800e85e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e860:	4298      	cmp	r0, r3
 800e862:	bfb8      	it	lt
 800e864:	4618      	movlt	r0, r3
 800e866:	e730      	b.n	800e6ca <_printf_float+0xc6>
 800e868:	2301      	movs	r3, #1
 800e86a:	464a      	mov	r2, r9
 800e86c:	4631      	mov	r1, r6
 800e86e:	4628      	mov	r0, r5
 800e870:	47b8      	blx	r7
 800e872:	3001      	adds	r0, #1
 800e874:	f43f af27 	beq.w	800e6c6 <_printf_float+0xc2>
 800e878:	f108 0801 	add.w	r8, r8, #1
 800e87c:	e7e6      	b.n	800e84c <_printf_float+0x248>
 800e87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e880:	2b00      	cmp	r3, #0
 800e882:	dc39      	bgt.n	800e8f8 <_printf_float+0x2f4>
 800e884:	4a1b      	ldr	r2, [pc, #108]	; (800e8f4 <_printf_float+0x2f0>)
 800e886:	2301      	movs	r3, #1
 800e888:	4631      	mov	r1, r6
 800e88a:	4628      	mov	r0, r5
 800e88c:	47b8      	blx	r7
 800e88e:	3001      	adds	r0, #1
 800e890:	f43f af19 	beq.w	800e6c6 <_printf_float+0xc2>
 800e894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e898:	4313      	orrs	r3, r2
 800e89a:	d102      	bne.n	800e8a2 <_printf_float+0x29e>
 800e89c:	6823      	ldr	r3, [r4, #0]
 800e89e:	07d9      	lsls	r1, r3, #31
 800e8a0:	d5d8      	bpl.n	800e854 <_printf_float+0x250>
 800e8a2:	ee18 3a10 	vmov	r3, s16
 800e8a6:	4652      	mov	r2, sl
 800e8a8:	4631      	mov	r1, r6
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	47b8      	blx	r7
 800e8ae:	3001      	adds	r0, #1
 800e8b0:	f43f af09 	beq.w	800e6c6 <_printf_float+0xc2>
 800e8b4:	f04f 0900 	mov.w	r9, #0
 800e8b8:	f104 0a1a 	add.w	sl, r4, #26
 800e8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8be:	425b      	negs	r3, r3
 800e8c0:	454b      	cmp	r3, r9
 800e8c2:	dc01      	bgt.n	800e8c8 <_printf_float+0x2c4>
 800e8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8c6:	e792      	b.n	800e7ee <_printf_float+0x1ea>
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	4652      	mov	r2, sl
 800e8cc:	4631      	mov	r1, r6
 800e8ce:	4628      	mov	r0, r5
 800e8d0:	47b8      	blx	r7
 800e8d2:	3001      	adds	r0, #1
 800e8d4:	f43f aef7 	beq.w	800e6c6 <_printf_float+0xc2>
 800e8d8:	f109 0901 	add.w	r9, r9, #1
 800e8dc:	e7ee      	b.n	800e8bc <_printf_float+0x2b8>
 800e8de:	bf00      	nop
 800e8e0:	7fefffff 	.word	0x7fefffff
 800e8e4:	08011c94 	.word	0x08011c94
 800e8e8:	08011c98 	.word	0x08011c98
 800e8ec:	08011ca0 	.word	0x08011ca0
 800e8f0:	08011c9c 	.word	0x08011c9c
 800e8f4:	08011ca4 	.word	0x08011ca4
 800e8f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	bfa8      	it	ge
 800e900:	461a      	movge	r2, r3
 800e902:	2a00      	cmp	r2, #0
 800e904:	4691      	mov	r9, r2
 800e906:	dc37      	bgt.n	800e978 <_printf_float+0x374>
 800e908:	f04f 0b00 	mov.w	fp, #0
 800e90c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e910:	f104 021a 	add.w	r2, r4, #26
 800e914:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e916:	9305      	str	r3, [sp, #20]
 800e918:	eba3 0309 	sub.w	r3, r3, r9
 800e91c:	455b      	cmp	r3, fp
 800e91e:	dc33      	bgt.n	800e988 <_printf_float+0x384>
 800e920:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e924:	429a      	cmp	r2, r3
 800e926:	db3b      	blt.n	800e9a0 <_printf_float+0x39c>
 800e928:	6823      	ldr	r3, [r4, #0]
 800e92a:	07da      	lsls	r2, r3, #31
 800e92c:	d438      	bmi.n	800e9a0 <_printf_float+0x39c>
 800e92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e930:	9a05      	ldr	r2, [sp, #20]
 800e932:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e934:	1a9a      	subs	r2, r3, r2
 800e936:	eba3 0901 	sub.w	r9, r3, r1
 800e93a:	4591      	cmp	r9, r2
 800e93c:	bfa8      	it	ge
 800e93e:	4691      	movge	r9, r2
 800e940:	f1b9 0f00 	cmp.w	r9, #0
 800e944:	dc35      	bgt.n	800e9b2 <_printf_float+0x3ae>
 800e946:	f04f 0800 	mov.w	r8, #0
 800e94a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e94e:	f104 0a1a 	add.w	sl, r4, #26
 800e952:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e956:	1a9b      	subs	r3, r3, r2
 800e958:	eba3 0309 	sub.w	r3, r3, r9
 800e95c:	4543      	cmp	r3, r8
 800e95e:	f77f af79 	ble.w	800e854 <_printf_float+0x250>
 800e962:	2301      	movs	r3, #1
 800e964:	4652      	mov	r2, sl
 800e966:	4631      	mov	r1, r6
 800e968:	4628      	mov	r0, r5
 800e96a:	47b8      	blx	r7
 800e96c:	3001      	adds	r0, #1
 800e96e:	f43f aeaa 	beq.w	800e6c6 <_printf_float+0xc2>
 800e972:	f108 0801 	add.w	r8, r8, #1
 800e976:	e7ec      	b.n	800e952 <_printf_float+0x34e>
 800e978:	4613      	mov	r3, r2
 800e97a:	4631      	mov	r1, r6
 800e97c:	4642      	mov	r2, r8
 800e97e:	4628      	mov	r0, r5
 800e980:	47b8      	blx	r7
 800e982:	3001      	adds	r0, #1
 800e984:	d1c0      	bne.n	800e908 <_printf_float+0x304>
 800e986:	e69e      	b.n	800e6c6 <_printf_float+0xc2>
 800e988:	2301      	movs	r3, #1
 800e98a:	4631      	mov	r1, r6
 800e98c:	4628      	mov	r0, r5
 800e98e:	9205      	str	r2, [sp, #20]
 800e990:	47b8      	blx	r7
 800e992:	3001      	adds	r0, #1
 800e994:	f43f ae97 	beq.w	800e6c6 <_printf_float+0xc2>
 800e998:	9a05      	ldr	r2, [sp, #20]
 800e99a:	f10b 0b01 	add.w	fp, fp, #1
 800e99e:	e7b9      	b.n	800e914 <_printf_float+0x310>
 800e9a0:	ee18 3a10 	vmov	r3, s16
 800e9a4:	4652      	mov	r2, sl
 800e9a6:	4631      	mov	r1, r6
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	47b8      	blx	r7
 800e9ac:	3001      	adds	r0, #1
 800e9ae:	d1be      	bne.n	800e92e <_printf_float+0x32a>
 800e9b0:	e689      	b.n	800e6c6 <_printf_float+0xc2>
 800e9b2:	9a05      	ldr	r2, [sp, #20]
 800e9b4:	464b      	mov	r3, r9
 800e9b6:	4442      	add	r2, r8
 800e9b8:	4631      	mov	r1, r6
 800e9ba:	4628      	mov	r0, r5
 800e9bc:	47b8      	blx	r7
 800e9be:	3001      	adds	r0, #1
 800e9c0:	d1c1      	bne.n	800e946 <_printf_float+0x342>
 800e9c2:	e680      	b.n	800e6c6 <_printf_float+0xc2>
 800e9c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9c6:	2a01      	cmp	r2, #1
 800e9c8:	dc01      	bgt.n	800e9ce <_printf_float+0x3ca>
 800e9ca:	07db      	lsls	r3, r3, #31
 800e9cc:	d538      	bpl.n	800ea40 <_printf_float+0x43c>
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	4642      	mov	r2, r8
 800e9d2:	4631      	mov	r1, r6
 800e9d4:	4628      	mov	r0, r5
 800e9d6:	47b8      	blx	r7
 800e9d8:	3001      	adds	r0, #1
 800e9da:	f43f ae74 	beq.w	800e6c6 <_printf_float+0xc2>
 800e9de:	ee18 3a10 	vmov	r3, s16
 800e9e2:	4652      	mov	r2, sl
 800e9e4:	4631      	mov	r1, r6
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	47b8      	blx	r7
 800e9ea:	3001      	adds	r0, #1
 800e9ec:	f43f ae6b 	beq.w	800e6c6 <_printf_float+0xc2>
 800e9f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	f7f2 f886 	bl	8000b08 <__aeabi_dcmpeq>
 800e9fc:	b9d8      	cbnz	r0, 800ea36 <_printf_float+0x432>
 800e9fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea00:	f108 0201 	add.w	r2, r8, #1
 800ea04:	3b01      	subs	r3, #1
 800ea06:	4631      	mov	r1, r6
 800ea08:	4628      	mov	r0, r5
 800ea0a:	47b8      	blx	r7
 800ea0c:	3001      	adds	r0, #1
 800ea0e:	d10e      	bne.n	800ea2e <_printf_float+0x42a>
 800ea10:	e659      	b.n	800e6c6 <_printf_float+0xc2>
 800ea12:	2301      	movs	r3, #1
 800ea14:	4652      	mov	r2, sl
 800ea16:	4631      	mov	r1, r6
 800ea18:	4628      	mov	r0, r5
 800ea1a:	47b8      	blx	r7
 800ea1c:	3001      	adds	r0, #1
 800ea1e:	f43f ae52 	beq.w	800e6c6 <_printf_float+0xc2>
 800ea22:	f108 0801 	add.w	r8, r8, #1
 800ea26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea28:	3b01      	subs	r3, #1
 800ea2a:	4543      	cmp	r3, r8
 800ea2c:	dcf1      	bgt.n	800ea12 <_printf_float+0x40e>
 800ea2e:	464b      	mov	r3, r9
 800ea30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ea34:	e6dc      	b.n	800e7f0 <_printf_float+0x1ec>
 800ea36:	f04f 0800 	mov.w	r8, #0
 800ea3a:	f104 0a1a 	add.w	sl, r4, #26
 800ea3e:	e7f2      	b.n	800ea26 <_printf_float+0x422>
 800ea40:	2301      	movs	r3, #1
 800ea42:	4642      	mov	r2, r8
 800ea44:	e7df      	b.n	800ea06 <_printf_float+0x402>
 800ea46:	2301      	movs	r3, #1
 800ea48:	464a      	mov	r2, r9
 800ea4a:	4631      	mov	r1, r6
 800ea4c:	4628      	mov	r0, r5
 800ea4e:	47b8      	blx	r7
 800ea50:	3001      	adds	r0, #1
 800ea52:	f43f ae38 	beq.w	800e6c6 <_printf_float+0xc2>
 800ea56:	f108 0801 	add.w	r8, r8, #1
 800ea5a:	68e3      	ldr	r3, [r4, #12]
 800ea5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea5e:	1a5b      	subs	r3, r3, r1
 800ea60:	4543      	cmp	r3, r8
 800ea62:	dcf0      	bgt.n	800ea46 <_printf_float+0x442>
 800ea64:	e6fa      	b.n	800e85c <_printf_float+0x258>
 800ea66:	f04f 0800 	mov.w	r8, #0
 800ea6a:	f104 0919 	add.w	r9, r4, #25
 800ea6e:	e7f4      	b.n	800ea5a <_printf_float+0x456>

0800ea70 <_printf_common>:
 800ea70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea74:	4616      	mov	r6, r2
 800ea76:	4699      	mov	r9, r3
 800ea78:	688a      	ldr	r2, [r1, #8]
 800ea7a:	690b      	ldr	r3, [r1, #16]
 800ea7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea80:	4293      	cmp	r3, r2
 800ea82:	bfb8      	it	lt
 800ea84:	4613      	movlt	r3, r2
 800ea86:	6033      	str	r3, [r6, #0]
 800ea88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea8c:	4607      	mov	r7, r0
 800ea8e:	460c      	mov	r4, r1
 800ea90:	b10a      	cbz	r2, 800ea96 <_printf_common+0x26>
 800ea92:	3301      	adds	r3, #1
 800ea94:	6033      	str	r3, [r6, #0]
 800ea96:	6823      	ldr	r3, [r4, #0]
 800ea98:	0699      	lsls	r1, r3, #26
 800ea9a:	bf42      	ittt	mi
 800ea9c:	6833      	ldrmi	r3, [r6, #0]
 800ea9e:	3302      	addmi	r3, #2
 800eaa0:	6033      	strmi	r3, [r6, #0]
 800eaa2:	6825      	ldr	r5, [r4, #0]
 800eaa4:	f015 0506 	ands.w	r5, r5, #6
 800eaa8:	d106      	bne.n	800eab8 <_printf_common+0x48>
 800eaaa:	f104 0a19 	add.w	sl, r4, #25
 800eaae:	68e3      	ldr	r3, [r4, #12]
 800eab0:	6832      	ldr	r2, [r6, #0]
 800eab2:	1a9b      	subs	r3, r3, r2
 800eab4:	42ab      	cmp	r3, r5
 800eab6:	dc26      	bgt.n	800eb06 <_printf_common+0x96>
 800eab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eabc:	1e13      	subs	r3, r2, #0
 800eabe:	6822      	ldr	r2, [r4, #0]
 800eac0:	bf18      	it	ne
 800eac2:	2301      	movne	r3, #1
 800eac4:	0692      	lsls	r2, r2, #26
 800eac6:	d42b      	bmi.n	800eb20 <_printf_common+0xb0>
 800eac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eacc:	4649      	mov	r1, r9
 800eace:	4638      	mov	r0, r7
 800ead0:	47c0      	blx	r8
 800ead2:	3001      	adds	r0, #1
 800ead4:	d01e      	beq.n	800eb14 <_printf_common+0xa4>
 800ead6:	6823      	ldr	r3, [r4, #0]
 800ead8:	68e5      	ldr	r5, [r4, #12]
 800eada:	6832      	ldr	r2, [r6, #0]
 800eadc:	f003 0306 	and.w	r3, r3, #6
 800eae0:	2b04      	cmp	r3, #4
 800eae2:	bf08      	it	eq
 800eae4:	1aad      	subeq	r5, r5, r2
 800eae6:	68a3      	ldr	r3, [r4, #8]
 800eae8:	6922      	ldr	r2, [r4, #16]
 800eaea:	bf0c      	ite	eq
 800eaec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eaf0:	2500      	movne	r5, #0
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	bfc4      	itt	gt
 800eaf6:	1a9b      	subgt	r3, r3, r2
 800eaf8:	18ed      	addgt	r5, r5, r3
 800eafa:	2600      	movs	r6, #0
 800eafc:	341a      	adds	r4, #26
 800eafe:	42b5      	cmp	r5, r6
 800eb00:	d11a      	bne.n	800eb38 <_printf_common+0xc8>
 800eb02:	2000      	movs	r0, #0
 800eb04:	e008      	b.n	800eb18 <_printf_common+0xa8>
 800eb06:	2301      	movs	r3, #1
 800eb08:	4652      	mov	r2, sl
 800eb0a:	4649      	mov	r1, r9
 800eb0c:	4638      	mov	r0, r7
 800eb0e:	47c0      	blx	r8
 800eb10:	3001      	adds	r0, #1
 800eb12:	d103      	bne.n	800eb1c <_printf_common+0xac>
 800eb14:	f04f 30ff 	mov.w	r0, #4294967295
 800eb18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb1c:	3501      	adds	r5, #1
 800eb1e:	e7c6      	b.n	800eaae <_printf_common+0x3e>
 800eb20:	18e1      	adds	r1, r4, r3
 800eb22:	1c5a      	adds	r2, r3, #1
 800eb24:	2030      	movs	r0, #48	; 0x30
 800eb26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eb2a:	4422      	add	r2, r4
 800eb2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eb30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eb34:	3302      	adds	r3, #2
 800eb36:	e7c7      	b.n	800eac8 <_printf_common+0x58>
 800eb38:	2301      	movs	r3, #1
 800eb3a:	4622      	mov	r2, r4
 800eb3c:	4649      	mov	r1, r9
 800eb3e:	4638      	mov	r0, r7
 800eb40:	47c0      	blx	r8
 800eb42:	3001      	adds	r0, #1
 800eb44:	d0e6      	beq.n	800eb14 <_printf_common+0xa4>
 800eb46:	3601      	adds	r6, #1
 800eb48:	e7d9      	b.n	800eafe <_printf_common+0x8e>
	...

0800eb4c <_printf_i>:
 800eb4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb50:	7e0f      	ldrb	r7, [r1, #24]
 800eb52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb54:	2f78      	cmp	r7, #120	; 0x78
 800eb56:	4691      	mov	r9, r2
 800eb58:	4680      	mov	r8, r0
 800eb5a:	460c      	mov	r4, r1
 800eb5c:	469a      	mov	sl, r3
 800eb5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eb62:	d807      	bhi.n	800eb74 <_printf_i+0x28>
 800eb64:	2f62      	cmp	r7, #98	; 0x62
 800eb66:	d80a      	bhi.n	800eb7e <_printf_i+0x32>
 800eb68:	2f00      	cmp	r7, #0
 800eb6a:	f000 80d8 	beq.w	800ed1e <_printf_i+0x1d2>
 800eb6e:	2f58      	cmp	r7, #88	; 0x58
 800eb70:	f000 80a3 	beq.w	800ecba <_printf_i+0x16e>
 800eb74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eb7c:	e03a      	b.n	800ebf4 <_printf_i+0xa8>
 800eb7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb82:	2b15      	cmp	r3, #21
 800eb84:	d8f6      	bhi.n	800eb74 <_printf_i+0x28>
 800eb86:	a101      	add	r1, pc, #4	; (adr r1, 800eb8c <_printf_i+0x40>)
 800eb88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb8c:	0800ebe5 	.word	0x0800ebe5
 800eb90:	0800ebf9 	.word	0x0800ebf9
 800eb94:	0800eb75 	.word	0x0800eb75
 800eb98:	0800eb75 	.word	0x0800eb75
 800eb9c:	0800eb75 	.word	0x0800eb75
 800eba0:	0800eb75 	.word	0x0800eb75
 800eba4:	0800ebf9 	.word	0x0800ebf9
 800eba8:	0800eb75 	.word	0x0800eb75
 800ebac:	0800eb75 	.word	0x0800eb75
 800ebb0:	0800eb75 	.word	0x0800eb75
 800ebb4:	0800eb75 	.word	0x0800eb75
 800ebb8:	0800ed05 	.word	0x0800ed05
 800ebbc:	0800ec29 	.word	0x0800ec29
 800ebc0:	0800ece7 	.word	0x0800ece7
 800ebc4:	0800eb75 	.word	0x0800eb75
 800ebc8:	0800eb75 	.word	0x0800eb75
 800ebcc:	0800ed27 	.word	0x0800ed27
 800ebd0:	0800eb75 	.word	0x0800eb75
 800ebd4:	0800ec29 	.word	0x0800ec29
 800ebd8:	0800eb75 	.word	0x0800eb75
 800ebdc:	0800eb75 	.word	0x0800eb75
 800ebe0:	0800ecef 	.word	0x0800ecef
 800ebe4:	682b      	ldr	r3, [r5, #0]
 800ebe6:	1d1a      	adds	r2, r3, #4
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	602a      	str	r2, [r5, #0]
 800ebec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	e0a3      	b.n	800ed40 <_printf_i+0x1f4>
 800ebf8:	6820      	ldr	r0, [r4, #0]
 800ebfa:	6829      	ldr	r1, [r5, #0]
 800ebfc:	0606      	lsls	r6, r0, #24
 800ebfe:	f101 0304 	add.w	r3, r1, #4
 800ec02:	d50a      	bpl.n	800ec1a <_printf_i+0xce>
 800ec04:	680e      	ldr	r6, [r1, #0]
 800ec06:	602b      	str	r3, [r5, #0]
 800ec08:	2e00      	cmp	r6, #0
 800ec0a:	da03      	bge.n	800ec14 <_printf_i+0xc8>
 800ec0c:	232d      	movs	r3, #45	; 0x2d
 800ec0e:	4276      	negs	r6, r6
 800ec10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec14:	485e      	ldr	r0, [pc, #376]	; (800ed90 <_printf_i+0x244>)
 800ec16:	230a      	movs	r3, #10
 800ec18:	e019      	b.n	800ec4e <_printf_i+0x102>
 800ec1a:	680e      	ldr	r6, [r1, #0]
 800ec1c:	602b      	str	r3, [r5, #0]
 800ec1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ec22:	bf18      	it	ne
 800ec24:	b236      	sxthne	r6, r6
 800ec26:	e7ef      	b.n	800ec08 <_printf_i+0xbc>
 800ec28:	682b      	ldr	r3, [r5, #0]
 800ec2a:	6820      	ldr	r0, [r4, #0]
 800ec2c:	1d19      	adds	r1, r3, #4
 800ec2e:	6029      	str	r1, [r5, #0]
 800ec30:	0601      	lsls	r1, r0, #24
 800ec32:	d501      	bpl.n	800ec38 <_printf_i+0xec>
 800ec34:	681e      	ldr	r6, [r3, #0]
 800ec36:	e002      	b.n	800ec3e <_printf_i+0xf2>
 800ec38:	0646      	lsls	r6, r0, #25
 800ec3a:	d5fb      	bpl.n	800ec34 <_printf_i+0xe8>
 800ec3c:	881e      	ldrh	r6, [r3, #0]
 800ec3e:	4854      	ldr	r0, [pc, #336]	; (800ed90 <_printf_i+0x244>)
 800ec40:	2f6f      	cmp	r7, #111	; 0x6f
 800ec42:	bf0c      	ite	eq
 800ec44:	2308      	moveq	r3, #8
 800ec46:	230a      	movne	r3, #10
 800ec48:	2100      	movs	r1, #0
 800ec4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec4e:	6865      	ldr	r5, [r4, #4]
 800ec50:	60a5      	str	r5, [r4, #8]
 800ec52:	2d00      	cmp	r5, #0
 800ec54:	bfa2      	ittt	ge
 800ec56:	6821      	ldrge	r1, [r4, #0]
 800ec58:	f021 0104 	bicge.w	r1, r1, #4
 800ec5c:	6021      	strge	r1, [r4, #0]
 800ec5e:	b90e      	cbnz	r6, 800ec64 <_printf_i+0x118>
 800ec60:	2d00      	cmp	r5, #0
 800ec62:	d04d      	beq.n	800ed00 <_printf_i+0x1b4>
 800ec64:	4615      	mov	r5, r2
 800ec66:	fbb6 f1f3 	udiv	r1, r6, r3
 800ec6a:	fb03 6711 	mls	r7, r3, r1, r6
 800ec6e:	5dc7      	ldrb	r7, [r0, r7]
 800ec70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ec74:	4637      	mov	r7, r6
 800ec76:	42bb      	cmp	r3, r7
 800ec78:	460e      	mov	r6, r1
 800ec7a:	d9f4      	bls.n	800ec66 <_printf_i+0x11a>
 800ec7c:	2b08      	cmp	r3, #8
 800ec7e:	d10b      	bne.n	800ec98 <_printf_i+0x14c>
 800ec80:	6823      	ldr	r3, [r4, #0]
 800ec82:	07de      	lsls	r6, r3, #31
 800ec84:	d508      	bpl.n	800ec98 <_printf_i+0x14c>
 800ec86:	6923      	ldr	r3, [r4, #16]
 800ec88:	6861      	ldr	r1, [r4, #4]
 800ec8a:	4299      	cmp	r1, r3
 800ec8c:	bfde      	ittt	le
 800ec8e:	2330      	movle	r3, #48	; 0x30
 800ec90:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ec94:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ec98:	1b52      	subs	r2, r2, r5
 800ec9a:	6122      	str	r2, [r4, #16]
 800ec9c:	f8cd a000 	str.w	sl, [sp]
 800eca0:	464b      	mov	r3, r9
 800eca2:	aa03      	add	r2, sp, #12
 800eca4:	4621      	mov	r1, r4
 800eca6:	4640      	mov	r0, r8
 800eca8:	f7ff fee2 	bl	800ea70 <_printf_common>
 800ecac:	3001      	adds	r0, #1
 800ecae:	d14c      	bne.n	800ed4a <_printf_i+0x1fe>
 800ecb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb4:	b004      	add	sp, #16
 800ecb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecba:	4835      	ldr	r0, [pc, #212]	; (800ed90 <_printf_i+0x244>)
 800ecbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ecc0:	6829      	ldr	r1, [r5, #0]
 800ecc2:	6823      	ldr	r3, [r4, #0]
 800ecc4:	f851 6b04 	ldr.w	r6, [r1], #4
 800ecc8:	6029      	str	r1, [r5, #0]
 800ecca:	061d      	lsls	r5, r3, #24
 800eccc:	d514      	bpl.n	800ecf8 <_printf_i+0x1ac>
 800ecce:	07df      	lsls	r7, r3, #31
 800ecd0:	bf44      	itt	mi
 800ecd2:	f043 0320 	orrmi.w	r3, r3, #32
 800ecd6:	6023      	strmi	r3, [r4, #0]
 800ecd8:	b91e      	cbnz	r6, 800ece2 <_printf_i+0x196>
 800ecda:	6823      	ldr	r3, [r4, #0]
 800ecdc:	f023 0320 	bic.w	r3, r3, #32
 800ece0:	6023      	str	r3, [r4, #0]
 800ece2:	2310      	movs	r3, #16
 800ece4:	e7b0      	b.n	800ec48 <_printf_i+0xfc>
 800ece6:	6823      	ldr	r3, [r4, #0]
 800ece8:	f043 0320 	orr.w	r3, r3, #32
 800ecec:	6023      	str	r3, [r4, #0]
 800ecee:	2378      	movs	r3, #120	; 0x78
 800ecf0:	4828      	ldr	r0, [pc, #160]	; (800ed94 <_printf_i+0x248>)
 800ecf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ecf6:	e7e3      	b.n	800ecc0 <_printf_i+0x174>
 800ecf8:	0659      	lsls	r1, r3, #25
 800ecfa:	bf48      	it	mi
 800ecfc:	b2b6      	uxthmi	r6, r6
 800ecfe:	e7e6      	b.n	800ecce <_printf_i+0x182>
 800ed00:	4615      	mov	r5, r2
 800ed02:	e7bb      	b.n	800ec7c <_printf_i+0x130>
 800ed04:	682b      	ldr	r3, [r5, #0]
 800ed06:	6826      	ldr	r6, [r4, #0]
 800ed08:	6961      	ldr	r1, [r4, #20]
 800ed0a:	1d18      	adds	r0, r3, #4
 800ed0c:	6028      	str	r0, [r5, #0]
 800ed0e:	0635      	lsls	r5, r6, #24
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	d501      	bpl.n	800ed18 <_printf_i+0x1cc>
 800ed14:	6019      	str	r1, [r3, #0]
 800ed16:	e002      	b.n	800ed1e <_printf_i+0x1d2>
 800ed18:	0670      	lsls	r0, r6, #25
 800ed1a:	d5fb      	bpl.n	800ed14 <_printf_i+0x1c8>
 800ed1c:	8019      	strh	r1, [r3, #0]
 800ed1e:	2300      	movs	r3, #0
 800ed20:	6123      	str	r3, [r4, #16]
 800ed22:	4615      	mov	r5, r2
 800ed24:	e7ba      	b.n	800ec9c <_printf_i+0x150>
 800ed26:	682b      	ldr	r3, [r5, #0]
 800ed28:	1d1a      	adds	r2, r3, #4
 800ed2a:	602a      	str	r2, [r5, #0]
 800ed2c:	681d      	ldr	r5, [r3, #0]
 800ed2e:	6862      	ldr	r2, [r4, #4]
 800ed30:	2100      	movs	r1, #0
 800ed32:	4628      	mov	r0, r5
 800ed34:	f7f1 fa6c 	bl	8000210 <memchr>
 800ed38:	b108      	cbz	r0, 800ed3e <_printf_i+0x1f2>
 800ed3a:	1b40      	subs	r0, r0, r5
 800ed3c:	6060      	str	r0, [r4, #4]
 800ed3e:	6863      	ldr	r3, [r4, #4]
 800ed40:	6123      	str	r3, [r4, #16]
 800ed42:	2300      	movs	r3, #0
 800ed44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed48:	e7a8      	b.n	800ec9c <_printf_i+0x150>
 800ed4a:	6923      	ldr	r3, [r4, #16]
 800ed4c:	462a      	mov	r2, r5
 800ed4e:	4649      	mov	r1, r9
 800ed50:	4640      	mov	r0, r8
 800ed52:	47d0      	blx	sl
 800ed54:	3001      	adds	r0, #1
 800ed56:	d0ab      	beq.n	800ecb0 <_printf_i+0x164>
 800ed58:	6823      	ldr	r3, [r4, #0]
 800ed5a:	079b      	lsls	r3, r3, #30
 800ed5c:	d413      	bmi.n	800ed86 <_printf_i+0x23a>
 800ed5e:	68e0      	ldr	r0, [r4, #12]
 800ed60:	9b03      	ldr	r3, [sp, #12]
 800ed62:	4298      	cmp	r0, r3
 800ed64:	bfb8      	it	lt
 800ed66:	4618      	movlt	r0, r3
 800ed68:	e7a4      	b.n	800ecb4 <_printf_i+0x168>
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	4632      	mov	r2, r6
 800ed6e:	4649      	mov	r1, r9
 800ed70:	4640      	mov	r0, r8
 800ed72:	47d0      	blx	sl
 800ed74:	3001      	adds	r0, #1
 800ed76:	d09b      	beq.n	800ecb0 <_printf_i+0x164>
 800ed78:	3501      	adds	r5, #1
 800ed7a:	68e3      	ldr	r3, [r4, #12]
 800ed7c:	9903      	ldr	r1, [sp, #12]
 800ed7e:	1a5b      	subs	r3, r3, r1
 800ed80:	42ab      	cmp	r3, r5
 800ed82:	dcf2      	bgt.n	800ed6a <_printf_i+0x21e>
 800ed84:	e7eb      	b.n	800ed5e <_printf_i+0x212>
 800ed86:	2500      	movs	r5, #0
 800ed88:	f104 0619 	add.w	r6, r4, #25
 800ed8c:	e7f5      	b.n	800ed7a <_printf_i+0x22e>
 800ed8e:	bf00      	nop
 800ed90:	08011ca6 	.word	0x08011ca6
 800ed94:	08011cb7 	.word	0x08011cb7

0800ed98 <_sbrk_r>:
 800ed98:	b538      	push	{r3, r4, r5, lr}
 800ed9a:	4d06      	ldr	r5, [pc, #24]	; (800edb4 <_sbrk_r+0x1c>)
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	4604      	mov	r4, r0
 800eda0:	4608      	mov	r0, r1
 800eda2:	602b      	str	r3, [r5, #0]
 800eda4:	f7f7 fca2 	bl	80066ec <_sbrk>
 800eda8:	1c43      	adds	r3, r0, #1
 800edaa:	d102      	bne.n	800edb2 <_sbrk_r+0x1a>
 800edac:	682b      	ldr	r3, [r5, #0]
 800edae:	b103      	cbz	r3, 800edb2 <_sbrk_r+0x1a>
 800edb0:	6023      	str	r3, [r4, #0]
 800edb2:	bd38      	pop	{r3, r4, r5, pc}
 800edb4:	20000654 	.word	0x20000654

0800edb8 <_raise_r>:
 800edb8:	291f      	cmp	r1, #31
 800edba:	b538      	push	{r3, r4, r5, lr}
 800edbc:	4604      	mov	r4, r0
 800edbe:	460d      	mov	r5, r1
 800edc0:	d904      	bls.n	800edcc <_raise_r+0x14>
 800edc2:	2316      	movs	r3, #22
 800edc4:	6003      	str	r3, [r0, #0]
 800edc6:	f04f 30ff 	mov.w	r0, #4294967295
 800edca:	bd38      	pop	{r3, r4, r5, pc}
 800edcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800edce:	b112      	cbz	r2, 800edd6 <_raise_r+0x1e>
 800edd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800edd4:	b94b      	cbnz	r3, 800edea <_raise_r+0x32>
 800edd6:	4620      	mov	r0, r4
 800edd8:	f000 f830 	bl	800ee3c <_getpid_r>
 800eddc:	462a      	mov	r2, r5
 800edde:	4601      	mov	r1, r0
 800ede0:	4620      	mov	r0, r4
 800ede2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ede6:	f000 b817 	b.w	800ee18 <_kill_r>
 800edea:	2b01      	cmp	r3, #1
 800edec:	d00a      	beq.n	800ee04 <_raise_r+0x4c>
 800edee:	1c59      	adds	r1, r3, #1
 800edf0:	d103      	bne.n	800edfa <_raise_r+0x42>
 800edf2:	2316      	movs	r3, #22
 800edf4:	6003      	str	r3, [r0, #0]
 800edf6:	2001      	movs	r0, #1
 800edf8:	e7e7      	b.n	800edca <_raise_r+0x12>
 800edfa:	2400      	movs	r4, #0
 800edfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee00:	4628      	mov	r0, r5
 800ee02:	4798      	blx	r3
 800ee04:	2000      	movs	r0, #0
 800ee06:	e7e0      	b.n	800edca <_raise_r+0x12>

0800ee08 <raise>:
 800ee08:	4b02      	ldr	r3, [pc, #8]	; (800ee14 <raise+0xc>)
 800ee0a:	4601      	mov	r1, r0
 800ee0c:	6818      	ldr	r0, [r3, #0]
 800ee0e:	f7ff bfd3 	b.w	800edb8 <_raise_r>
 800ee12:	bf00      	nop
 800ee14:	2000000c 	.word	0x2000000c

0800ee18 <_kill_r>:
 800ee18:	b538      	push	{r3, r4, r5, lr}
 800ee1a:	4d07      	ldr	r5, [pc, #28]	; (800ee38 <_kill_r+0x20>)
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	4604      	mov	r4, r0
 800ee20:	4608      	mov	r0, r1
 800ee22:	4611      	mov	r1, r2
 800ee24:	602b      	str	r3, [r5, #0]
 800ee26:	f7f7 fbd9 	bl	80065dc <_kill>
 800ee2a:	1c43      	adds	r3, r0, #1
 800ee2c:	d102      	bne.n	800ee34 <_kill_r+0x1c>
 800ee2e:	682b      	ldr	r3, [r5, #0]
 800ee30:	b103      	cbz	r3, 800ee34 <_kill_r+0x1c>
 800ee32:	6023      	str	r3, [r4, #0]
 800ee34:	bd38      	pop	{r3, r4, r5, pc}
 800ee36:	bf00      	nop
 800ee38:	20000654 	.word	0x20000654

0800ee3c <_getpid_r>:
 800ee3c:	f7f7 bbc6 	b.w	80065cc <_getpid>

0800ee40 <siprintf>:
 800ee40:	b40e      	push	{r1, r2, r3}
 800ee42:	b500      	push	{lr}
 800ee44:	b09c      	sub	sp, #112	; 0x70
 800ee46:	ab1d      	add	r3, sp, #116	; 0x74
 800ee48:	9002      	str	r0, [sp, #8]
 800ee4a:	9006      	str	r0, [sp, #24]
 800ee4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee50:	4809      	ldr	r0, [pc, #36]	; (800ee78 <siprintf+0x38>)
 800ee52:	9107      	str	r1, [sp, #28]
 800ee54:	9104      	str	r1, [sp, #16]
 800ee56:	4909      	ldr	r1, [pc, #36]	; (800ee7c <siprintf+0x3c>)
 800ee58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee5c:	9105      	str	r1, [sp, #20]
 800ee5e:	6800      	ldr	r0, [r0, #0]
 800ee60:	9301      	str	r3, [sp, #4]
 800ee62:	a902      	add	r1, sp, #8
 800ee64:	f001 fa8c 	bl	8010380 <_svfiprintf_r>
 800ee68:	9b02      	ldr	r3, [sp, #8]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	701a      	strb	r2, [r3, #0]
 800ee6e:	b01c      	add	sp, #112	; 0x70
 800ee70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee74:	b003      	add	sp, #12
 800ee76:	4770      	bx	lr
 800ee78:	2000000c 	.word	0x2000000c
 800ee7c:	ffff0208 	.word	0xffff0208

0800ee80 <quorem>:
 800ee80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee84:	6903      	ldr	r3, [r0, #16]
 800ee86:	690c      	ldr	r4, [r1, #16]
 800ee88:	42a3      	cmp	r3, r4
 800ee8a:	4607      	mov	r7, r0
 800ee8c:	f2c0 8081 	blt.w	800ef92 <quorem+0x112>
 800ee90:	3c01      	subs	r4, #1
 800ee92:	f101 0814 	add.w	r8, r1, #20
 800ee96:	f100 0514 	add.w	r5, r0, #20
 800ee9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee9e:	9301      	str	r3, [sp, #4]
 800eea0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eea4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eea8:	3301      	adds	r3, #1
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eeb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eeb4:	fbb2 f6f3 	udiv	r6, r2, r3
 800eeb8:	d331      	bcc.n	800ef1e <quorem+0x9e>
 800eeba:	f04f 0e00 	mov.w	lr, #0
 800eebe:	4640      	mov	r0, r8
 800eec0:	46ac      	mov	ip, r5
 800eec2:	46f2      	mov	sl, lr
 800eec4:	f850 2b04 	ldr.w	r2, [r0], #4
 800eec8:	b293      	uxth	r3, r2
 800eeca:	fb06 e303 	mla	r3, r6, r3, lr
 800eece:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	ebaa 0303 	sub.w	r3, sl, r3
 800eed8:	f8dc a000 	ldr.w	sl, [ip]
 800eedc:	0c12      	lsrs	r2, r2, #16
 800eede:	fa13 f38a 	uxtah	r3, r3, sl
 800eee2:	fb06 e202 	mla	r2, r6, r2, lr
 800eee6:	9300      	str	r3, [sp, #0]
 800eee8:	9b00      	ldr	r3, [sp, #0]
 800eeea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eeee:	b292      	uxth	r2, r2
 800eef0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800eef4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eef8:	f8bd 3000 	ldrh.w	r3, [sp]
 800eefc:	4581      	cmp	r9, r0
 800eefe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef02:	f84c 3b04 	str.w	r3, [ip], #4
 800ef06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ef0a:	d2db      	bcs.n	800eec4 <quorem+0x44>
 800ef0c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ef10:	b92b      	cbnz	r3, 800ef1e <quorem+0x9e>
 800ef12:	9b01      	ldr	r3, [sp, #4]
 800ef14:	3b04      	subs	r3, #4
 800ef16:	429d      	cmp	r5, r3
 800ef18:	461a      	mov	r2, r3
 800ef1a:	d32e      	bcc.n	800ef7a <quorem+0xfa>
 800ef1c:	613c      	str	r4, [r7, #16]
 800ef1e:	4638      	mov	r0, r7
 800ef20:	f001 f8ba 	bl	8010098 <__mcmp>
 800ef24:	2800      	cmp	r0, #0
 800ef26:	db24      	blt.n	800ef72 <quorem+0xf2>
 800ef28:	3601      	adds	r6, #1
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	f04f 0c00 	mov.w	ip, #0
 800ef30:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef34:	f8d0 e000 	ldr.w	lr, [r0]
 800ef38:	b293      	uxth	r3, r2
 800ef3a:	ebac 0303 	sub.w	r3, ip, r3
 800ef3e:	0c12      	lsrs	r2, r2, #16
 800ef40:	fa13 f38e 	uxtah	r3, r3, lr
 800ef44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ef48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef52:	45c1      	cmp	r9, r8
 800ef54:	f840 3b04 	str.w	r3, [r0], #4
 800ef58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ef5c:	d2e8      	bcs.n	800ef30 <quorem+0xb0>
 800ef5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef66:	b922      	cbnz	r2, 800ef72 <quorem+0xf2>
 800ef68:	3b04      	subs	r3, #4
 800ef6a:	429d      	cmp	r5, r3
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	d30a      	bcc.n	800ef86 <quorem+0x106>
 800ef70:	613c      	str	r4, [r7, #16]
 800ef72:	4630      	mov	r0, r6
 800ef74:	b003      	add	sp, #12
 800ef76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef7a:	6812      	ldr	r2, [r2, #0]
 800ef7c:	3b04      	subs	r3, #4
 800ef7e:	2a00      	cmp	r2, #0
 800ef80:	d1cc      	bne.n	800ef1c <quorem+0x9c>
 800ef82:	3c01      	subs	r4, #1
 800ef84:	e7c7      	b.n	800ef16 <quorem+0x96>
 800ef86:	6812      	ldr	r2, [r2, #0]
 800ef88:	3b04      	subs	r3, #4
 800ef8a:	2a00      	cmp	r2, #0
 800ef8c:	d1f0      	bne.n	800ef70 <quorem+0xf0>
 800ef8e:	3c01      	subs	r4, #1
 800ef90:	e7eb      	b.n	800ef6a <quorem+0xea>
 800ef92:	2000      	movs	r0, #0
 800ef94:	e7ee      	b.n	800ef74 <quorem+0xf4>
	...

0800ef98 <_dtoa_r>:
 800ef98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef9c:	ed2d 8b04 	vpush	{d8-d9}
 800efa0:	ec57 6b10 	vmov	r6, r7, d0
 800efa4:	b093      	sub	sp, #76	; 0x4c
 800efa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800efa8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800efac:	9106      	str	r1, [sp, #24]
 800efae:	ee10 aa10 	vmov	sl, s0
 800efb2:	4604      	mov	r4, r0
 800efb4:	9209      	str	r2, [sp, #36]	; 0x24
 800efb6:	930c      	str	r3, [sp, #48]	; 0x30
 800efb8:	46bb      	mov	fp, r7
 800efba:	b975      	cbnz	r5, 800efda <_dtoa_r+0x42>
 800efbc:	2010      	movs	r0, #16
 800efbe:	f7ff f961 	bl	800e284 <malloc>
 800efc2:	4602      	mov	r2, r0
 800efc4:	6260      	str	r0, [r4, #36]	; 0x24
 800efc6:	b920      	cbnz	r0, 800efd2 <_dtoa_r+0x3a>
 800efc8:	4ba7      	ldr	r3, [pc, #668]	; (800f268 <_dtoa_r+0x2d0>)
 800efca:	21ea      	movs	r1, #234	; 0xea
 800efcc:	48a7      	ldr	r0, [pc, #668]	; (800f26c <_dtoa_r+0x2d4>)
 800efce:	f001 fad7 	bl	8010580 <__assert_func>
 800efd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800efd6:	6005      	str	r5, [r0, #0]
 800efd8:	60c5      	str	r5, [r0, #12]
 800efda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efdc:	6819      	ldr	r1, [r3, #0]
 800efde:	b151      	cbz	r1, 800eff6 <_dtoa_r+0x5e>
 800efe0:	685a      	ldr	r2, [r3, #4]
 800efe2:	604a      	str	r2, [r1, #4]
 800efe4:	2301      	movs	r3, #1
 800efe6:	4093      	lsls	r3, r2
 800efe8:	608b      	str	r3, [r1, #8]
 800efea:	4620      	mov	r0, r4
 800efec:	f000 fe12 	bl	800fc14 <_Bfree>
 800eff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eff2:	2200      	movs	r2, #0
 800eff4:	601a      	str	r2, [r3, #0]
 800eff6:	1e3b      	subs	r3, r7, #0
 800eff8:	bfaa      	itet	ge
 800effa:	2300      	movge	r3, #0
 800effc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f000:	f8c8 3000 	strge.w	r3, [r8]
 800f004:	4b9a      	ldr	r3, [pc, #616]	; (800f270 <_dtoa_r+0x2d8>)
 800f006:	bfbc      	itt	lt
 800f008:	2201      	movlt	r2, #1
 800f00a:	f8c8 2000 	strlt.w	r2, [r8]
 800f00e:	ea33 030b 	bics.w	r3, r3, fp
 800f012:	d11b      	bne.n	800f04c <_dtoa_r+0xb4>
 800f014:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f016:	f242 730f 	movw	r3, #9999	; 0x270f
 800f01a:	6013      	str	r3, [r2, #0]
 800f01c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f020:	4333      	orrs	r3, r6
 800f022:	f000 8592 	beq.w	800fb4a <_dtoa_r+0xbb2>
 800f026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f028:	b963      	cbnz	r3, 800f044 <_dtoa_r+0xac>
 800f02a:	4b92      	ldr	r3, [pc, #584]	; (800f274 <_dtoa_r+0x2dc>)
 800f02c:	e022      	b.n	800f074 <_dtoa_r+0xdc>
 800f02e:	4b92      	ldr	r3, [pc, #584]	; (800f278 <_dtoa_r+0x2e0>)
 800f030:	9301      	str	r3, [sp, #4]
 800f032:	3308      	adds	r3, #8
 800f034:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f036:	6013      	str	r3, [r2, #0]
 800f038:	9801      	ldr	r0, [sp, #4]
 800f03a:	b013      	add	sp, #76	; 0x4c
 800f03c:	ecbd 8b04 	vpop	{d8-d9}
 800f040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f044:	4b8b      	ldr	r3, [pc, #556]	; (800f274 <_dtoa_r+0x2dc>)
 800f046:	9301      	str	r3, [sp, #4]
 800f048:	3303      	adds	r3, #3
 800f04a:	e7f3      	b.n	800f034 <_dtoa_r+0x9c>
 800f04c:	2200      	movs	r2, #0
 800f04e:	2300      	movs	r3, #0
 800f050:	4650      	mov	r0, sl
 800f052:	4659      	mov	r1, fp
 800f054:	f7f1 fd58 	bl	8000b08 <__aeabi_dcmpeq>
 800f058:	ec4b ab19 	vmov	d9, sl, fp
 800f05c:	4680      	mov	r8, r0
 800f05e:	b158      	cbz	r0, 800f078 <_dtoa_r+0xe0>
 800f060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f062:	2301      	movs	r3, #1
 800f064:	6013      	str	r3, [r2, #0]
 800f066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f068:	2b00      	cmp	r3, #0
 800f06a:	f000 856b 	beq.w	800fb44 <_dtoa_r+0xbac>
 800f06e:	4883      	ldr	r0, [pc, #524]	; (800f27c <_dtoa_r+0x2e4>)
 800f070:	6018      	str	r0, [r3, #0]
 800f072:	1e43      	subs	r3, r0, #1
 800f074:	9301      	str	r3, [sp, #4]
 800f076:	e7df      	b.n	800f038 <_dtoa_r+0xa0>
 800f078:	ec4b ab10 	vmov	d0, sl, fp
 800f07c:	aa10      	add	r2, sp, #64	; 0x40
 800f07e:	a911      	add	r1, sp, #68	; 0x44
 800f080:	4620      	mov	r0, r4
 800f082:	f001 f8af 	bl	80101e4 <__d2b>
 800f086:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f08a:	ee08 0a10 	vmov	s16, r0
 800f08e:	2d00      	cmp	r5, #0
 800f090:	f000 8084 	beq.w	800f19c <_dtoa_r+0x204>
 800f094:	ee19 3a90 	vmov	r3, s19
 800f098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f09c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f0a0:	4656      	mov	r6, sl
 800f0a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f0a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f0aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f0ae:	4b74      	ldr	r3, [pc, #464]	; (800f280 <_dtoa_r+0x2e8>)
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	4639      	mov	r1, r7
 800f0b6:	f7f1 f907 	bl	80002c8 <__aeabi_dsub>
 800f0ba:	a365      	add	r3, pc, #404	; (adr r3, 800f250 <_dtoa_r+0x2b8>)
 800f0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c0:	f7f1 faba 	bl	8000638 <__aeabi_dmul>
 800f0c4:	a364      	add	r3, pc, #400	; (adr r3, 800f258 <_dtoa_r+0x2c0>)
 800f0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ca:	f7f1 f8ff 	bl	80002cc <__adddf3>
 800f0ce:	4606      	mov	r6, r0
 800f0d0:	4628      	mov	r0, r5
 800f0d2:	460f      	mov	r7, r1
 800f0d4:	f7f1 fa46 	bl	8000564 <__aeabi_i2d>
 800f0d8:	a361      	add	r3, pc, #388	; (adr r3, 800f260 <_dtoa_r+0x2c8>)
 800f0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0de:	f7f1 faab 	bl	8000638 <__aeabi_dmul>
 800f0e2:	4602      	mov	r2, r0
 800f0e4:	460b      	mov	r3, r1
 800f0e6:	4630      	mov	r0, r6
 800f0e8:	4639      	mov	r1, r7
 800f0ea:	f7f1 f8ef 	bl	80002cc <__adddf3>
 800f0ee:	4606      	mov	r6, r0
 800f0f0:	460f      	mov	r7, r1
 800f0f2:	f7f1 fd51 	bl	8000b98 <__aeabi_d2iz>
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	9000      	str	r0, [sp, #0]
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	4630      	mov	r0, r6
 800f0fe:	4639      	mov	r1, r7
 800f100:	f7f1 fd0c 	bl	8000b1c <__aeabi_dcmplt>
 800f104:	b150      	cbz	r0, 800f11c <_dtoa_r+0x184>
 800f106:	9800      	ldr	r0, [sp, #0]
 800f108:	f7f1 fa2c 	bl	8000564 <__aeabi_i2d>
 800f10c:	4632      	mov	r2, r6
 800f10e:	463b      	mov	r3, r7
 800f110:	f7f1 fcfa 	bl	8000b08 <__aeabi_dcmpeq>
 800f114:	b910      	cbnz	r0, 800f11c <_dtoa_r+0x184>
 800f116:	9b00      	ldr	r3, [sp, #0]
 800f118:	3b01      	subs	r3, #1
 800f11a:	9300      	str	r3, [sp, #0]
 800f11c:	9b00      	ldr	r3, [sp, #0]
 800f11e:	2b16      	cmp	r3, #22
 800f120:	d85a      	bhi.n	800f1d8 <_dtoa_r+0x240>
 800f122:	9a00      	ldr	r2, [sp, #0]
 800f124:	4b57      	ldr	r3, [pc, #348]	; (800f284 <_dtoa_r+0x2ec>)
 800f126:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12e:	ec51 0b19 	vmov	r0, r1, d9
 800f132:	f7f1 fcf3 	bl	8000b1c <__aeabi_dcmplt>
 800f136:	2800      	cmp	r0, #0
 800f138:	d050      	beq.n	800f1dc <_dtoa_r+0x244>
 800f13a:	9b00      	ldr	r3, [sp, #0]
 800f13c:	3b01      	subs	r3, #1
 800f13e:	9300      	str	r3, [sp, #0]
 800f140:	2300      	movs	r3, #0
 800f142:	930b      	str	r3, [sp, #44]	; 0x2c
 800f144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f146:	1b5d      	subs	r5, r3, r5
 800f148:	1e6b      	subs	r3, r5, #1
 800f14a:	9305      	str	r3, [sp, #20]
 800f14c:	bf45      	ittet	mi
 800f14e:	f1c5 0301 	rsbmi	r3, r5, #1
 800f152:	9304      	strmi	r3, [sp, #16]
 800f154:	2300      	movpl	r3, #0
 800f156:	2300      	movmi	r3, #0
 800f158:	bf4c      	ite	mi
 800f15a:	9305      	strmi	r3, [sp, #20]
 800f15c:	9304      	strpl	r3, [sp, #16]
 800f15e:	9b00      	ldr	r3, [sp, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	db3d      	blt.n	800f1e0 <_dtoa_r+0x248>
 800f164:	9b05      	ldr	r3, [sp, #20]
 800f166:	9a00      	ldr	r2, [sp, #0]
 800f168:	920a      	str	r2, [sp, #40]	; 0x28
 800f16a:	4413      	add	r3, r2
 800f16c:	9305      	str	r3, [sp, #20]
 800f16e:	2300      	movs	r3, #0
 800f170:	9307      	str	r3, [sp, #28]
 800f172:	9b06      	ldr	r3, [sp, #24]
 800f174:	2b09      	cmp	r3, #9
 800f176:	f200 8089 	bhi.w	800f28c <_dtoa_r+0x2f4>
 800f17a:	2b05      	cmp	r3, #5
 800f17c:	bfc4      	itt	gt
 800f17e:	3b04      	subgt	r3, #4
 800f180:	9306      	strgt	r3, [sp, #24]
 800f182:	9b06      	ldr	r3, [sp, #24]
 800f184:	f1a3 0302 	sub.w	r3, r3, #2
 800f188:	bfcc      	ite	gt
 800f18a:	2500      	movgt	r5, #0
 800f18c:	2501      	movle	r5, #1
 800f18e:	2b03      	cmp	r3, #3
 800f190:	f200 8087 	bhi.w	800f2a2 <_dtoa_r+0x30a>
 800f194:	e8df f003 	tbb	[pc, r3]
 800f198:	59383a2d 	.word	0x59383a2d
 800f19c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f1a0:	441d      	add	r5, r3
 800f1a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f1a6:	2b20      	cmp	r3, #32
 800f1a8:	bfc1      	itttt	gt
 800f1aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f1ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f1b2:	fa0b f303 	lslgt.w	r3, fp, r3
 800f1b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f1ba:	bfda      	itte	le
 800f1bc:	f1c3 0320 	rsble	r3, r3, #32
 800f1c0:	fa06 f003 	lslle.w	r0, r6, r3
 800f1c4:	4318      	orrgt	r0, r3
 800f1c6:	f7f1 f9bd 	bl	8000544 <__aeabi_ui2d>
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	4606      	mov	r6, r0
 800f1ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f1d2:	3d01      	subs	r5, #1
 800f1d4:	930e      	str	r3, [sp, #56]	; 0x38
 800f1d6:	e76a      	b.n	800f0ae <_dtoa_r+0x116>
 800f1d8:	2301      	movs	r3, #1
 800f1da:	e7b2      	b.n	800f142 <_dtoa_r+0x1aa>
 800f1dc:	900b      	str	r0, [sp, #44]	; 0x2c
 800f1de:	e7b1      	b.n	800f144 <_dtoa_r+0x1ac>
 800f1e0:	9b04      	ldr	r3, [sp, #16]
 800f1e2:	9a00      	ldr	r2, [sp, #0]
 800f1e4:	1a9b      	subs	r3, r3, r2
 800f1e6:	9304      	str	r3, [sp, #16]
 800f1e8:	4253      	negs	r3, r2
 800f1ea:	9307      	str	r3, [sp, #28]
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	930a      	str	r3, [sp, #40]	; 0x28
 800f1f0:	e7bf      	b.n	800f172 <_dtoa_r+0x1da>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	9308      	str	r3, [sp, #32]
 800f1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	dc55      	bgt.n	800f2a8 <_dtoa_r+0x310>
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f202:	461a      	mov	r2, r3
 800f204:	9209      	str	r2, [sp, #36]	; 0x24
 800f206:	e00c      	b.n	800f222 <_dtoa_r+0x28a>
 800f208:	2301      	movs	r3, #1
 800f20a:	e7f3      	b.n	800f1f4 <_dtoa_r+0x25c>
 800f20c:	2300      	movs	r3, #0
 800f20e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f210:	9308      	str	r3, [sp, #32]
 800f212:	9b00      	ldr	r3, [sp, #0]
 800f214:	4413      	add	r3, r2
 800f216:	9302      	str	r3, [sp, #8]
 800f218:	3301      	adds	r3, #1
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	9303      	str	r3, [sp, #12]
 800f21e:	bfb8      	it	lt
 800f220:	2301      	movlt	r3, #1
 800f222:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f224:	2200      	movs	r2, #0
 800f226:	6042      	str	r2, [r0, #4]
 800f228:	2204      	movs	r2, #4
 800f22a:	f102 0614 	add.w	r6, r2, #20
 800f22e:	429e      	cmp	r6, r3
 800f230:	6841      	ldr	r1, [r0, #4]
 800f232:	d93d      	bls.n	800f2b0 <_dtoa_r+0x318>
 800f234:	4620      	mov	r0, r4
 800f236:	f000 fcad 	bl	800fb94 <_Balloc>
 800f23a:	9001      	str	r0, [sp, #4]
 800f23c:	2800      	cmp	r0, #0
 800f23e:	d13b      	bne.n	800f2b8 <_dtoa_r+0x320>
 800f240:	4b11      	ldr	r3, [pc, #68]	; (800f288 <_dtoa_r+0x2f0>)
 800f242:	4602      	mov	r2, r0
 800f244:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f248:	e6c0      	b.n	800efcc <_dtoa_r+0x34>
 800f24a:	2301      	movs	r3, #1
 800f24c:	e7df      	b.n	800f20e <_dtoa_r+0x276>
 800f24e:	bf00      	nop
 800f250:	636f4361 	.word	0x636f4361
 800f254:	3fd287a7 	.word	0x3fd287a7
 800f258:	8b60c8b3 	.word	0x8b60c8b3
 800f25c:	3fc68a28 	.word	0x3fc68a28
 800f260:	509f79fb 	.word	0x509f79fb
 800f264:	3fd34413 	.word	0x3fd34413
 800f268:	08011cd5 	.word	0x08011cd5
 800f26c:	08011cec 	.word	0x08011cec
 800f270:	7ff00000 	.word	0x7ff00000
 800f274:	08011cd1 	.word	0x08011cd1
 800f278:	08011cc8 	.word	0x08011cc8
 800f27c:	08011ca5 	.word	0x08011ca5
 800f280:	3ff80000 	.word	0x3ff80000
 800f284:	08011de0 	.word	0x08011de0
 800f288:	08011d47 	.word	0x08011d47
 800f28c:	2501      	movs	r5, #1
 800f28e:	2300      	movs	r3, #0
 800f290:	9306      	str	r3, [sp, #24]
 800f292:	9508      	str	r5, [sp, #32]
 800f294:	f04f 33ff 	mov.w	r3, #4294967295
 800f298:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f29c:	2200      	movs	r2, #0
 800f29e:	2312      	movs	r3, #18
 800f2a0:	e7b0      	b.n	800f204 <_dtoa_r+0x26c>
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	9308      	str	r3, [sp, #32]
 800f2a6:	e7f5      	b.n	800f294 <_dtoa_r+0x2fc>
 800f2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f2ae:	e7b8      	b.n	800f222 <_dtoa_r+0x28a>
 800f2b0:	3101      	adds	r1, #1
 800f2b2:	6041      	str	r1, [r0, #4]
 800f2b4:	0052      	lsls	r2, r2, #1
 800f2b6:	e7b8      	b.n	800f22a <_dtoa_r+0x292>
 800f2b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2ba:	9a01      	ldr	r2, [sp, #4]
 800f2bc:	601a      	str	r2, [r3, #0]
 800f2be:	9b03      	ldr	r3, [sp, #12]
 800f2c0:	2b0e      	cmp	r3, #14
 800f2c2:	f200 809d 	bhi.w	800f400 <_dtoa_r+0x468>
 800f2c6:	2d00      	cmp	r5, #0
 800f2c8:	f000 809a 	beq.w	800f400 <_dtoa_r+0x468>
 800f2cc:	9b00      	ldr	r3, [sp, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	dd32      	ble.n	800f338 <_dtoa_r+0x3a0>
 800f2d2:	4ab7      	ldr	r2, [pc, #732]	; (800f5b0 <_dtoa_r+0x618>)
 800f2d4:	f003 030f 	and.w	r3, r3, #15
 800f2d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f2dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f2e0:	9b00      	ldr	r3, [sp, #0]
 800f2e2:	05d8      	lsls	r0, r3, #23
 800f2e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f2e8:	d516      	bpl.n	800f318 <_dtoa_r+0x380>
 800f2ea:	4bb2      	ldr	r3, [pc, #712]	; (800f5b4 <_dtoa_r+0x61c>)
 800f2ec:	ec51 0b19 	vmov	r0, r1, d9
 800f2f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f2f4:	f7f1 faca 	bl	800088c <__aeabi_ddiv>
 800f2f8:	f007 070f 	and.w	r7, r7, #15
 800f2fc:	4682      	mov	sl, r0
 800f2fe:	468b      	mov	fp, r1
 800f300:	2503      	movs	r5, #3
 800f302:	4eac      	ldr	r6, [pc, #688]	; (800f5b4 <_dtoa_r+0x61c>)
 800f304:	b957      	cbnz	r7, 800f31c <_dtoa_r+0x384>
 800f306:	4642      	mov	r2, r8
 800f308:	464b      	mov	r3, r9
 800f30a:	4650      	mov	r0, sl
 800f30c:	4659      	mov	r1, fp
 800f30e:	f7f1 fabd 	bl	800088c <__aeabi_ddiv>
 800f312:	4682      	mov	sl, r0
 800f314:	468b      	mov	fp, r1
 800f316:	e028      	b.n	800f36a <_dtoa_r+0x3d2>
 800f318:	2502      	movs	r5, #2
 800f31a:	e7f2      	b.n	800f302 <_dtoa_r+0x36a>
 800f31c:	07f9      	lsls	r1, r7, #31
 800f31e:	d508      	bpl.n	800f332 <_dtoa_r+0x39a>
 800f320:	4640      	mov	r0, r8
 800f322:	4649      	mov	r1, r9
 800f324:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f328:	f7f1 f986 	bl	8000638 <__aeabi_dmul>
 800f32c:	3501      	adds	r5, #1
 800f32e:	4680      	mov	r8, r0
 800f330:	4689      	mov	r9, r1
 800f332:	107f      	asrs	r7, r7, #1
 800f334:	3608      	adds	r6, #8
 800f336:	e7e5      	b.n	800f304 <_dtoa_r+0x36c>
 800f338:	f000 809b 	beq.w	800f472 <_dtoa_r+0x4da>
 800f33c:	9b00      	ldr	r3, [sp, #0]
 800f33e:	4f9d      	ldr	r7, [pc, #628]	; (800f5b4 <_dtoa_r+0x61c>)
 800f340:	425e      	negs	r6, r3
 800f342:	4b9b      	ldr	r3, [pc, #620]	; (800f5b0 <_dtoa_r+0x618>)
 800f344:	f006 020f 	and.w	r2, r6, #15
 800f348:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f350:	ec51 0b19 	vmov	r0, r1, d9
 800f354:	f7f1 f970 	bl	8000638 <__aeabi_dmul>
 800f358:	1136      	asrs	r6, r6, #4
 800f35a:	4682      	mov	sl, r0
 800f35c:	468b      	mov	fp, r1
 800f35e:	2300      	movs	r3, #0
 800f360:	2502      	movs	r5, #2
 800f362:	2e00      	cmp	r6, #0
 800f364:	d17a      	bne.n	800f45c <_dtoa_r+0x4c4>
 800f366:	2b00      	cmp	r3, #0
 800f368:	d1d3      	bne.n	800f312 <_dtoa_r+0x37a>
 800f36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	f000 8082 	beq.w	800f476 <_dtoa_r+0x4de>
 800f372:	4b91      	ldr	r3, [pc, #580]	; (800f5b8 <_dtoa_r+0x620>)
 800f374:	2200      	movs	r2, #0
 800f376:	4650      	mov	r0, sl
 800f378:	4659      	mov	r1, fp
 800f37a:	f7f1 fbcf 	bl	8000b1c <__aeabi_dcmplt>
 800f37e:	2800      	cmp	r0, #0
 800f380:	d079      	beq.n	800f476 <_dtoa_r+0x4de>
 800f382:	9b03      	ldr	r3, [sp, #12]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d076      	beq.n	800f476 <_dtoa_r+0x4de>
 800f388:	9b02      	ldr	r3, [sp, #8]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	dd36      	ble.n	800f3fc <_dtoa_r+0x464>
 800f38e:	9b00      	ldr	r3, [sp, #0]
 800f390:	4650      	mov	r0, sl
 800f392:	4659      	mov	r1, fp
 800f394:	1e5f      	subs	r7, r3, #1
 800f396:	2200      	movs	r2, #0
 800f398:	4b88      	ldr	r3, [pc, #544]	; (800f5bc <_dtoa_r+0x624>)
 800f39a:	f7f1 f94d 	bl	8000638 <__aeabi_dmul>
 800f39e:	9e02      	ldr	r6, [sp, #8]
 800f3a0:	4682      	mov	sl, r0
 800f3a2:	468b      	mov	fp, r1
 800f3a4:	3501      	adds	r5, #1
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	f7f1 f8dc 	bl	8000564 <__aeabi_i2d>
 800f3ac:	4652      	mov	r2, sl
 800f3ae:	465b      	mov	r3, fp
 800f3b0:	f7f1 f942 	bl	8000638 <__aeabi_dmul>
 800f3b4:	4b82      	ldr	r3, [pc, #520]	; (800f5c0 <_dtoa_r+0x628>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f7f0 ff88 	bl	80002cc <__adddf3>
 800f3bc:	46d0      	mov	r8, sl
 800f3be:	46d9      	mov	r9, fp
 800f3c0:	4682      	mov	sl, r0
 800f3c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f3c6:	2e00      	cmp	r6, #0
 800f3c8:	d158      	bne.n	800f47c <_dtoa_r+0x4e4>
 800f3ca:	4b7e      	ldr	r3, [pc, #504]	; (800f5c4 <_dtoa_r+0x62c>)
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	4640      	mov	r0, r8
 800f3d0:	4649      	mov	r1, r9
 800f3d2:	f7f0 ff79 	bl	80002c8 <__aeabi_dsub>
 800f3d6:	4652      	mov	r2, sl
 800f3d8:	465b      	mov	r3, fp
 800f3da:	4680      	mov	r8, r0
 800f3dc:	4689      	mov	r9, r1
 800f3de:	f7f1 fbbb 	bl	8000b58 <__aeabi_dcmpgt>
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	f040 8295 	bne.w	800f912 <_dtoa_r+0x97a>
 800f3e8:	4652      	mov	r2, sl
 800f3ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f3ee:	4640      	mov	r0, r8
 800f3f0:	4649      	mov	r1, r9
 800f3f2:	f7f1 fb93 	bl	8000b1c <__aeabi_dcmplt>
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	f040 8289 	bne.w	800f90e <_dtoa_r+0x976>
 800f3fc:	ec5b ab19 	vmov	sl, fp, d9
 800f400:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f402:	2b00      	cmp	r3, #0
 800f404:	f2c0 8148 	blt.w	800f698 <_dtoa_r+0x700>
 800f408:	9a00      	ldr	r2, [sp, #0]
 800f40a:	2a0e      	cmp	r2, #14
 800f40c:	f300 8144 	bgt.w	800f698 <_dtoa_r+0x700>
 800f410:	4b67      	ldr	r3, [pc, #412]	; (800f5b0 <_dtoa_r+0x618>)
 800f412:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f416:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	f280 80d5 	bge.w	800f5cc <_dtoa_r+0x634>
 800f422:	9b03      	ldr	r3, [sp, #12]
 800f424:	2b00      	cmp	r3, #0
 800f426:	f300 80d1 	bgt.w	800f5cc <_dtoa_r+0x634>
 800f42a:	f040 826f 	bne.w	800f90c <_dtoa_r+0x974>
 800f42e:	4b65      	ldr	r3, [pc, #404]	; (800f5c4 <_dtoa_r+0x62c>)
 800f430:	2200      	movs	r2, #0
 800f432:	4640      	mov	r0, r8
 800f434:	4649      	mov	r1, r9
 800f436:	f7f1 f8ff 	bl	8000638 <__aeabi_dmul>
 800f43a:	4652      	mov	r2, sl
 800f43c:	465b      	mov	r3, fp
 800f43e:	f7f1 fb81 	bl	8000b44 <__aeabi_dcmpge>
 800f442:	9e03      	ldr	r6, [sp, #12]
 800f444:	4637      	mov	r7, r6
 800f446:	2800      	cmp	r0, #0
 800f448:	f040 8245 	bne.w	800f8d6 <_dtoa_r+0x93e>
 800f44c:	9d01      	ldr	r5, [sp, #4]
 800f44e:	2331      	movs	r3, #49	; 0x31
 800f450:	f805 3b01 	strb.w	r3, [r5], #1
 800f454:	9b00      	ldr	r3, [sp, #0]
 800f456:	3301      	adds	r3, #1
 800f458:	9300      	str	r3, [sp, #0]
 800f45a:	e240      	b.n	800f8de <_dtoa_r+0x946>
 800f45c:	07f2      	lsls	r2, r6, #31
 800f45e:	d505      	bpl.n	800f46c <_dtoa_r+0x4d4>
 800f460:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f464:	f7f1 f8e8 	bl	8000638 <__aeabi_dmul>
 800f468:	3501      	adds	r5, #1
 800f46a:	2301      	movs	r3, #1
 800f46c:	1076      	asrs	r6, r6, #1
 800f46e:	3708      	adds	r7, #8
 800f470:	e777      	b.n	800f362 <_dtoa_r+0x3ca>
 800f472:	2502      	movs	r5, #2
 800f474:	e779      	b.n	800f36a <_dtoa_r+0x3d2>
 800f476:	9f00      	ldr	r7, [sp, #0]
 800f478:	9e03      	ldr	r6, [sp, #12]
 800f47a:	e794      	b.n	800f3a6 <_dtoa_r+0x40e>
 800f47c:	9901      	ldr	r1, [sp, #4]
 800f47e:	4b4c      	ldr	r3, [pc, #304]	; (800f5b0 <_dtoa_r+0x618>)
 800f480:	4431      	add	r1, r6
 800f482:	910d      	str	r1, [sp, #52]	; 0x34
 800f484:	9908      	ldr	r1, [sp, #32]
 800f486:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f48a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f48e:	2900      	cmp	r1, #0
 800f490:	d043      	beq.n	800f51a <_dtoa_r+0x582>
 800f492:	494d      	ldr	r1, [pc, #308]	; (800f5c8 <_dtoa_r+0x630>)
 800f494:	2000      	movs	r0, #0
 800f496:	f7f1 f9f9 	bl	800088c <__aeabi_ddiv>
 800f49a:	4652      	mov	r2, sl
 800f49c:	465b      	mov	r3, fp
 800f49e:	f7f0 ff13 	bl	80002c8 <__aeabi_dsub>
 800f4a2:	9d01      	ldr	r5, [sp, #4]
 800f4a4:	4682      	mov	sl, r0
 800f4a6:	468b      	mov	fp, r1
 800f4a8:	4649      	mov	r1, r9
 800f4aa:	4640      	mov	r0, r8
 800f4ac:	f7f1 fb74 	bl	8000b98 <__aeabi_d2iz>
 800f4b0:	4606      	mov	r6, r0
 800f4b2:	f7f1 f857 	bl	8000564 <__aeabi_i2d>
 800f4b6:	4602      	mov	r2, r0
 800f4b8:	460b      	mov	r3, r1
 800f4ba:	4640      	mov	r0, r8
 800f4bc:	4649      	mov	r1, r9
 800f4be:	f7f0 ff03 	bl	80002c8 <__aeabi_dsub>
 800f4c2:	3630      	adds	r6, #48	; 0x30
 800f4c4:	f805 6b01 	strb.w	r6, [r5], #1
 800f4c8:	4652      	mov	r2, sl
 800f4ca:	465b      	mov	r3, fp
 800f4cc:	4680      	mov	r8, r0
 800f4ce:	4689      	mov	r9, r1
 800f4d0:	f7f1 fb24 	bl	8000b1c <__aeabi_dcmplt>
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	d163      	bne.n	800f5a0 <_dtoa_r+0x608>
 800f4d8:	4642      	mov	r2, r8
 800f4da:	464b      	mov	r3, r9
 800f4dc:	4936      	ldr	r1, [pc, #216]	; (800f5b8 <_dtoa_r+0x620>)
 800f4de:	2000      	movs	r0, #0
 800f4e0:	f7f0 fef2 	bl	80002c8 <__aeabi_dsub>
 800f4e4:	4652      	mov	r2, sl
 800f4e6:	465b      	mov	r3, fp
 800f4e8:	f7f1 fb18 	bl	8000b1c <__aeabi_dcmplt>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	f040 80b5 	bne.w	800f65c <_dtoa_r+0x6c4>
 800f4f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4f4:	429d      	cmp	r5, r3
 800f4f6:	d081      	beq.n	800f3fc <_dtoa_r+0x464>
 800f4f8:	4b30      	ldr	r3, [pc, #192]	; (800f5bc <_dtoa_r+0x624>)
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	4650      	mov	r0, sl
 800f4fe:	4659      	mov	r1, fp
 800f500:	f7f1 f89a 	bl	8000638 <__aeabi_dmul>
 800f504:	4b2d      	ldr	r3, [pc, #180]	; (800f5bc <_dtoa_r+0x624>)
 800f506:	4682      	mov	sl, r0
 800f508:	468b      	mov	fp, r1
 800f50a:	4640      	mov	r0, r8
 800f50c:	4649      	mov	r1, r9
 800f50e:	2200      	movs	r2, #0
 800f510:	f7f1 f892 	bl	8000638 <__aeabi_dmul>
 800f514:	4680      	mov	r8, r0
 800f516:	4689      	mov	r9, r1
 800f518:	e7c6      	b.n	800f4a8 <_dtoa_r+0x510>
 800f51a:	4650      	mov	r0, sl
 800f51c:	4659      	mov	r1, fp
 800f51e:	f7f1 f88b 	bl	8000638 <__aeabi_dmul>
 800f522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f524:	9d01      	ldr	r5, [sp, #4]
 800f526:	930f      	str	r3, [sp, #60]	; 0x3c
 800f528:	4682      	mov	sl, r0
 800f52a:	468b      	mov	fp, r1
 800f52c:	4649      	mov	r1, r9
 800f52e:	4640      	mov	r0, r8
 800f530:	f7f1 fb32 	bl	8000b98 <__aeabi_d2iz>
 800f534:	4606      	mov	r6, r0
 800f536:	f7f1 f815 	bl	8000564 <__aeabi_i2d>
 800f53a:	3630      	adds	r6, #48	; 0x30
 800f53c:	4602      	mov	r2, r0
 800f53e:	460b      	mov	r3, r1
 800f540:	4640      	mov	r0, r8
 800f542:	4649      	mov	r1, r9
 800f544:	f7f0 fec0 	bl	80002c8 <__aeabi_dsub>
 800f548:	f805 6b01 	strb.w	r6, [r5], #1
 800f54c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f54e:	429d      	cmp	r5, r3
 800f550:	4680      	mov	r8, r0
 800f552:	4689      	mov	r9, r1
 800f554:	f04f 0200 	mov.w	r2, #0
 800f558:	d124      	bne.n	800f5a4 <_dtoa_r+0x60c>
 800f55a:	4b1b      	ldr	r3, [pc, #108]	; (800f5c8 <_dtoa_r+0x630>)
 800f55c:	4650      	mov	r0, sl
 800f55e:	4659      	mov	r1, fp
 800f560:	f7f0 feb4 	bl	80002cc <__adddf3>
 800f564:	4602      	mov	r2, r0
 800f566:	460b      	mov	r3, r1
 800f568:	4640      	mov	r0, r8
 800f56a:	4649      	mov	r1, r9
 800f56c:	f7f1 faf4 	bl	8000b58 <__aeabi_dcmpgt>
 800f570:	2800      	cmp	r0, #0
 800f572:	d173      	bne.n	800f65c <_dtoa_r+0x6c4>
 800f574:	4652      	mov	r2, sl
 800f576:	465b      	mov	r3, fp
 800f578:	4913      	ldr	r1, [pc, #76]	; (800f5c8 <_dtoa_r+0x630>)
 800f57a:	2000      	movs	r0, #0
 800f57c:	f7f0 fea4 	bl	80002c8 <__aeabi_dsub>
 800f580:	4602      	mov	r2, r0
 800f582:	460b      	mov	r3, r1
 800f584:	4640      	mov	r0, r8
 800f586:	4649      	mov	r1, r9
 800f588:	f7f1 fac8 	bl	8000b1c <__aeabi_dcmplt>
 800f58c:	2800      	cmp	r0, #0
 800f58e:	f43f af35 	beq.w	800f3fc <_dtoa_r+0x464>
 800f592:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f594:	1e6b      	subs	r3, r5, #1
 800f596:	930f      	str	r3, [sp, #60]	; 0x3c
 800f598:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f59c:	2b30      	cmp	r3, #48	; 0x30
 800f59e:	d0f8      	beq.n	800f592 <_dtoa_r+0x5fa>
 800f5a0:	9700      	str	r7, [sp, #0]
 800f5a2:	e049      	b.n	800f638 <_dtoa_r+0x6a0>
 800f5a4:	4b05      	ldr	r3, [pc, #20]	; (800f5bc <_dtoa_r+0x624>)
 800f5a6:	f7f1 f847 	bl	8000638 <__aeabi_dmul>
 800f5aa:	4680      	mov	r8, r0
 800f5ac:	4689      	mov	r9, r1
 800f5ae:	e7bd      	b.n	800f52c <_dtoa_r+0x594>
 800f5b0:	08011de0 	.word	0x08011de0
 800f5b4:	08011db8 	.word	0x08011db8
 800f5b8:	3ff00000 	.word	0x3ff00000
 800f5bc:	40240000 	.word	0x40240000
 800f5c0:	401c0000 	.word	0x401c0000
 800f5c4:	40140000 	.word	0x40140000
 800f5c8:	3fe00000 	.word	0x3fe00000
 800f5cc:	9d01      	ldr	r5, [sp, #4]
 800f5ce:	4656      	mov	r6, sl
 800f5d0:	465f      	mov	r7, fp
 800f5d2:	4642      	mov	r2, r8
 800f5d4:	464b      	mov	r3, r9
 800f5d6:	4630      	mov	r0, r6
 800f5d8:	4639      	mov	r1, r7
 800f5da:	f7f1 f957 	bl	800088c <__aeabi_ddiv>
 800f5de:	f7f1 fadb 	bl	8000b98 <__aeabi_d2iz>
 800f5e2:	4682      	mov	sl, r0
 800f5e4:	f7f0 ffbe 	bl	8000564 <__aeabi_i2d>
 800f5e8:	4642      	mov	r2, r8
 800f5ea:	464b      	mov	r3, r9
 800f5ec:	f7f1 f824 	bl	8000638 <__aeabi_dmul>
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	460b      	mov	r3, r1
 800f5f4:	4630      	mov	r0, r6
 800f5f6:	4639      	mov	r1, r7
 800f5f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f5fc:	f7f0 fe64 	bl	80002c8 <__aeabi_dsub>
 800f600:	f805 6b01 	strb.w	r6, [r5], #1
 800f604:	9e01      	ldr	r6, [sp, #4]
 800f606:	9f03      	ldr	r7, [sp, #12]
 800f608:	1bae      	subs	r6, r5, r6
 800f60a:	42b7      	cmp	r7, r6
 800f60c:	4602      	mov	r2, r0
 800f60e:	460b      	mov	r3, r1
 800f610:	d135      	bne.n	800f67e <_dtoa_r+0x6e6>
 800f612:	f7f0 fe5b 	bl	80002cc <__adddf3>
 800f616:	4642      	mov	r2, r8
 800f618:	464b      	mov	r3, r9
 800f61a:	4606      	mov	r6, r0
 800f61c:	460f      	mov	r7, r1
 800f61e:	f7f1 fa9b 	bl	8000b58 <__aeabi_dcmpgt>
 800f622:	b9d0      	cbnz	r0, 800f65a <_dtoa_r+0x6c2>
 800f624:	4642      	mov	r2, r8
 800f626:	464b      	mov	r3, r9
 800f628:	4630      	mov	r0, r6
 800f62a:	4639      	mov	r1, r7
 800f62c:	f7f1 fa6c 	bl	8000b08 <__aeabi_dcmpeq>
 800f630:	b110      	cbz	r0, 800f638 <_dtoa_r+0x6a0>
 800f632:	f01a 0f01 	tst.w	sl, #1
 800f636:	d110      	bne.n	800f65a <_dtoa_r+0x6c2>
 800f638:	4620      	mov	r0, r4
 800f63a:	ee18 1a10 	vmov	r1, s16
 800f63e:	f000 fae9 	bl	800fc14 <_Bfree>
 800f642:	2300      	movs	r3, #0
 800f644:	9800      	ldr	r0, [sp, #0]
 800f646:	702b      	strb	r3, [r5, #0]
 800f648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f64a:	3001      	adds	r0, #1
 800f64c:	6018      	str	r0, [r3, #0]
 800f64e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f650:	2b00      	cmp	r3, #0
 800f652:	f43f acf1 	beq.w	800f038 <_dtoa_r+0xa0>
 800f656:	601d      	str	r5, [r3, #0]
 800f658:	e4ee      	b.n	800f038 <_dtoa_r+0xa0>
 800f65a:	9f00      	ldr	r7, [sp, #0]
 800f65c:	462b      	mov	r3, r5
 800f65e:	461d      	mov	r5, r3
 800f660:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f664:	2a39      	cmp	r2, #57	; 0x39
 800f666:	d106      	bne.n	800f676 <_dtoa_r+0x6de>
 800f668:	9a01      	ldr	r2, [sp, #4]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d1f7      	bne.n	800f65e <_dtoa_r+0x6c6>
 800f66e:	9901      	ldr	r1, [sp, #4]
 800f670:	2230      	movs	r2, #48	; 0x30
 800f672:	3701      	adds	r7, #1
 800f674:	700a      	strb	r2, [r1, #0]
 800f676:	781a      	ldrb	r2, [r3, #0]
 800f678:	3201      	adds	r2, #1
 800f67a:	701a      	strb	r2, [r3, #0]
 800f67c:	e790      	b.n	800f5a0 <_dtoa_r+0x608>
 800f67e:	4ba6      	ldr	r3, [pc, #664]	; (800f918 <_dtoa_r+0x980>)
 800f680:	2200      	movs	r2, #0
 800f682:	f7f0 ffd9 	bl	8000638 <__aeabi_dmul>
 800f686:	2200      	movs	r2, #0
 800f688:	2300      	movs	r3, #0
 800f68a:	4606      	mov	r6, r0
 800f68c:	460f      	mov	r7, r1
 800f68e:	f7f1 fa3b 	bl	8000b08 <__aeabi_dcmpeq>
 800f692:	2800      	cmp	r0, #0
 800f694:	d09d      	beq.n	800f5d2 <_dtoa_r+0x63a>
 800f696:	e7cf      	b.n	800f638 <_dtoa_r+0x6a0>
 800f698:	9a08      	ldr	r2, [sp, #32]
 800f69a:	2a00      	cmp	r2, #0
 800f69c:	f000 80d7 	beq.w	800f84e <_dtoa_r+0x8b6>
 800f6a0:	9a06      	ldr	r2, [sp, #24]
 800f6a2:	2a01      	cmp	r2, #1
 800f6a4:	f300 80ba 	bgt.w	800f81c <_dtoa_r+0x884>
 800f6a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6aa:	2a00      	cmp	r2, #0
 800f6ac:	f000 80b2 	beq.w	800f814 <_dtoa_r+0x87c>
 800f6b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f6b4:	9e07      	ldr	r6, [sp, #28]
 800f6b6:	9d04      	ldr	r5, [sp, #16]
 800f6b8:	9a04      	ldr	r2, [sp, #16]
 800f6ba:	441a      	add	r2, r3
 800f6bc:	9204      	str	r2, [sp, #16]
 800f6be:	9a05      	ldr	r2, [sp, #20]
 800f6c0:	2101      	movs	r1, #1
 800f6c2:	441a      	add	r2, r3
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	9205      	str	r2, [sp, #20]
 800f6c8:	f000 fb5c 	bl	800fd84 <__i2b>
 800f6cc:	4607      	mov	r7, r0
 800f6ce:	2d00      	cmp	r5, #0
 800f6d0:	dd0c      	ble.n	800f6ec <_dtoa_r+0x754>
 800f6d2:	9b05      	ldr	r3, [sp, #20]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	dd09      	ble.n	800f6ec <_dtoa_r+0x754>
 800f6d8:	42ab      	cmp	r3, r5
 800f6da:	9a04      	ldr	r2, [sp, #16]
 800f6dc:	bfa8      	it	ge
 800f6de:	462b      	movge	r3, r5
 800f6e0:	1ad2      	subs	r2, r2, r3
 800f6e2:	9204      	str	r2, [sp, #16]
 800f6e4:	9a05      	ldr	r2, [sp, #20]
 800f6e6:	1aed      	subs	r5, r5, r3
 800f6e8:	1ad3      	subs	r3, r2, r3
 800f6ea:	9305      	str	r3, [sp, #20]
 800f6ec:	9b07      	ldr	r3, [sp, #28]
 800f6ee:	b31b      	cbz	r3, 800f738 <_dtoa_r+0x7a0>
 800f6f0:	9b08      	ldr	r3, [sp, #32]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	f000 80af 	beq.w	800f856 <_dtoa_r+0x8be>
 800f6f8:	2e00      	cmp	r6, #0
 800f6fa:	dd13      	ble.n	800f724 <_dtoa_r+0x78c>
 800f6fc:	4639      	mov	r1, r7
 800f6fe:	4632      	mov	r2, r6
 800f700:	4620      	mov	r0, r4
 800f702:	f000 fbff 	bl	800ff04 <__pow5mult>
 800f706:	ee18 2a10 	vmov	r2, s16
 800f70a:	4601      	mov	r1, r0
 800f70c:	4607      	mov	r7, r0
 800f70e:	4620      	mov	r0, r4
 800f710:	f000 fb4e 	bl	800fdb0 <__multiply>
 800f714:	ee18 1a10 	vmov	r1, s16
 800f718:	4680      	mov	r8, r0
 800f71a:	4620      	mov	r0, r4
 800f71c:	f000 fa7a 	bl	800fc14 <_Bfree>
 800f720:	ee08 8a10 	vmov	s16, r8
 800f724:	9b07      	ldr	r3, [sp, #28]
 800f726:	1b9a      	subs	r2, r3, r6
 800f728:	d006      	beq.n	800f738 <_dtoa_r+0x7a0>
 800f72a:	ee18 1a10 	vmov	r1, s16
 800f72e:	4620      	mov	r0, r4
 800f730:	f000 fbe8 	bl	800ff04 <__pow5mult>
 800f734:	ee08 0a10 	vmov	s16, r0
 800f738:	2101      	movs	r1, #1
 800f73a:	4620      	mov	r0, r4
 800f73c:	f000 fb22 	bl	800fd84 <__i2b>
 800f740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f742:	2b00      	cmp	r3, #0
 800f744:	4606      	mov	r6, r0
 800f746:	f340 8088 	ble.w	800f85a <_dtoa_r+0x8c2>
 800f74a:	461a      	mov	r2, r3
 800f74c:	4601      	mov	r1, r0
 800f74e:	4620      	mov	r0, r4
 800f750:	f000 fbd8 	bl	800ff04 <__pow5mult>
 800f754:	9b06      	ldr	r3, [sp, #24]
 800f756:	2b01      	cmp	r3, #1
 800f758:	4606      	mov	r6, r0
 800f75a:	f340 8081 	ble.w	800f860 <_dtoa_r+0x8c8>
 800f75e:	f04f 0800 	mov.w	r8, #0
 800f762:	6933      	ldr	r3, [r6, #16]
 800f764:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f768:	6918      	ldr	r0, [r3, #16]
 800f76a:	f000 fabb 	bl	800fce4 <__hi0bits>
 800f76e:	f1c0 0020 	rsb	r0, r0, #32
 800f772:	9b05      	ldr	r3, [sp, #20]
 800f774:	4418      	add	r0, r3
 800f776:	f010 001f 	ands.w	r0, r0, #31
 800f77a:	f000 8092 	beq.w	800f8a2 <_dtoa_r+0x90a>
 800f77e:	f1c0 0320 	rsb	r3, r0, #32
 800f782:	2b04      	cmp	r3, #4
 800f784:	f340 808a 	ble.w	800f89c <_dtoa_r+0x904>
 800f788:	f1c0 001c 	rsb	r0, r0, #28
 800f78c:	9b04      	ldr	r3, [sp, #16]
 800f78e:	4403      	add	r3, r0
 800f790:	9304      	str	r3, [sp, #16]
 800f792:	9b05      	ldr	r3, [sp, #20]
 800f794:	4403      	add	r3, r0
 800f796:	4405      	add	r5, r0
 800f798:	9305      	str	r3, [sp, #20]
 800f79a:	9b04      	ldr	r3, [sp, #16]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	dd07      	ble.n	800f7b0 <_dtoa_r+0x818>
 800f7a0:	ee18 1a10 	vmov	r1, s16
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	4620      	mov	r0, r4
 800f7a8:	f000 fc06 	bl	800ffb8 <__lshift>
 800f7ac:	ee08 0a10 	vmov	s16, r0
 800f7b0:	9b05      	ldr	r3, [sp, #20]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	dd05      	ble.n	800f7c2 <_dtoa_r+0x82a>
 800f7b6:	4631      	mov	r1, r6
 800f7b8:	461a      	mov	r2, r3
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	f000 fbfc 	bl	800ffb8 <__lshift>
 800f7c0:	4606      	mov	r6, r0
 800f7c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d06e      	beq.n	800f8a6 <_dtoa_r+0x90e>
 800f7c8:	ee18 0a10 	vmov	r0, s16
 800f7cc:	4631      	mov	r1, r6
 800f7ce:	f000 fc63 	bl	8010098 <__mcmp>
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	da67      	bge.n	800f8a6 <_dtoa_r+0x90e>
 800f7d6:	9b00      	ldr	r3, [sp, #0]
 800f7d8:	3b01      	subs	r3, #1
 800f7da:	ee18 1a10 	vmov	r1, s16
 800f7de:	9300      	str	r3, [sp, #0]
 800f7e0:	220a      	movs	r2, #10
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	4620      	mov	r0, r4
 800f7e6:	f000 fa37 	bl	800fc58 <__multadd>
 800f7ea:	9b08      	ldr	r3, [sp, #32]
 800f7ec:	ee08 0a10 	vmov	s16, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	f000 81b1 	beq.w	800fb58 <_dtoa_r+0xbc0>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	4639      	mov	r1, r7
 800f7fa:	220a      	movs	r2, #10
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f000 fa2b 	bl	800fc58 <__multadd>
 800f802:	9b02      	ldr	r3, [sp, #8]
 800f804:	2b00      	cmp	r3, #0
 800f806:	4607      	mov	r7, r0
 800f808:	f300 808e 	bgt.w	800f928 <_dtoa_r+0x990>
 800f80c:	9b06      	ldr	r3, [sp, #24]
 800f80e:	2b02      	cmp	r3, #2
 800f810:	dc51      	bgt.n	800f8b6 <_dtoa_r+0x91e>
 800f812:	e089      	b.n	800f928 <_dtoa_r+0x990>
 800f814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f81a:	e74b      	b.n	800f6b4 <_dtoa_r+0x71c>
 800f81c:	9b03      	ldr	r3, [sp, #12]
 800f81e:	1e5e      	subs	r6, r3, #1
 800f820:	9b07      	ldr	r3, [sp, #28]
 800f822:	42b3      	cmp	r3, r6
 800f824:	bfbf      	itttt	lt
 800f826:	9b07      	ldrlt	r3, [sp, #28]
 800f828:	9607      	strlt	r6, [sp, #28]
 800f82a:	1af2      	sublt	r2, r6, r3
 800f82c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f82e:	bfb6      	itet	lt
 800f830:	189b      	addlt	r3, r3, r2
 800f832:	1b9e      	subge	r6, r3, r6
 800f834:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f836:	9b03      	ldr	r3, [sp, #12]
 800f838:	bfb8      	it	lt
 800f83a:	2600      	movlt	r6, #0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	bfb7      	itett	lt
 800f840:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f844:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f848:	1a9d      	sublt	r5, r3, r2
 800f84a:	2300      	movlt	r3, #0
 800f84c:	e734      	b.n	800f6b8 <_dtoa_r+0x720>
 800f84e:	9e07      	ldr	r6, [sp, #28]
 800f850:	9d04      	ldr	r5, [sp, #16]
 800f852:	9f08      	ldr	r7, [sp, #32]
 800f854:	e73b      	b.n	800f6ce <_dtoa_r+0x736>
 800f856:	9a07      	ldr	r2, [sp, #28]
 800f858:	e767      	b.n	800f72a <_dtoa_r+0x792>
 800f85a:	9b06      	ldr	r3, [sp, #24]
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	dc18      	bgt.n	800f892 <_dtoa_r+0x8fa>
 800f860:	f1ba 0f00 	cmp.w	sl, #0
 800f864:	d115      	bne.n	800f892 <_dtoa_r+0x8fa>
 800f866:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f86a:	b993      	cbnz	r3, 800f892 <_dtoa_r+0x8fa>
 800f86c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f870:	0d1b      	lsrs	r3, r3, #20
 800f872:	051b      	lsls	r3, r3, #20
 800f874:	b183      	cbz	r3, 800f898 <_dtoa_r+0x900>
 800f876:	9b04      	ldr	r3, [sp, #16]
 800f878:	3301      	adds	r3, #1
 800f87a:	9304      	str	r3, [sp, #16]
 800f87c:	9b05      	ldr	r3, [sp, #20]
 800f87e:	3301      	adds	r3, #1
 800f880:	9305      	str	r3, [sp, #20]
 800f882:	f04f 0801 	mov.w	r8, #1
 800f886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f888:	2b00      	cmp	r3, #0
 800f88a:	f47f af6a 	bne.w	800f762 <_dtoa_r+0x7ca>
 800f88e:	2001      	movs	r0, #1
 800f890:	e76f      	b.n	800f772 <_dtoa_r+0x7da>
 800f892:	f04f 0800 	mov.w	r8, #0
 800f896:	e7f6      	b.n	800f886 <_dtoa_r+0x8ee>
 800f898:	4698      	mov	r8, r3
 800f89a:	e7f4      	b.n	800f886 <_dtoa_r+0x8ee>
 800f89c:	f43f af7d 	beq.w	800f79a <_dtoa_r+0x802>
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	301c      	adds	r0, #28
 800f8a4:	e772      	b.n	800f78c <_dtoa_r+0x7f4>
 800f8a6:	9b03      	ldr	r3, [sp, #12]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	dc37      	bgt.n	800f91c <_dtoa_r+0x984>
 800f8ac:	9b06      	ldr	r3, [sp, #24]
 800f8ae:	2b02      	cmp	r3, #2
 800f8b0:	dd34      	ble.n	800f91c <_dtoa_r+0x984>
 800f8b2:	9b03      	ldr	r3, [sp, #12]
 800f8b4:	9302      	str	r3, [sp, #8]
 800f8b6:	9b02      	ldr	r3, [sp, #8]
 800f8b8:	b96b      	cbnz	r3, 800f8d6 <_dtoa_r+0x93e>
 800f8ba:	4631      	mov	r1, r6
 800f8bc:	2205      	movs	r2, #5
 800f8be:	4620      	mov	r0, r4
 800f8c0:	f000 f9ca 	bl	800fc58 <__multadd>
 800f8c4:	4601      	mov	r1, r0
 800f8c6:	4606      	mov	r6, r0
 800f8c8:	ee18 0a10 	vmov	r0, s16
 800f8cc:	f000 fbe4 	bl	8010098 <__mcmp>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	f73f adbb 	bgt.w	800f44c <_dtoa_r+0x4b4>
 800f8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8d8:	9d01      	ldr	r5, [sp, #4]
 800f8da:	43db      	mvns	r3, r3
 800f8dc:	9300      	str	r3, [sp, #0]
 800f8de:	f04f 0800 	mov.w	r8, #0
 800f8e2:	4631      	mov	r1, r6
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	f000 f995 	bl	800fc14 <_Bfree>
 800f8ea:	2f00      	cmp	r7, #0
 800f8ec:	f43f aea4 	beq.w	800f638 <_dtoa_r+0x6a0>
 800f8f0:	f1b8 0f00 	cmp.w	r8, #0
 800f8f4:	d005      	beq.n	800f902 <_dtoa_r+0x96a>
 800f8f6:	45b8      	cmp	r8, r7
 800f8f8:	d003      	beq.n	800f902 <_dtoa_r+0x96a>
 800f8fa:	4641      	mov	r1, r8
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	f000 f989 	bl	800fc14 <_Bfree>
 800f902:	4639      	mov	r1, r7
 800f904:	4620      	mov	r0, r4
 800f906:	f000 f985 	bl	800fc14 <_Bfree>
 800f90a:	e695      	b.n	800f638 <_dtoa_r+0x6a0>
 800f90c:	2600      	movs	r6, #0
 800f90e:	4637      	mov	r7, r6
 800f910:	e7e1      	b.n	800f8d6 <_dtoa_r+0x93e>
 800f912:	9700      	str	r7, [sp, #0]
 800f914:	4637      	mov	r7, r6
 800f916:	e599      	b.n	800f44c <_dtoa_r+0x4b4>
 800f918:	40240000 	.word	0x40240000
 800f91c:	9b08      	ldr	r3, [sp, #32]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	f000 80ca 	beq.w	800fab8 <_dtoa_r+0xb20>
 800f924:	9b03      	ldr	r3, [sp, #12]
 800f926:	9302      	str	r3, [sp, #8]
 800f928:	2d00      	cmp	r5, #0
 800f92a:	dd05      	ble.n	800f938 <_dtoa_r+0x9a0>
 800f92c:	4639      	mov	r1, r7
 800f92e:	462a      	mov	r2, r5
 800f930:	4620      	mov	r0, r4
 800f932:	f000 fb41 	bl	800ffb8 <__lshift>
 800f936:	4607      	mov	r7, r0
 800f938:	f1b8 0f00 	cmp.w	r8, #0
 800f93c:	d05b      	beq.n	800f9f6 <_dtoa_r+0xa5e>
 800f93e:	6879      	ldr	r1, [r7, #4]
 800f940:	4620      	mov	r0, r4
 800f942:	f000 f927 	bl	800fb94 <_Balloc>
 800f946:	4605      	mov	r5, r0
 800f948:	b928      	cbnz	r0, 800f956 <_dtoa_r+0x9be>
 800f94a:	4b87      	ldr	r3, [pc, #540]	; (800fb68 <_dtoa_r+0xbd0>)
 800f94c:	4602      	mov	r2, r0
 800f94e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f952:	f7ff bb3b 	b.w	800efcc <_dtoa_r+0x34>
 800f956:	693a      	ldr	r2, [r7, #16]
 800f958:	3202      	adds	r2, #2
 800f95a:	0092      	lsls	r2, r2, #2
 800f95c:	f107 010c 	add.w	r1, r7, #12
 800f960:	300c      	adds	r0, #12
 800f962:	f7fe fc9f 	bl	800e2a4 <memcpy>
 800f966:	2201      	movs	r2, #1
 800f968:	4629      	mov	r1, r5
 800f96a:	4620      	mov	r0, r4
 800f96c:	f000 fb24 	bl	800ffb8 <__lshift>
 800f970:	9b01      	ldr	r3, [sp, #4]
 800f972:	f103 0901 	add.w	r9, r3, #1
 800f976:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f97a:	4413      	add	r3, r2
 800f97c:	9305      	str	r3, [sp, #20]
 800f97e:	f00a 0301 	and.w	r3, sl, #1
 800f982:	46b8      	mov	r8, r7
 800f984:	9304      	str	r3, [sp, #16]
 800f986:	4607      	mov	r7, r0
 800f988:	4631      	mov	r1, r6
 800f98a:	ee18 0a10 	vmov	r0, s16
 800f98e:	f7ff fa77 	bl	800ee80 <quorem>
 800f992:	4641      	mov	r1, r8
 800f994:	9002      	str	r0, [sp, #8]
 800f996:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f99a:	ee18 0a10 	vmov	r0, s16
 800f99e:	f000 fb7b 	bl	8010098 <__mcmp>
 800f9a2:	463a      	mov	r2, r7
 800f9a4:	9003      	str	r0, [sp, #12]
 800f9a6:	4631      	mov	r1, r6
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	f000 fb91 	bl	80100d0 <__mdiff>
 800f9ae:	68c2      	ldr	r2, [r0, #12]
 800f9b0:	f109 3bff 	add.w	fp, r9, #4294967295
 800f9b4:	4605      	mov	r5, r0
 800f9b6:	bb02      	cbnz	r2, 800f9fa <_dtoa_r+0xa62>
 800f9b8:	4601      	mov	r1, r0
 800f9ba:	ee18 0a10 	vmov	r0, s16
 800f9be:	f000 fb6b 	bl	8010098 <__mcmp>
 800f9c2:	4602      	mov	r2, r0
 800f9c4:	4629      	mov	r1, r5
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	9207      	str	r2, [sp, #28]
 800f9ca:	f000 f923 	bl	800fc14 <_Bfree>
 800f9ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f9d2:	ea43 0102 	orr.w	r1, r3, r2
 800f9d6:	9b04      	ldr	r3, [sp, #16]
 800f9d8:	430b      	orrs	r3, r1
 800f9da:	464d      	mov	r5, r9
 800f9dc:	d10f      	bne.n	800f9fe <_dtoa_r+0xa66>
 800f9de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f9e2:	d02a      	beq.n	800fa3a <_dtoa_r+0xaa2>
 800f9e4:	9b03      	ldr	r3, [sp, #12]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	dd02      	ble.n	800f9f0 <_dtoa_r+0xa58>
 800f9ea:	9b02      	ldr	r3, [sp, #8]
 800f9ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f9f0:	f88b a000 	strb.w	sl, [fp]
 800f9f4:	e775      	b.n	800f8e2 <_dtoa_r+0x94a>
 800f9f6:	4638      	mov	r0, r7
 800f9f8:	e7ba      	b.n	800f970 <_dtoa_r+0x9d8>
 800f9fa:	2201      	movs	r2, #1
 800f9fc:	e7e2      	b.n	800f9c4 <_dtoa_r+0xa2c>
 800f9fe:	9b03      	ldr	r3, [sp, #12]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	db04      	blt.n	800fa0e <_dtoa_r+0xa76>
 800fa04:	9906      	ldr	r1, [sp, #24]
 800fa06:	430b      	orrs	r3, r1
 800fa08:	9904      	ldr	r1, [sp, #16]
 800fa0a:	430b      	orrs	r3, r1
 800fa0c:	d122      	bne.n	800fa54 <_dtoa_r+0xabc>
 800fa0e:	2a00      	cmp	r2, #0
 800fa10:	ddee      	ble.n	800f9f0 <_dtoa_r+0xa58>
 800fa12:	ee18 1a10 	vmov	r1, s16
 800fa16:	2201      	movs	r2, #1
 800fa18:	4620      	mov	r0, r4
 800fa1a:	f000 facd 	bl	800ffb8 <__lshift>
 800fa1e:	4631      	mov	r1, r6
 800fa20:	ee08 0a10 	vmov	s16, r0
 800fa24:	f000 fb38 	bl	8010098 <__mcmp>
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	dc03      	bgt.n	800fa34 <_dtoa_r+0xa9c>
 800fa2c:	d1e0      	bne.n	800f9f0 <_dtoa_r+0xa58>
 800fa2e:	f01a 0f01 	tst.w	sl, #1
 800fa32:	d0dd      	beq.n	800f9f0 <_dtoa_r+0xa58>
 800fa34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fa38:	d1d7      	bne.n	800f9ea <_dtoa_r+0xa52>
 800fa3a:	2339      	movs	r3, #57	; 0x39
 800fa3c:	f88b 3000 	strb.w	r3, [fp]
 800fa40:	462b      	mov	r3, r5
 800fa42:	461d      	mov	r5, r3
 800fa44:	3b01      	subs	r3, #1
 800fa46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fa4a:	2a39      	cmp	r2, #57	; 0x39
 800fa4c:	d071      	beq.n	800fb32 <_dtoa_r+0xb9a>
 800fa4e:	3201      	adds	r2, #1
 800fa50:	701a      	strb	r2, [r3, #0]
 800fa52:	e746      	b.n	800f8e2 <_dtoa_r+0x94a>
 800fa54:	2a00      	cmp	r2, #0
 800fa56:	dd07      	ble.n	800fa68 <_dtoa_r+0xad0>
 800fa58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fa5c:	d0ed      	beq.n	800fa3a <_dtoa_r+0xaa2>
 800fa5e:	f10a 0301 	add.w	r3, sl, #1
 800fa62:	f88b 3000 	strb.w	r3, [fp]
 800fa66:	e73c      	b.n	800f8e2 <_dtoa_r+0x94a>
 800fa68:	9b05      	ldr	r3, [sp, #20]
 800fa6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fa6e:	4599      	cmp	r9, r3
 800fa70:	d047      	beq.n	800fb02 <_dtoa_r+0xb6a>
 800fa72:	ee18 1a10 	vmov	r1, s16
 800fa76:	2300      	movs	r3, #0
 800fa78:	220a      	movs	r2, #10
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f000 f8ec 	bl	800fc58 <__multadd>
 800fa80:	45b8      	cmp	r8, r7
 800fa82:	ee08 0a10 	vmov	s16, r0
 800fa86:	f04f 0300 	mov.w	r3, #0
 800fa8a:	f04f 020a 	mov.w	r2, #10
 800fa8e:	4641      	mov	r1, r8
 800fa90:	4620      	mov	r0, r4
 800fa92:	d106      	bne.n	800faa2 <_dtoa_r+0xb0a>
 800fa94:	f000 f8e0 	bl	800fc58 <__multadd>
 800fa98:	4680      	mov	r8, r0
 800fa9a:	4607      	mov	r7, r0
 800fa9c:	f109 0901 	add.w	r9, r9, #1
 800faa0:	e772      	b.n	800f988 <_dtoa_r+0x9f0>
 800faa2:	f000 f8d9 	bl	800fc58 <__multadd>
 800faa6:	4639      	mov	r1, r7
 800faa8:	4680      	mov	r8, r0
 800faaa:	2300      	movs	r3, #0
 800faac:	220a      	movs	r2, #10
 800faae:	4620      	mov	r0, r4
 800fab0:	f000 f8d2 	bl	800fc58 <__multadd>
 800fab4:	4607      	mov	r7, r0
 800fab6:	e7f1      	b.n	800fa9c <_dtoa_r+0xb04>
 800fab8:	9b03      	ldr	r3, [sp, #12]
 800faba:	9302      	str	r3, [sp, #8]
 800fabc:	9d01      	ldr	r5, [sp, #4]
 800fabe:	ee18 0a10 	vmov	r0, s16
 800fac2:	4631      	mov	r1, r6
 800fac4:	f7ff f9dc 	bl	800ee80 <quorem>
 800fac8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800facc:	9b01      	ldr	r3, [sp, #4]
 800face:	f805 ab01 	strb.w	sl, [r5], #1
 800fad2:	1aea      	subs	r2, r5, r3
 800fad4:	9b02      	ldr	r3, [sp, #8]
 800fad6:	4293      	cmp	r3, r2
 800fad8:	dd09      	ble.n	800faee <_dtoa_r+0xb56>
 800fada:	ee18 1a10 	vmov	r1, s16
 800fade:	2300      	movs	r3, #0
 800fae0:	220a      	movs	r2, #10
 800fae2:	4620      	mov	r0, r4
 800fae4:	f000 f8b8 	bl	800fc58 <__multadd>
 800fae8:	ee08 0a10 	vmov	s16, r0
 800faec:	e7e7      	b.n	800fabe <_dtoa_r+0xb26>
 800faee:	9b02      	ldr	r3, [sp, #8]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	bfc8      	it	gt
 800faf4:	461d      	movgt	r5, r3
 800faf6:	9b01      	ldr	r3, [sp, #4]
 800faf8:	bfd8      	it	le
 800fafa:	2501      	movle	r5, #1
 800fafc:	441d      	add	r5, r3
 800fafe:	f04f 0800 	mov.w	r8, #0
 800fb02:	ee18 1a10 	vmov	r1, s16
 800fb06:	2201      	movs	r2, #1
 800fb08:	4620      	mov	r0, r4
 800fb0a:	f000 fa55 	bl	800ffb8 <__lshift>
 800fb0e:	4631      	mov	r1, r6
 800fb10:	ee08 0a10 	vmov	s16, r0
 800fb14:	f000 fac0 	bl	8010098 <__mcmp>
 800fb18:	2800      	cmp	r0, #0
 800fb1a:	dc91      	bgt.n	800fa40 <_dtoa_r+0xaa8>
 800fb1c:	d102      	bne.n	800fb24 <_dtoa_r+0xb8c>
 800fb1e:	f01a 0f01 	tst.w	sl, #1
 800fb22:	d18d      	bne.n	800fa40 <_dtoa_r+0xaa8>
 800fb24:	462b      	mov	r3, r5
 800fb26:	461d      	mov	r5, r3
 800fb28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb2c:	2a30      	cmp	r2, #48	; 0x30
 800fb2e:	d0fa      	beq.n	800fb26 <_dtoa_r+0xb8e>
 800fb30:	e6d7      	b.n	800f8e2 <_dtoa_r+0x94a>
 800fb32:	9a01      	ldr	r2, [sp, #4]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d184      	bne.n	800fa42 <_dtoa_r+0xaaa>
 800fb38:	9b00      	ldr	r3, [sp, #0]
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	9300      	str	r3, [sp, #0]
 800fb3e:	2331      	movs	r3, #49	; 0x31
 800fb40:	7013      	strb	r3, [r2, #0]
 800fb42:	e6ce      	b.n	800f8e2 <_dtoa_r+0x94a>
 800fb44:	4b09      	ldr	r3, [pc, #36]	; (800fb6c <_dtoa_r+0xbd4>)
 800fb46:	f7ff ba95 	b.w	800f074 <_dtoa_r+0xdc>
 800fb4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	f47f aa6e 	bne.w	800f02e <_dtoa_r+0x96>
 800fb52:	4b07      	ldr	r3, [pc, #28]	; (800fb70 <_dtoa_r+0xbd8>)
 800fb54:	f7ff ba8e 	b.w	800f074 <_dtoa_r+0xdc>
 800fb58:	9b02      	ldr	r3, [sp, #8]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	dcae      	bgt.n	800fabc <_dtoa_r+0xb24>
 800fb5e:	9b06      	ldr	r3, [sp, #24]
 800fb60:	2b02      	cmp	r3, #2
 800fb62:	f73f aea8 	bgt.w	800f8b6 <_dtoa_r+0x91e>
 800fb66:	e7a9      	b.n	800fabc <_dtoa_r+0xb24>
 800fb68:	08011d47 	.word	0x08011d47
 800fb6c:	08011ca4 	.word	0x08011ca4
 800fb70:	08011cc8 	.word	0x08011cc8

0800fb74 <_localeconv_r>:
 800fb74:	4800      	ldr	r0, [pc, #0]	; (800fb78 <_localeconv_r+0x4>)
 800fb76:	4770      	bx	lr
 800fb78:	20000160 	.word	0x20000160

0800fb7c <__malloc_lock>:
 800fb7c:	4801      	ldr	r0, [pc, #4]	; (800fb84 <__malloc_lock+0x8>)
 800fb7e:	f000 bd30 	b.w	80105e2 <__retarget_lock_acquire_recursive>
 800fb82:	bf00      	nop
 800fb84:	20000658 	.word	0x20000658

0800fb88 <__malloc_unlock>:
 800fb88:	4801      	ldr	r0, [pc, #4]	; (800fb90 <__malloc_unlock+0x8>)
 800fb8a:	f000 bd2b 	b.w	80105e4 <__retarget_lock_release_recursive>
 800fb8e:	bf00      	nop
 800fb90:	20000658 	.word	0x20000658

0800fb94 <_Balloc>:
 800fb94:	b570      	push	{r4, r5, r6, lr}
 800fb96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fb98:	4604      	mov	r4, r0
 800fb9a:	460d      	mov	r5, r1
 800fb9c:	b976      	cbnz	r6, 800fbbc <_Balloc+0x28>
 800fb9e:	2010      	movs	r0, #16
 800fba0:	f7fe fb70 	bl	800e284 <malloc>
 800fba4:	4602      	mov	r2, r0
 800fba6:	6260      	str	r0, [r4, #36]	; 0x24
 800fba8:	b920      	cbnz	r0, 800fbb4 <_Balloc+0x20>
 800fbaa:	4b18      	ldr	r3, [pc, #96]	; (800fc0c <_Balloc+0x78>)
 800fbac:	4818      	ldr	r0, [pc, #96]	; (800fc10 <_Balloc+0x7c>)
 800fbae:	2166      	movs	r1, #102	; 0x66
 800fbb0:	f000 fce6 	bl	8010580 <__assert_func>
 800fbb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbb8:	6006      	str	r6, [r0, #0]
 800fbba:	60c6      	str	r6, [r0, #12]
 800fbbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fbbe:	68f3      	ldr	r3, [r6, #12]
 800fbc0:	b183      	cbz	r3, 800fbe4 <_Balloc+0x50>
 800fbc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbc4:	68db      	ldr	r3, [r3, #12]
 800fbc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fbca:	b9b8      	cbnz	r0, 800fbfc <_Balloc+0x68>
 800fbcc:	2101      	movs	r1, #1
 800fbce:	fa01 f605 	lsl.w	r6, r1, r5
 800fbd2:	1d72      	adds	r2, r6, #5
 800fbd4:	0092      	lsls	r2, r2, #2
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	f000 fb60 	bl	801029c <_calloc_r>
 800fbdc:	b160      	cbz	r0, 800fbf8 <_Balloc+0x64>
 800fbde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fbe2:	e00e      	b.n	800fc02 <_Balloc+0x6e>
 800fbe4:	2221      	movs	r2, #33	; 0x21
 800fbe6:	2104      	movs	r1, #4
 800fbe8:	4620      	mov	r0, r4
 800fbea:	f000 fb57 	bl	801029c <_calloc_r>
 800fbee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbf0:	60f0      	str	r0, [r6, #12]
 800fbf2:	68db      	ldr	r3, [r3, #12]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d1e4      	bne.n	800fbc2 <_Balloc+0x2e>
 800fbf8:	2000      	movs	r0, #0
 800fbfa:	bd70      	pop	{r4, r5, r6, pc}
 800fbfc:	6802      	ldr	r2, [r0, #0]
 800fbfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc02:	2300      	movs	r3, #0
 800fc04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc08:	e7f7      	b.n	800fbfa <_Balloc+0x66>
 800fc0a:	bf00      	nop
 800fc0c:	08011cd5 	.word	0x08011cd5
 800fc10:	08011d58 	.word	0x08011d58

0800fc14 <_Bfree>:
 800fc14:	b570      	push	{r4, r5, r6, lr}
 800fc16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fc18:	4605      	mov	r5, r0
 800fc1a:	460c      	mov	r4, r1
 800fc1c:	b976      	cbnz	r6, 800fc3c <_Bfree+0x28>
 800fc1e:	2010      	movs	r0, #16
 800fc20:	f7fe fb30 	bl	800e284 <malloc>
 800fc24:	4602      	mov	r2, r0
 800fc26:	6268      	str	r0, [r5, #36]	; 0x24
 800fc28:	b920      	cbnz	r0, 800fc34 <_Bfree+0x20>
 800fc2a:	4b09      	ldr	r3, [pc, #36]	; (800fc50 <_Bfree+0x3c>)
 800fc2c:	4809      	ldr	r0, [pc, #36]	; (800fc54 <_Bfree+0x40>)
 800fc2e:	218a      	movs	r1, #138	; 0x8a
 800fc30:	f000 fca6 	bl	8010580 <__assert_func>
 800fc34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc38:	6006      	str	r6, [r0, #0]
 800fc3a:	60c6      	str	r6, [r0, #12]
 800fc3c:	b13c      	cbz	r4, 800fc4e <_Bfree+0x3a>
 800fc3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fc40:	6862      	ldr	r2, [r4, #4]
 800fc42:	68db      	ldr	r3, [r3, #12]
 800fc44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fc48:	6021      	str	r1, [r4, #0]
 800fc4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fc4e:	bd70      	pop	{r4, r5, r6, pc}
 800fc50:	08011cd5 	.word	0x08011cd5
 800fc54:	08011d58 	.word	0x08011d58

0800fc58 <__multadd>:
 800fc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc5c:	690d      	ldr	r5, [r1, #16]
 800fc5e:	4607      	mov	r7, r0
 800fc60:	460c      	mov	r4, r1
 800fc62:	461e      	mov	r6, r3
 800fc64:	f101 0c14 	add.w	ip, r1, #20
 800fc68:	2000      	movs	r0, #0
 800fc6a:	f8dc 3000 	ldr.w	r3, [ip]
 800fc6e:	b299      	uxth	r1, r3
 800fc70:	fb02 6101 	mla	r1, r2, r1, r6
 800fc74:	0c1e      	lsrs	r6, r3, #16
 800fc76:	0c0b      	lsrs	r3, r1, #16
 800fc78:	fb02 3306 	mla	r3, r2, r6, r3
 800fc7c:	b289      	uxth	r1, r1
 800fc7e:	3001      	adds	r0, #1
 800fc80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fc84:	4285      	cmp	r5, r0
 800fc86:	f84c 1b04 	str.w	r1, [ip], #4
 800fc8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fc8e:	dcec      	bgt.n	800fc6a <__multadd+0x12>
 800fc90:	b30e      	cbz	r6, 800fcd6 <__multadd+0x7e>
 800fc92:	68a3      	ldr	r3, [r4, #8]
 800fc94:	42ab      	cmp	r3, r5
 800fc96:	dc19      	bgt.n	800fccc <__multadd+0x74>
 800fc98:	6861      	ldr	r1, [r4, #4]
 800fc9a:	4638      	mov	r0, r7
 800fc9c:	3101      	adds	r1, #1
 800fc9e:	f7ff ff79 	bl	800fb94 <_Balloc>
 800fca2:	4680      	mov	r8, r0
 800fca4:	b928      	cbnz	r0, 800fcb2 <__multadd+0x5a>
 800fca6:	4602      	mov	r2, r0
 800fca8:	4b0c      	ldr	r3, [pc, #48]	; (800fcdc <__multadd+0x84>)
 800fcaa:	480d      	ldr	r0, [pc, #52]	; (800fce0 <__multadd+0x88>)
 800fcac:	21b5      	movs	r1, #181	; 0xb5
 800fcae:	f000 fc67 	bl	8010580 <__assert_func>
 800fcb2:	6922      	ldr	r2, [r4, #16]
 800fcb4:	3202      	adds	r2, #2
 800fcb6:	f104 010c 	add.w	r1, r4, #12
 800fcba:	0092      	lsls	r2, r2, #2
 800fcbc:	300c      	adds	r0, #12
 800fcbe:	f7fe faf1 	bl	800e2a4 <memcpy>
 800fcc2:	4621      	mov	r1, r4
 800fcc4:	4638      	mov	r0, r7
 800fcc6:	f7ff ffa5 	bl	800fc14 <_Bfree>
 800fcca:	4644      	mov	r4, r8
 800fccc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fcd0:	3501      	adds	r5, #1
 800fcd2:	615e      	str	r6, [r3, #20]
 800fcd4:	6125      	str	r5, [r4, #16]
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcdc:	08011d47 	.word	0x08011d47
 800fce0:	08011d58 	.word	0x08011d58

0800fce4 <__hi0bits>:
 800fce4:	0c03      	lsrs	r3, r0, #16
 800fce6:	041b      	lsls	r3, r3, #16
 800fce8:	b9d3      	cbnz	r3, 800fd20 <__hi0bits+0x3c>
 800fcea:	0400      	lsls	r0, r0, #16
 800fcec:	2310      	movs	r3, #16
 800fcee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fcf2:	bf04      	itt	eq
 800fcf4:	0200      	lsleq	r0, r0, #8
 800fcf6:	3308      	addeq	r3, #8
 800fcf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fcfc:	bf04      	itt	eq
 800fcfe:	0100      	lsleq	r0, r0, #4
 800fd00:	3304      	addeq	r3, #4
 800fd02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fd06:	bf04      	itt	eq
 800fd08:	0080      	lsleq	r0, r0, #2
 800fd0a:	3302      	addeq	r3, #2
 800fd0c:	2800      	cmp	r0, #0
 800fd0e:	db05      	blt.n	800fd1c <__hi0bits+0x38>
 800fd10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fd14:	f103 0301 	add.w	r3, r3, #1
 800fd18:	bf08      	it	eq
 800fd1a:	2320      	moveq	r3, #32
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	4770      	bx	lr
 800fd20:	2300      	movs	r3, #0
 800fd22:	e7e4      	b.n	800fcee <__hi0bits+0xa>

0800fd24 <__lo0bits>:
 800fd24:	6803      	ldr	r3, [r0, #0]
 800fd26:	f013 0207 	ands.w	r2, r3, #7
 800fd2a:	4601      	mov	r1, r0
 800fd2c:	d00b      	beq.n	800fd46 <__lo0bits+0x22>
 800fd2e:	07da      	lsls	r2, r3, #31
 800fd30:	d423      	bmi.n	800fd7a <__lo0bits+0x56>
 800fd32:	0798      	lsls	r0, r3, #30
 800fd34:	bf49      	itett	mi
 800fd36:	085b      	lsrmi	r3, r3, #1
 800fd38:	089b      	lsrpl	r3, r3, #2
 800fd3a:	2001      	movmi	r0, #1
 800fd3c:	600b      	strmi	r3, [r1, #0]
 800fd3e:	bf5c      	itt	pl
 800fd40:	600b      	strpl	r3, [r1, #0]
 800fd42:	2002      	movpl	r0, #2
 800fd44:	4770      	bx	lr
 800fd46:	b298      	uxth	r0, r3
 800fd48:	b9a8      	cbnz	r0, 800fd76 <__lo0bits+0x52>
 800fd4a:	0c1b      	lsrs	r3, r3, #16
 800fd4c:	2010      	movs	r0, #16
 800fd4e:	b2da      	uxtb	r2, r3
 800fd50:	b90a      	cbnz	r2, 800fd56 <__lo0bits+0x32>
 800fd52:	3008      	adds	r0, #8
 800fd54:	0a1b      	lsrs	r3, r3, #8
 800fd56:	071a      	lsls	r2, r3, #28
 800fd58:	bf04      	itt	eq
 800fd5a:	091b      	lsreq	r3, r3, #4
 800fd5c:	3004      	addeq	r0, #4
 800fd5e:	079a      	lsls	r2, r3, #30
 800fd60:	bf04      	itt	eq
 800fd62:	089b      	lsreq	r3, r3, #2
 800fd64:	3002      	addeq	r0, #2
 800fd66:	07da      	lsls	r2, r3, #31
 800fd68:	d403      	bmi.n	800fd72 <__lo0bits+0x4e>
 800fd6a:	085b      	lsrs	r3, r3, #1
 800fd6c:	f100 0001 	add.w	r0, r0, #1
 800fd70:	d005      	beq.n	800fd7e <__lo0bits+0x5a>
 800fd72:	600b      	str	r3, [r1, #0]
 800fd74:	4770      	bx	lr
 800fd76:	4610      	mov	r0, r2
 800fd78:	e7e9      	b.n	800fd4e <__lo0bits+0x2a>
 800fd7a:	2000      	movs	r0, #0
 800fd7c:	4770      	bx	lr
 800fd7e:	2020      	movs	r0, #32
 800fd80:	4770      	bx	lr
	...

0800fd84 <__i2b>:
 800fd84:	b510      	push	{r4, lr}
 800fd86:	460c      	mov	r4, r1
 800fd88:	2101      	movs	r1, #1
 800fd8a:	f7ff ff03 	bl	800fb94 <_Balloc>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	b928      	cbnz	r0, 800fd9e <__i2b+0x1a>
 800fd92:	4b05      	ldr	r3, [pc, #20]	; (800fda8 <__i2b+0x24>)
 800fd94:	4805      	ldr	r0, [pc, #20]	; (800fdac <__i2b+0x28>)
 800fd96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fd9a:	f000 fbf1 	bl	8010580 <__assert_func>
 800fd9e:	2301      	movs	r3, #1
 800fda0:	6144      	str	r4, [r0, #20]
 800fda2:	6103      	str	r3, [r0, #16]
 800fda4:	bd10      	pop	{r4, pc}
 800fda6:	bf00      	nop
 800fda8:	08011d47 	.word	0x08011d47
 800fdac:	08011d58 	.word	0x08011d58

0800fdb0 <__multiply>:
 800fdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb4:	4691      	mov	r9, r2
 800fdb6:	690a      	ldr	r2, [r1, #16]
 800fdb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	bfb8      	it	lt
 800fdc0:	460b      	movlt	r3, r1
 800fdc2:	460c      	mov	r4, r1
 800fdc4:	bfbc      	itt	lt
 800fdc6:	464c      	movlt	r4, r9
 800fdc8:	4699      	movlt	r9, r3
 800fdca:	6927      	ldr	r7, [r4, #16]
 800fdcc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fdd0:	68a3      	ldr	r3, [r4, #8]
 800fdd2:	6861      	ldr	r1, [r4, #4]
 800fdd4:	eb07 060a 	add.w	r6, r7, sl
 800fdd8:	42b3      	cmp	r3, r6
 800fdda:	b085      	sub	sp, #20
 800fddc:	bfb8      	it	lt
 800fdde:	3101      	addlt	r1, #1
 800fde0:	f7ff fed8 	bl	800fb94 <_Balloc>
 800fde4:	b930      	cbnz	r0, 800fdf4 <__multiply+0x44>
 800fde6:	4602      	mov	r2, r0
 800fde8:	4b44      	ldr	r3, [pc, #272]	; (800fefc <__multiply+0x14c>)
 800fdea:	4845      	ldr	r0, [pc, #276]	; (800ff00 <__multiply+0x150>)
 800fdec:	f240 115d 	movw	r1, #349	; 0x15d
 800fdf0:	f000 fbc6 	bl	8010580 <__assert_func>
 800fdf4:	f100 0514 	add.w	r5, r0, #20
 800fdf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fdfc:	462b      	mov	r3, r5
 800fdfe:	2200      	movs	r2, #0
 800fe00:	4543      	cmp	r3, r8
 800fe02:	d321      	bcc.n	800fe48 <__multiply+0x98>
 800fe04:	f104 0314 	add.w	r3, r4, #20
 800fe08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fe0c:	f109 0314 	add.w	r3, r9, #20
 800fe10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fe14:	9202      	str	r2, [sp, #8]
 800fe16:	1b3a      	subs	r2, r7, r4
 800fe18:	3a15      	subs	r2, #21
 800fe1a:	f022 0203 	bic.w	r2, r2, #3
 800fe1e:	3204      	adds	r2, #4
 800fe20:	f104 0115 	add.w	r1, r4, #21
 800fe24:	428f      	cmp	r7, r1
 800fe26:	bf38      	it	cc
 800fe28:	2204      	movcc	r2, #4
 800fe2a:	9201      	str	r2, [sp, #4]
 800fe2c:	9a02      	ldr	r2, [sp, #8]
 800fe2e:	9303      	str	r3, [sp, #12]
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d80c      	bhi.n	800fe4e <__multiply+0x9e>
 800fe34:	2e00      	cmp	r6, #0
 800fe36:	dd03      	ble.n	800fe40 <__multiply+0x90>
 800fe38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d05a      	beq.n	800fef6 <__multiply+0x146>
 800fe40:	6106      	str	r6, [r0, #16]
 800fe42:	b005      	add	sp, #20
 800fe44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe48:	f843 2b04 	str.w	r2, [r3], #4
 800fe4c:	e7d8      	b.n	800fe00 <__multiply+0x50>
 800fe4e:	f8b3 a000 	ldrh.w	sl, [r3]
 800fe52:	f1ba 0f00 	cmp.w	sl, #0
 800fe56:	d024      	beq.n	800fea2 <__multiply+0xf2>
 800fe58:	f104 0e14 	add.w	lr, r4, #20
 800fe5c:	46a9      	mov	r9, r5
 800fe5e:	f04f 0c00 	mov.w	ip, #0
 800fe62:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fe66:	f8d9 1000 	ldr.w	r1, [r9]
 800fe6a:	fa1f fb82 	uxth.w	fp, r2
 800fe6e:	b289      	uxth	r1, r1
 800fe70:	fb0a 110b 	mla	r1, sl, fp, r1
 800fe74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fe78:	f8d9 2000 	ldr.w	r2, [r9]
 800fe7c:	4461      	add	r1, ip
 800fe7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fe82:	fb0a c20b 	mla	r2, sl, fp, ip
 800fe86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fe8a:	b289      	uxth	r1, r1
 800fe8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fe90:	4577      	cmp	r7, lr
 800fe92:	f849 1b04 	str.w	r1, [r9], #4
 800fe96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fe9a:	d8e2      	bhi.n	800fe62 <__multiply+0xb2>
 800fe9c:	9a01      	ldr	r2, [sp, #4]
 800fe9e:	f845 c002 	str.w	ip, [r5, r2]
 800fea2:	9a03      	ldr	r2, [sp, #12]
 800fea4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fea8:	3304      	adds	r3, #4
 800feaa:	f1b9 0f00 	cmp.w	r9, #0
 800feae:	d020      	beq.n	800fef2 <__multiply+0x142>
 800feb0:	6829      	ldr	r1, [r5, #0]
 800feb2:	f104 0c14 	add.w	ip, r4, #20
 800feb6:	46ae      	mov	lr, r5
 800feb8:	f04f 0a00 	mov.w	sl, #0
 800febc:	f8bc b000 	ldrh.w	fp, [ip]
 800fec0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fec4:	fb09 220b 	mla	r2, r9, fp, r2
 800fec8:	4492      	add	sl, r2
 800feca:	b289      	uxth	r1, r1
 800fecc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fed0:	f84e 1b04 	str.w	r1, [lr], #4
 800fed4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fed8:	f8be 1000 	ldrh.w	r1, [lr]
 800fedc:	0c12      	lsrs	r2, r2, #16
 800fede:	fb09 1102 	mla	r1, r9, r2, r1
 800fee2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fee6:	4567      	cmp	r7, ip
 800fee8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800feec:	d8e6      	bhi.n	800febc <__multiply+0x10c>
 800feee:	9a01      	ldr	r2, [sp, #4]
 800fef0:	50a9      	str	r1, [r5, r2]
 800fef2:	3504      	adds	r5, #4
 800fef4:	e79a      	b.n	800fe2c <__multiply+0x7c>
 800fef6:	3e01      	subs	r6, #1
 800fef8:	e79c      	b.n	800fe34 <__multiply+0x84>
 800fefa:	bf00      	nop
 800fefc:	08011d47 	.word	0x08011d47
 800ff00:	08011d58 	.word	0x08011d58

0800ff04 <__pow5mult>:
 800ff04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff08:	4615      	mov	r5, r2
 800ff0a:	f012 0203 	ands.w	r2, r2, #3
 800ff0e:	4606      	mov	r6, r0
 800ff10:	460f      	mov	r7, r1
 800ff12:	d007      	beq.n	800ff24 <__pow5mult+0x20>
 800ff14:	4c25      	ldr	r4, [pc, #148]	; (800ffac <__pow5mult+0xa8>)
 800ff16:	3a01      	subs	r2, #1
 800ff18:	2300      	movs	r3, #0
 800ff1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff1e:	f7ff fe9b 	bl	800fc58 <__multadd>
 800ff22:	4607      	mov	r7, r0
 800ff24:	10ad      	asrs	r5, r5, #2
 800ff26:	d03d      	beq.n	800ffa4 <__pow5mult+0xa0>
 800ff28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ff2a:	b97c      	cbnz	r4, 800ff4c <__pow5mult+0x48>
 800ff2c:	2010      	movs	r0, #16
 800ff2e:	f7fe f9a9 	bl	800e284 <malloc>
 800ff32:	4602      	mov	r2, r0
 800ff34:	6270      	str	r0, [r6, #36]	; 0x24
 800ff36:	b928      	cbnz	r0, 800ff44 <__pow5mult+0x40>
 800ff38:	4b1d      	ldr	r3, [pc, #116]	; (800ffb0 <__pow5mult+0xac>)
 800ff3a:	481e      	ldr	r0, [pc, #120]	; (800ffb4 <__pow5mult+0xb0>)
 800ff3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ff40:	f000 fb1e 	bl	8010580 <__assert_func>
 800ff44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff48:	6004      	str	r4, [r0, #0]
 800ff4a:	60c4      	str	r4, [r0, #12]
 800ff4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ff50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff54:	b94c      	cbnz	r4, 800ff6a <__pow5mult+0x66>
 800ff56:	f240 2171 	movw	r1, #625	; 0x271
 800ff5a:	4630      	mov	r0, r6
 800ff5c:	f7ff ff12 	bl	800fd84 <__i2b>
 800ff60:	2300      	movs	r3, #0
 800ff62:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff66:	4604      	mov	r4, r0
 800ff68:	6003      	str	r3, [r0, #0]
 800ff6a:	f04f 0900 	mov.w	r9, #0
 800ff6e:	07eb      	lsls	r3, r5, #31
 800ff70:	d50a      	bpl.n	800ff88 <__pow5mult+0x84>
 800ff72:	4639      	mov	r1, r7
 800ff74:	4622      	mov	r2, r4
 800ff76:	4630      	mov	r0, r6
 800ff78:	f7ff ff1a 	bl	800fdb0 <__multiply>
 800ff7c:	4639      	mov	r1, r7
 800ff7e:	4680      	mov	r8, r0
 800ff80:	4630      	mov	r0, r6
 800ff82:	f7ff fe47 	bl	800fc14 <_Bfree>
 800ff86:	4647      	mov	r7, r8
 800ff88:	106d      	asrs	r5, r5, #1
 800ff8a:	d00b      	beq.n	800ffa4 <__pow5mult+0xa0>
 800ff8c:	6820      	ldr	r0, [r4, #0]
 800ff8e:	b938      	cbnz	r0, 800ffa0 <__pow5mult+0x9c>
 800ff90:	4622      	mov	r2, r4
 800ff92:	4621      	mov	r1, r4
 800ff94:	4630      	mov	r0, r6
 800ff96:	f7ff ff0b 	bl	800fdb0 <__multiply>
 800ff9a:	6020      	str	r0, [r4, #0]
 800ff9c:	f8c0 9000 	str.w	r9, [r0]
 800ffa0:	4604      	mov	r4, r0
 800ffa2:	e7e4      	b.n	800ff6e <__pow5mult+0x6a>
 800ffa4:	4638      	mov	r0, r7
 800ffa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffaa:	bf00      	nop
 800ffac:	08011ea8 	.word	0x08011ea8
 800ffb0:	08011cd5 	.word	0x08011cd5
 800ffb4:	08011d58 	.word	0x08011d58

0800ffb8 <__lshift>:
 800ffb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffbc:	460c      	mov	r4, r1
 800ffbe:	6849      	ldr	r1, [r1, #4]
 800ffc0:	6923      	ldr	r3, [r4, #16]
 800ffc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ffc6:	68a3      	ldr	r3, [r4, #8]
 800ffc8:	4607      	mov	r7, r0
 800ffca:	4691      	mov	r9, r2
 800ffcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ffd0:	f108 0601 	add.w	r6, r8, #1
 800ffd4:	42b3      	cmp	r3, r6
 800ffd6:	db0b      	blt.n	800fff0 <__lshift+0x38>
 800ffd8:	4638      	mov	r0, r7
 800ffda:	f7ff fddb 	bl	800fb94 <_Balloc>
 800ffde:	4605      	mov	r5, r0
 800ffe0:	b948      	cbnz	r0, 800fff6 <__lshift+0x3e>
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	4b2a      	ldr	r3, [pc, #168]	; (8010090 <__lshift+0xd8>)
 800ffe6:	482b      	ldr	r0, [pc, #172]	; (8010094 <__lshift+0xdc>)
 800ffe8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ffec:	f000 fac8 	bl	8010580 <__assert_func>
 800fff0:	3101      	adds	r1, #1
 800fff2:	005b      	lsls	r3, r3, #1
 800fff4:	e7ee      	b.n	800ffd4 <__lshift+0x1c>
 800fff6:	2300      	movs	r3, #0
 800fff8:	f100 0114 	add.w	r1, r0, #20
 800fffc:	f100 0210 	add.w	r2, r0, #16
 8010000:	4618      	mov	r0, r3
 8010002:	4553      	cmp	r3, sl
 8010004:	db37      	blt.n	8010076 <__lshift+0xbe>
 8010006:	6920      	ldr	r0, [r4, #16]
 8010008:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801000c:	f104 0314 	add.w	r3, r4, #20
 8010010:	f019 091f 	ands.w	r9, r9, #31
 8010014:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010018:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801001c:	d02f      	beq.n	801007e <__lshift+0xc6>
 801001e:	f1c9 0e20 	rsb	lr, r9, #32
 8010022:	468a      	mov	sl, r1
 8010024:	f04f 0c00 	mov.w	ip, #0
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	fa02 f209 	lsl.w	r2, r2, r9
 801002e:	ea42 020c 	orr.w	r2, r2, ip
 8010032:	f84a 2b04 	str.w	r2, [sl], #4
 8010036:	f853 2b04 	ldr.w	r2, [r3], #4
 801003a:	4298      	cmp	r0, r3
 801003c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010040:	d8f2      	bhi.n	8010028 <__lshift+0x70>
 8010042:	1b03      	subs	r3, r0, r4
 8010044:	3b15      	subs	r3, #21
 8010046:	f023 0303 	bic.w	r3, r3, #3
 801004a:	3304      	adds	r3, #4
 801004c:	f104 0215 	add.w	r2, r4, #21
 8010050:	4290      	cmp	r0, r2
 8010052:	bf38      	it	cc
 8010054:	2304      	movcc	r3, #4
 8010056:	f841 c003 	str.w	ip, [r1, r3]
 801005a:	f1bc 0f00 	cmp.w	ip, #0
 801005e:	d001      	beq.n	8010064 <__lshift+0xac>
 8010060:	f108 0602 	add.w	r6, r8, #2
 8010064:	3e01      	subs	r6, #1
 8010066:	4638      	mov	r0, r7
 8010068:	612e      	str	r6, [r5, #16]
 801006a:	4621      	mov	r1, r4
 801006c:	f7ff fdd2 	bl	800fc14 <_Bfree>
 8010070:	4628      	mov	r0, r5
 8010072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010076:	f842 0f04 	str.w	r0, [r2, #4]!
 801007a:	3301      	adds	r3, #1
 801007c:	e7c1      	b.n	8010002 <__lshift+0x4a>
 801007e:	3904      	subs	r1, #4
 8010080:	f853 2b04 	ldr.w	r2, [r3], #4
 8010084:	f841 2f04 	str.w	r2, [r1, #4]!
 8010088:	4298      	cmp	r0, r3
 801008a:	d8f9      	bhi.n	8010080 <__lshift+0xc8>
 801008c:	e7ea      	b.n	8010064 <__lshift+0xac>
 801008e:	bf00      	nop
 8010090:	08011d47 	.word	0x08011d47
 8010094:	08011d58 	.word	0x08011d58

08010098 <__mcmp>:
 8010098:	b530      	push	{r4, r5, lr}
 801009a:	6902      	ldr	r2, [r0, #16]
 801009c:	690c      	ldr	r4, [r1, #16]
 801009e:	1b12      	subs	r2, r2, r4
 80100a0:	d10e      	bne.n	80100c0 <__mcmp+0x28>
 80100a2:	f100 0314 	add.w	r3, r0, #20
 80100a6:	3114      	adds	r1, #20
 80100a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80100ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80100b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80100b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80100b8:	42a5      	cmp	r5, r4
 80100ba:	d003      	beq.n	80100c4 <__mcmp+0x2c>
 80100bc:	d305      	bcc.n	80100ca <__mcmp+0x32>
 80100be:	2201      	movs	r2, #1
 80100c0:	4610      	mov	r0, r2
 80100c2:	bd30      	pop	{r4, r5, pc}
 80100c4:	4283      	cmp	r3, r0
 80100c6:	d3f3      	bcc.n	80100b0 <__mcmp+0x18>
 80100c8:	e7fa      	b.n	80100c0 <__mcmp+0x28>
 80100ca:	f04f 32ff 	mov.w	r2, #4294967295
 80100ce:	e7f7      	b.n	80100c0 <__mcmp+0x28>

080100d0 <__mdiff>:
 80100d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d4:	460c      	mov	r4, r1
 80100d6:	4606      	mov	r6, r0
 80100d8:	4611      	mov	r1, r2
 80100da:	4620      	mov	r0, r4
 80100dc:	4690      	mov	r8, r2
 80100de:	f7ff ffdb 	bl	8010098 <__mcmp>
 80100e2:	1e05      	subs	r5, r0, #0
 80100e4:	d110      	bne.n	8010108 <__mdiff+0x38>
 80100e6:	4629      	mov	r1, r5
 80100e8:	4630      	mov	r0, r6
 80100ea:	f7ff fd53 	bl	800fb94 <_Balloc>
 80100ee:	b930      	cbnz	r0, 80100fe <__mdiff+0x2e>
 80100f0:	4b3a      	ldr	r3, [pc, #232]	; (80101dc <__mdiff+0x10c>)
 80100f2:	4602      	mov	r2, r0
 80100f4:	f240 2132 	movw	r1, #562	; 0x232
 80100f8:	4839      	ldr	r0, [pc, #228]	; (80101e0 <__mdiff+0x110>)
 80100fa:	f000 fa41 	bl	8010580 <__assert_func>
 80100fe:	2301      	movs	r3, #1
 8010100:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010108:	bfa4      	itt	ge
 801010a:	4643      	movge	r3, r8
 801010c:	46a0      	movge	r8, r4
 801010e:	4630      	mov	r0, r6
 8010110:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010114:	bfa6      	itte	ge
 8010116:	461c      	movge	r4, r3
 8010118:	2500      	movge	r5, #0
 801011a:	2501      	movlt	r5, #1
 801011c:	f7ff fd3a 	bl	800fb94 <_Balloc>
 8010120:	b920      	cbnz	r0, 801012c <__mdiff+0x5c>
 8010122:	4b2e      	ldr	r3, [pc, #184]	; (80101dc <__mdiff+0x10c>)
 8010124:	4602      	mov	r2, r0
 8010126:	f44f 7110 	mov.w	r1, #576	; 0x240
 801012a:	e7e5      	b.n	80100f8 <__mdiff+0x28>
 801012c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010130:	6926      	ldr	r6, [r4, #16]
 8010132:	60c5      	str	r5, [r0, #12]
 8010134:	f104 0914 	add.w	r9, r4, #20
 8010138:	f108 0514 	add.w	r5, r8, #20
 801013c:	f100 0e14 	add.w	lr, r0, #20
 8010140:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010144:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010148:	f108 0210 	add.w	r2, r8, #16
 801014c:	46f2      	mov	sl, lr
 801014e:	2100      	movs	r1, #0
 8010150:	f859 3b04 	ldr.w	r3, [r9], #4
 8010154:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010158:	fa1f f883 	uxth.w	r8, r3
 801015c:	fa11 f18b 	uxtah	r1, r1, fp
 8010160:	0c1b      	lsrs	r3, r3, #16
 8010162:	eba1 0808 	sub.w	r8, r1, r8
 8010166:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801016a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801016e:	fa1f f888 	uxth.w	r8, r8
 8010172:	1419      	asrs	r1, r3, #16
 8010174:	454e      	cmp	r6, r9
 8010176:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801017a:	f84a 3b04 	str.w	r3, [sl], #4
 801017e:	d8e7      	bhi.n	8010150 <__mdiff+0x80>
 8010180:	1b33      	subs	r3, r6, r4
 8010182:	3b15      	subs	r3, #21
 8010184:	f023 0303 	bic.w	r3, r3, #3
 8010188:	3304      	adds	r3, #4
 801018a:	3415      	adds	r4, #21
 801018c:	42a6      	cmp	r6, r4
 801018e:	bf38      	it	cc
 8010190:	2304      	movcc	r3, #4
 8010192:	441d      	add	r5, r3
 8010194:	4473      	add	r3, lr
 8010196:	469e      	mov	lr, r3
 8010198:	462e      	mov	r6, r5
 801019a:	4566      	cmp	r6, ip
 801019c:	d30e      	bcc.n	80101bc <__mdiff+0xec>
 801019e:	f10c 0203 	add.w	r2, ip, #3
 80101a2:	1b52      	subs	r2, r2, r5
 80101a4:	f022 0203 	bic.w	r2, r2, #3
 80101a8:	3d03      	subs	r5, #3
 80101aa:	45ac      	cmp	ip, r5
 80101ac:	bf38      	it	cc
 80101ae:	2200      	movcc	r2, #0
 80101b0:	441a      	add	r2, r3
 80101b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80101b6:	b17b      	cbz	r3, 80101d8 <__mdiff+0x108>
 80101b8:	6107      	str	r7, [r0, #16]
 80101ba:	e7a3      	b.n	8010104 <__mdiff+0x34>
 80101bc:	f856 8b04 	ldr.w	r8, [r6], #4
 80101c0:	fa11 f288 	uxtah	r2, r1, r8
 80101c4:	1414      	asrs	r4, r2, #16
 80101c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80101ca:	b292      	uxth	r2, r2
 80101cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80101d0:	f84e 2b04 	str.w	r2, [lr], #4
 80101d4:	1421      	asrs	r1, r4, #16
 80101d6:	e7e0      	b.n	801019a <__mdiff+0xca>
 80101d8:	3f01      	subs	r7, #1
 80101da:	e7ea      	b.n	80101b2 <__mdiff+0xe2>
 80101dc:	08011d47 	.word	0x08011d47
 80101e0:	08011d58 	.word	0x08011d58

080101e4 <__d2b>:
 80101e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80101e8:	4689      	mov	r9, r1
 80101ea:	2101      	movs	r1, #1
 80101ec:	ec57 6b10 	vmov	r6, r7, d0
 80101f0:	4690      	mov	r8, r2
 80101f2:	f7ff fccf 	bl	800fb94 <_Balloc>
 80101f6:	4604      	mov	r4, r0
 80101f8:	b930      	cbnz	r0, 8010208 <__d2b+0x24>
 80101fa:	4602      	mov	r2, r0
 80101fc:	4b25      	ldr	r3, [pc, #148]	; (8010294 <__d2b+0xb0>)
 80101fe:	4826      	ldr	r0, [pc, #152]	; (8010298 <__d2b+0xb4>)
 8010200:	f240 310a 	movw	r1, #778	; 0x30a
 8010204:	f000 f9bc 	bl	8010580 <__assert_func>
 8010208:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801020c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010210:	bb35      	cbnz	r5, 8010260 <__d2b+0x7c>
 8010212:	2e00      	cmp	r6, #0
 8010214:	9301      	str	r3, [sp, #4]
 8010216:	d028      	beq.n	801026a <__d2b+0x86>
 8010218:	4668      	mov	r0, sp
 801021a:	9600      	str	r6, [sp, #0]
 801021c:	f7ff fd82 	bl	800fd24 <__lo0bits>
 8010220:	9900      	ldr	r1, [sp, #0]
 8010222:	b300      	cbz	r0, 8010266 <__d2b+0x82>
 8010224:	9a01      	ldr	r2, [sp, #4]
 8010226:	f1c0 0320 	rsb	r3, r0, #32
 801022a:	fa02 f303 	lsl.w	r3, r2, r3
 801022e:	430b      	orrs	r3, r1
 8010230:	40c2      	lsrs	r2, r0
 8010232:	6163      	str	r3, [r4, #20]
 8010234:	9201      	str	r2, [sp, #4]
 8010236:	9b01      	ldr	r3, [sp, #4]
 8010238:	61a3      	str	r3, [r4, #24]
 801023a:	2b00      	cmp	r3, #0
 801023c:	bf14      	ite	ne
 801023e:	2202      	movne	r2, #2
 8010240:	2201      	moveq	r2, #1
 8010242:	6122      	str	r2, [r4, #16]
 8010244:	b1d5      	cbz	r5, 801027c <__d2b+0x98>
 8010246:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801024a:	4405      	add	r5, r0
 801024c:	f8c9 5000 	str.w	r5, [r9]
 8010250:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010254:	f8c8 0000 	str.w	r0, [r8]
 8010258:	4620      	mov	r0, r4
 801025a:	b003      	add	sp, #12
 801025c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010264:	e7d5      	b.n	8010212 <__d2b+0x2e>
 8010266:	6161      	str	r1, [r4, #20]
 8010268:	e7e5      	b.n	8010236 <__d2b+0x52>
 801026a:	a801      	add	r0, sp, #4
 801026c:	f7ff fd5a 	bl	800fd24 <__lo0bits>
 8010270:	9b01      	ldr	r3, [sp, #4]
 8010272:	6163      	str	r3, [r4, #20]
 8010274:	2201      	movs	r2, #1
 8010276:	6122      	str	r2, [r4, #16]
 8010278:	3020      	adds	r0, #32
 801027a:	e7e3      	b.n	8010244 <__d2b+0x60>
 801027c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010280:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010284:	f8c9 0000 	str.w	r0, [r9]
 8010288:	6918      	ldr	r0, [r3, #16]
 801028a:	f7ff fd2b 	bl	800fce4 <__hi0bits>
 801028e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010292:	e7df      	b.n	8010254 <__d2b+0x70>
 8010294:	08011d47 	.word	0x08011d47
 8010298:	08011d58 	.word	0x08011d58

0801029c <_calloc_r>:
 801029c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801029e:	fba1 2402 	umull	r2, r4, r1, r2
 80102a2:	b94c      	cbnz	r4, 80102b8 <_calloc_r+0x1c>
 80102a4:	4611      	mov	r1, r2
 80102a6:	9201      	str	r2, [sp, #4]
 80102a8:	f7fe f898 	bl	800e3dc <_malloc_r>
 80102ac:	9a01      	ldr	r2, [sp, #4]
 80102ae:	4605      	mov	r5, r0
 80102b0:	b930      	cbnz	r0, 80102c0 <_calloc_r+0x24>
 80102b2:	4628      	mov	r0, r5
 80102b4:	b003      	add	sp, #12
 80102b6:	bd30      	pop	{r4, r5, pc}
 80102b8:	220c      	movs	r2, #12
 80102ba:	6002      	str	r2, [r0, #0]
 80102bc:	2500      	movs	r5, #0
 80102be:	e7f8      	b.n	80102b2 <_calloc_r+0x16>
 80102c0:	4621      	mov	r1, r4
 80102c2:	f7fe f817 	bl	800e2f4 <memset>
 80102c6:	e7f4      	b.n	80102b2 <_calloc_r+0x16>

080102c8 <__ssputs_r>:
 80102c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102cc:	688e      	ldr	r6, [r1, #8]
 80102ce:	429e      	cmp	r6, r3
 80102d0:	4682      	mov	sl, r0
 80102d2:	460c      	mov	r4, r1
 80102d4:	4690      	mov	r8, r2
 80102d6:	461f      	mov	r7, r3
 80102d8:	d838      	bhi.n	801034c <__ssputs_r+0x84>
 80102da:	898a      	ldrh	r2, [r1, #12]
 80102dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80102e0:	d032      	beq.n	8010348 <__ssputs_r+0x80>
 80102e2:	6825      	ldr	r5, [r4, #0]
 80102e4:	6909      	ldr	r1, [r1, #16]
 80102e6:	eba5 0901 	sub.w	r9, r5, r1
 80102ea:	6965      	ldr	r5, [r4, #20]
 80102ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80102f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80102f4:	3301      	adds	r3, #1
 80102f6:	444b      	add	r3, r9
 80102f8:	106d      	asrs	r5, r5, #1
 80102fa:	429d      	cmp	r5, r3
 80102fc:	bf38      	it	cc
 80102fe:	461d      	movcc	r5, r3
 8010300:	0553      	lsls	r3, r2, #21
 8010302:	d531      	bpl.n	8010368 <__ssputs_r+0xa0>
 8010304:	4629      	mov	r1, r5
 8010306:	f7fe f869 	bl	800e3dc <_malloc_r>
 801030a:	4606      	mov	r6, r0
 801030c:	b950      	cbnz	r0, 8010324 <__ssputs_r+0x5c>
 801030e:	230c      	movs	r3, #12
 8010310:	f8ca 3000 	str.w	r3, [sl]
 8010314:	89a3      	ldrh	r3, [r4, #12]
 8010316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801031a:	81a3      	strh	r3, [r4, #12]
 801031c:	f04f 30ff 	mov.w	r0, #4294967295
 8010320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010324:	6921      	ldr	r1, [r4, #16]
 8010326:	464a      	mov	r2, r9
 8010328:	f7fd ffbc 	bl	800e2a4 <memcpy>
 801032c:	89a3      	ldrh	r3, [r4, #12]
 801032e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010336:	81a3      	strh	r3, [r4, #12]
 8010338:	6126      	str	r6, [r4, #16]
 801033a:	6165      	str	r5, [r4, #20]
 801033c:	444e      	add	r6, r9
 801033e:	eba5 0509 	sub.w	r5, r5, r9
 8010342:	6026      	str	r6, [r4, #0]
 8010344:	60a5      	str	r5, [r4, #8]
 8010346:	463e      	mov	r6, r7
 8010348:	42be      	cmp	r6, r7
 801034a:	d900      	bls.n	801034e <__ssputs_r+0x86>
 801034c:	463e      	mov	r6, r7
 801034e:	6820      	ldr	r0, [r4, #0]
 8010350:	4632      	mov	r2, r6
 8010352:	4641      	mov	r1, r8
 8010354:	f7fd ffb4 	bl	800e2c0 <memmove>
 8010358:	68a3      	ldr	r3, [r4, #8]
 801035a:	1b9b      	subs	r3, r3, r6
 801035c:	60a3      	str	r3, [r4, #8]
 801035e:	6823      	ldr	r3, [r4, #0]
 8010360:	4433      	add	r3, r6
 8010362:	6023      	str	r3, [r4, #0]
 8010364:	2000      	movs	r0, #0
 8010366:	e7db      	b.n	8010320 <__ssputs_r+0x58>
 8010368:	462a      	mov	r2, r5
 801036a:	f000 f94e 	bl	801060a <_realloc_r>
 801036e:	4606      	mov	r6, r0
 8010370:	2800      	cmp	r0, #0
 8010372:	d1e1      	bne.n	8010338 <__ssputs_r+0x70>
 8010374:	6921      	ldr	r1, [r4, #16]
 8010376:	4650      	mov	r0, sl
 8010378:	f7fd ffc4 	bl	800e304 <_free_r>
 801037c:	e7c7      	b.n	801030e <__ssputs_r+0x46>
	...

08010380 <_svfiprintf_r>:
 8010380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010384:	4698      	mov	r8, r3
 8010386:	898b      	ldrh	r3, [r1, #12]
 8010388:	061b      	lsls	r3, r3, #24
 801038a:	b09d      	sub	sp, #116	; 0x74
 801038c:	4607      	mov	r7, r0
 801038e:	460d      	mov	r5, r1
 8010390:	4614      	mov	r4, r2
 8010392:	d50e      	bpl.n	80103b2 <_svfiprintf_r+0x32>
 8010394:	690b      	ldr	r3, [r1, #16]
 8010396:	b963      	cbnz	r3, 80103b2 <_svfiprintf_r+0x32>
 8010398:	2140      	movs	r1, #64	; 0x40
 801039a:	f7fe f81f 	bl	800e3dc <_malloc_r>
 801039e:	6028      	str	r0, [r5, #0]
 80103a0:	6128      	str	r0, [r5, #16]
 80103a2:	b920      	cbnz	r0, 80103ae <_svfiprintf_r+0x2e>
 80103a4:	230c      	movs	r3, #12
 80103a6:	603b      	str	r3, [r7, #0]
 80103a8:	f04f 30ff 	mov.w	r0, #4294967295
 80103ac:	e0d1      	b.n	8010552 <_svfiprintf_r+0x1d2>
 80103ae:	2340      	movs	r3, #64	; 0x40
 80103b0:	616b      	str	r3, [r5, #20]
 80103b2:	2300      	movs	r3, #0
 80103b4:	9309      	str	r3, [sp, #36]	; 0x24
 80103b6:	2320      	movs	r3, #32
 80103b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80103c0:	2330      	movs	r3, #48	; 0x30
 80103c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801056c <_svfiprintf_r+0x1ec>
 80103c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103ca:	f04f 0901 	mov.w	r9, #1
 80103ce:	4623      	mov	r3, r4
 80103d0:	469a      	mov	sl, r3
 80103d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103d6:	b10a      	cbz	r2, 80103dc <_svfiprintf_r+0x5c>
 80103d8:	2a25      	cmp	r2, #37	; 0x25
 80103da:	d1f9      	bne.n	80103d0 <_svfiprintf_r+0x50>
 80103dc:	ebba 0b04 	subs.w	fp, sl, r4
 80103e0:	d00b      	beq.n	80103fa <_svfiprintf_r+0x7a>
 80103e2:	465b      	mov	r3, fp
 80103e4:	4622      	mov	r2, r4
 80103e6:	4629      	mov	r1, r5
 80103e8:	4638      	mov	r0, r7
 80103ea:	f7ff ff6d 	bl	80102c8 <__ssputs_r>
 80103ee:	3001      	adds	r0, #1
 80103f0:	f000 80aa 	beq.w	8010548 <_svfiprintf_r+0x1c8>
 80103f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103f6:	445a      	add	r2, fp
 80103f8:	9209      	str	r2, [sp, #36]	; 0x24
 80103fa:	f89a 3000 	ldrb.w	r3, [sl]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	f000 80a2 	beq.w	8010548 <_svfiprintf_r+0x1c8>
 8010404:	2300      	movs	r3, #0
 8010406:	f04f 32ff 	mov.w	r2, #4294967295
 801040a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801040e:	f10a 0a01 	add.w	sl, sl, #1
 8010412:	9304      	str	r3, [sp, #16]
 8010414:	9307      	str	r3, [sp, #28]
 8010416:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801041a:	931a      	str	r3, [sp, #104]	; 0x68
 801041c:	4654      	mov	r4, sl
 801041e:	2205      	movs	r2, #5
 8010420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010424:	4851      	ldr	r0, [pc, #324]	; (801056c <_svfiprintf_r+0x1ec>)
 8010426:	f7ef fef3 	bl	8000210 <memchr>
 801042a:	9a04      	ldr	r2, [sp, #16]
 801042c:	b9d8      	cbnz	r0, 8010466 <_svfiprintf_r+0xe6>
 801042e:	06d0      	lsls	r0, r2, #27
 8010430:	bf44      	itt	mi
 8010432:	2320      	movmi	r3, #32
 8010434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010438:	0711      	lsls	r1, r2, #28
 801043a:	bf44      	itt	mi
 801043c:	232b      	movmi	r3, #43	; 0x2b
 801043e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010442:	f89a 3000 	ldrb.w	r3, [sl]
 8010446:	2b2a      	cmp	r3, #42	; 0x2a
 8010448:	d015      	beq.n	8010476 <_svfiprintf_r+0xf6>
 801044a:	9a07      	ldr	r2, [sp, #28]
 801044c:	4654      	mov	r4, sl
 801044e:	2000      	movs	r0, #0
 8010450:	f04f 0c0a 	mov.w	ip, #10
 8010454:	4621      	mov	r1, r4
 8010456:	f811 3b01 	ldrb.w	r3, [r1], #1
 801045a:	3b30      	subs	r3, #48	; 0x30
 801045c:	2b09      	cmp	r3, #9
 801045e:	d94e      	bls.n	80104fe <_svfiprintf_r+0x17e>
 8010460:	b1b0      	cbz	r0, 8010490 <_svfiprintf_r+0x110>
 8010462:	9207      	str	r2, [sp, #28]
 8010464:	e014      	b.n	8010490 <_svfiprintf_r+0x110>
 8010466:	eba0 0308 	sub.w	r3, r0, r8
 801046a:	fa09 f303 	lsl.w	r3, r9, r3
 801046e:	4313      	orrs	r3, r2
 8010470:	9304      	str	r3, [sp, #16]
 8010472:	46a2      	mov	sl, r4
 8010474:	e7d2      	b.n	801041c <_svfiprintf_r+0x9c>
 8010476:	9b03      	ldr	r3, [sp, #12]
 8010478:	1d19      	adds	r1, r3, #4
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	9103      	str	r1, [sp, #12]
 801047e:	2b00      	cmp	r3, #0
 8010480:	bfbb      	ittet	lt
 8010482:	425b      	neglt	r3, r3
 8010484:	f042 0202 	orrlt.w	r2, r2, #2
 8010488:	9307      	strge	r3, [sp, #28]
 801048a:	9307      	strlt	r3, [sp, #28]
 801048c:	bfb8      	it	lt
 801048e:	9204      	strlt	r2, [sp, #16]
 8010490:	7823      	ldrb	r3, [r4, #0]
 8010492:	2b2e      	cmp	r3, #46	; 0x2e
 8010494:	d10c      	bne.n	80104b0 <_svfiprintf_r+0x130>
 8010496:	7863      	ldrb	r3, [r4, #1]
 8010498:	2b2a      	cmp	r3, #42	; 0x2a
 801049a:	d135      	bne.n	8010508 <_svfiprintf_r+0x188>
 801049c:	9b03      	ldr	r3, [sp, #12]
 801049e:	1d1a      	adds	r2, r3, #4
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	9203      	str	r2, [sp, #12]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	bfb8      	it	lt
 80104a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80104ac:	3402      	adds	r4, #2
 80104ae:	9305      	str	r3, [sp, #20]
 80104b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801057c <_svfiprintf_r+0x1fc>
 80104b4:	7821      	ldrb	r1, [r4, #0]
 80104b6:	2203      	movs	r2, #3
 80104b8:	4650      	mov	r0, sl
 80104ba:	f7ef fea9 	bl	8000210 <memchr>
 80104be:	b140      	cbz	r0, 80104d2 <_svfiprintf_r+0x152>
 80104c0:	2340      	movs	r3, #64	; 0x40
 80104c2:	eba0 000a 	sub.w	r0, r0, sl
 80104c6:	fa03 f000 	lsl.w	r0, r3, r0
 80104ca:	9b04      	ldr	r3, [sp, #16]
 80104cc:	4303      	orrs	r3, r0
 80104ce:	3401      	adds	r4, #1
 80104d0:	9304      	str	r3, [sp, #16]
 80104d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104d6:	4826      	ldr	r0, [pc, #152]	; (8010570 <_svfiprintf_r+0x1f0>)
 80104d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104dc:	2206      	movs	r2, #6
 80104de:	f7ef fe97 	bl	8000210 <memchr>
 80104e2:	2800      	cmp	r0, #0
 80104e4:	d038      	beq.n	8010558 <_svfiprintf_r+0x1d8>
 80104e6:	4b23      	ldr	r3, [pc, #140]	; (8010574 <_svfiprintf_r+0x1f4>)
 80104e8:	bb1b      	cbnz	r3, 8010532 <_svfiprintf_r+0x1b2>
 80104ea:	9b03      	ldr	r3, [sp, #12]
 80104ec:	3307      	adds	r3, #7
 80104ee:	f023 0307 	bic.w	r3, r3, #7
 80104f2:	3308      	adds	r3, #8
 80104f4:	9303      	str	r3, [sp, #12]
 80104f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104f8:	4433      	add	r3, r6
 80104fa:	9309      	str	r3, [sp, #36]	; 0x24
 80104fc:	e767      	b.n	80103ce <_svfiprintf_r+0x4e>
 80104fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010502:	460c      	mov	r4, r1
 8010504:	2001      	movs	r0, #1
 8010506:	e7a5      	b.n	8010454 <_svfiprintf_r+0xd4>
 8010508:	2300      	movs	r3, #0
 801050a:	3401      	adds	r4, #1
 801050c:	9305      	str	r3, [sp, #20]
 801050e:	4619      	mov	r1, r3
 8010510:	f04f 0c0a 	mov.w	ip, #10
 8010514:	4620      	mov	r0, r4
 8010516:	f810 2b01 	ldrb.w	r2, [r0], #1
 801051a:	3a30      	subs	r2, #48	; 0x30
 801051c:	2a09      	cmp	r2, #9
 801051e:	d903      	bls.n	8010528 <_svfiprintf_r+0x1a8>
 8010520:	2b00      	cmp	r3, #0
 8010522:	d0c5      	beq.n	80104b0 <_svfiprintf_r+0x130>
 8010524:	9105      	str	r1, [sp, #20]
 8010526:	e7c3      	b.n	80104b0 <_svfiprintf_r+0x130>
 8010528:	fb0c 2101 	mla	r1, ip, r1, r2
 801052c:	4604      	mov	r4, r0
 801052e:	2301      	movs	r3, #1
 8010530:	e7f0      	b.n	8010514 <_svfiprintf_r+0x194>
 8010532:	ab03      	add	r3, sp, #12
 8010534:	9300      	str	r3, [sp, #0]
 8010536:	462a      	mov	r2, r5
 8010538:	4b0f      	ldr	r3, [pc, #60]	; (8010578 <_svfiprintf_r+0x1f8>)
 801053a:	a904      	add	r1, sp, #16
 801053c:	4638      	mov	r0, r7
 801053e:	f7fe f861 	bl	800e604 <_printf_float>
 8010542:	1c42      	adds	r2, r0, #1
 8010544:	4606      	mov	r6, r0
 8010546:	d1d6      	bne.n	80104f6 <_svfiprintf_r+0x176>
 8010548:	89ab      	ldrh	r3, [r5, #12]
 801054a:	065b      	lsls	r3, r3, #25
 801054c:	f53f af2c 	bmi.w	80103a8 <_svfiprintf_r+0x28>
 8010550:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010552:	b01d      	add	sp, #116	; 0x74
 8010554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010558:	ab03      	add	r3, sp, #12
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	462a      	mov	r2, r5
 801055e:	4b06      	ldr	r3, [pc, #24]	; (8010578 <_svfiprintf_r+0x1f8>)
 8010560:	a904      	add	r1, sp, #16
 8010562:	4638      	mov	r0, r7
 8010564:	f7fe faf2 	bl	800eb4c <_printf_i>
 8010568:	e7eb      	b.n	8010542 <_svfiprintf_r+0x1c2>
 801056a:	bf00      	nop
 801056c:	08011eb4 	.word	0x08011eb4
 8010570:	08011ebe 	.word	0x08011ebe
 8010574:	0800e605 	.word	0x0800e605
 8010578:	080102c9 	.word	0x080102c9
 801057c:	08011eba 	.word	0x08011eba

08010580 <__assert_func>:
 8010580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010582:	4614      	mov	r4, r2
 8010584:	461a      	mov	r2, r3
 8010586:	4b09      	ldr	r3, [pc, #36]	; (80105ac <__assert_func+0x2c>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	4605      	mov	r5, r0
 801058c:	68d8      	ldr	r0, [r3, #12]
 801058e:	b14c      	cbz	r4, 80105a4 <__assert_func+0x24>
 8010590:	4b07      	ldr	r3, [pc, #28]	; (80105b0 <__assert_func+0x30>)
 8010592:	9100      	str	r1, [sp, #0]
 8010594:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010598:	4906      	ldr	r1, [pc, #24]	; (80105b4 <__assert_func+0x34>)
 801059a:	462b      	mov	r3, r5
 801059c:	f000 f80e 	bl	80105bc <fiprintf>
 80105a0:	f7fd fe3e 	bl	800e220 <abort>
 80105a4:	4b04      	ldr	r3, [pc, #16]	; (80105b8 <__assert_func+0x38>)
 80105a6:	461c      	mov	r4, r3
 80105a8:	e7f3      	b.n	8010592 <__assert_func+0x12>
 80105aa:	bf00      	nop
 80105ac:	2000000c 	.word	0x2000000c
 80105b0:	08011ec5 	.word	0x08011ec5
 80105b4:	08011ed2 	.word	0x08011ed2
 80105b8:	08011f00 	.word	0x08011f00

080105bc <fiprintf>:
 80105bc:	b40e      	push	{r1, r2, r3}
 80105be:	b503      	push	{r0, r1, lr}
 80105c0:	4601      	mov	r1, r0
 80105c2:	ab03      	add	r3, sp, #12
 80105c4:	4805      	ldr	r0, [pc, #20]	; (80105dc <fiprintf+0x20>)
 80105c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80105ca:	6800      	ldr	r0, [r0, #0]
 80105cc:	9301      	str	r3, [sp, #4]
 80105ce:	f000 f875 	bl	80106bc <_vfiprintf_r>
 80105d2:	b002      	add	sp, #8
 80105d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80105d8:	b003      	add	sp, #12
 80105da:	4770      	bx	lr
 80105dc:	2000000c 	.word	0x2000000c

080105e0 <__retarget_lock_init_recursive>:
 80105e0:	4770      	bx	lr

080105e2 <__retarget_lock_acquire_recursive>:
 80105e2:	4770      	bx	lr

080105e4 <__retarget_lock_release_recursive>:
 80105e4:	4770      	bx	lr

080105e6 <__ascii_mbtowc>:
 80105e6:	b082      	sub	sp, #8
 80105e8:	b901      	cbnz	r1, 80105ec <__ascii_mbtowc+0x6>
 80105ea:	a901      	add	r1, sp, #4
 80105ec:	b142      	cbz	r2, 8010600 <__ascii_mbtowc+0x1a>
 80105ee:	b14b      	cbz	r3, 8010604 <__ascii_mbtowc+0x1e>
 80105f0:	7813      	ldrb	r3, [r2, #0]
 80105f2:	600b      	str	r3, [r1, #0]
 80105f4:	7812      	ldrb	r2, [r2, #0]
 80105f6:	1e10      	subs	r0, r2, #0
 80105f8:	bf18      	it	ne
 80105fa:	2001      	movne	r0, #1
 80105fc:	b002      	add	sp, #8
 80105fe:	4770      	bx	lr
 8010600:	4610      	mov	r0, r2
 8010602:	e7fb      	b.n	80105fc <__ascii_mbtowc+0x16>
 8010604:	f06f 0001 	mvn.w	r0, #1
 8010608:	e7f8      	b.n	80105fc <__ascii_mbtowc+0x16>

0801060a <_realloc_r>:
 801060a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801060e:	4680      	mov	r8, r0
 8010610:	4614      	mov	r4, r2
 8010612:	460e      	mov	r6, r1
 8010614:	b921      	cbnz	r1, 8010620 <_realloc_r+0x16>
 8010616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801061a:	4611      	mov	r1, r2
 801061c:	f7fd bede 	b.w	800e3dc <_malloc_r>
 8010620:	b92a      	cbnz	r2, 801062e <_realloc_r+0x24>
 8010622:	f7fd fe6f 	bl	800e304 <_free_r>
 8010626:	4625      	mov	r5, r4
 8010628:	4628      	mov	r0, r5
 801062a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801062e:	f000 fc5f 	bl	8010ef0 <_malloc_usable_size_r>
 8010632:	4284      	cmp	r4, r0
 8010634:	4607      	mov	r7, r0
 8010636:	d802      	bhi.n	801063e <_realloc_r+0x34>
 8010638:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801063c:	d812      	bhi.n	8010664 <_realloc_r+0x5a>
 801063e:	4621      	mov	r1, r4
 8010640:	4640      	mov	r0, r8
 8010642:	f7fd fecb 	bl	800e3dc <_malloc_r>
 8010646:	4605      	mov	r5, r0
 8010648:	2800      	cmp	r0, #0
 801064a:	d0ed      	beq.n	8010628 <_realloc_r+0x1e>
 801064c:	42bc      	cmp	r4, r7
 801064e:	4622      	mov	r2, r4
 8010650:	4631      	mov	r1, r6
 8010652:	bf28      	it	cs
 8010654:	463a      	movcs	r2, r7
 8010656:	f7fd fe25 	bl	800e2a4 <memcpy>
 801065a:	4631      	mov	r1, r6
 801065c:	4640      	mov	r0, r8
 801065e:	f7fd fe51 	bl	800e304 <_free_r>
 8010662:	e7e1      	b.n	8010628 <_realloc_r+0x1e>
 8010664:	4635      	mov	r5, r6
 8010666:	e7df      	b.n	8010628 <_realloc_r+0x1e>

08010668 <__sfputc_r>:
 8010668:	6893      	ldr	r3, [r2, #8]
 801066a:	3b01      	subs	r3, #1
 801066c:	2b00      	cmp	r3, #0
 801066e:	b410      	push	{r4}
 8010670:	6093      	str	r3, [r2, #8]
 8010672:	da08      	bge.n	8010686 <__sfputc_r+0x1e>
 8010674:	6994      	ldr	r4, [r2, #24]
 8010676:	42a3      	cmp	r3, r4
 8010678:	db01      	blt.n	801067e <__sfputc_r+0x16>
 801067a:	290a      	cmp	r1, #10
 801067c:	d103      	bne.n	8010686 <__sfputc_r+0x1e>
 801067e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010682:	f000 b94b 	b.w	801091c <__swbuf_r>
 8010686:	6813      	ldr	r3, [r2, #0]
 8010688:	1c58      	adds	r0, r3, #1
 801068a:	6010      	str	r0, [r2, #0]
 801068c:	7019      	strb	r1, [r3, #0]
 801068e:	4608      	mov	r0, r1
 8010690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010694:	4770      	bx	lr

08010696 <__sfputs_r>:
 8010696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010698:	4606      	mov	r6, r0
 801069a:	460f      	mov	r7, r1
 801069c:	4614      	mov	r4, r2
 801069e:	18d5      	adds	r5, r2, r3
 80106a0:	42ac      	cmp	r4, r5
 80106a2:	d101      	bne.n	80106a8 <__sfputs_r+0x12>
 80106a4:	2000      	movs	r0, #0
 80106a6:	e007      	b.n	80106b8 <__sfputs_r+0x22>
 80106a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106ac:	463a      	mov	r2, r7
 80106ae:	4630      	mov	r0, r6
 80106b0:	f7ff ffda 	bl	8010668 <__sfputc_r>
 80106b4:	1c43      	adds	r3, r0, #1
 80106b6:	d1f3      	bne.n	80106a0 <__sfputs_r+0xa>
 80106b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080106bc <_vfiprintf_r>:
 80106bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106c0:	460d      	mov	r5, r1
 80106c2:	b09d      	sub	sp, #116	; 0x74
 80106c4:	4614      	mov	r4, r2
 80106c6:	4698      	mov	r8, r3
 80106c8:	4606      	mov	r6, r0
 80106ca:	b118      	cbz	r0, 80106d4 <_vfiprintf_r+0x18>
 80106cc:	6983      	ldr	r3, [r0, #24]
 80106ce:	b90b      	cbnz	r3, 80106d4 <_vfiprintf_r+0x18>
 80106d0:	f000 fb0c 	bl	8010cec <__sinit>
 80106d4:	4b89      	ldr	r3, [pc, #548]	; (80108fc <_vfiprintf_r+0x240>)
 80106d6:	429d      	cmp	r5, r3
 80106d8:	d11b      	bne.n	8010712 <_vfiprintf_r+0x56>
 80106da:	6875      	ldr	r5, [r6, #4]
 80106dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106de:	07d9      	lsls	r1, r3, #31
 80106e0:	d405      	bmi.n	80106ee <_vfiprintf_r+0x32>
 80106e2:	89ab      	ldrh	r3, [r5, #12]
 80106e4:	059a      	lsls	r2, r3, #22
 80106e6:	d402      	bmi.n	80106ee <_vfiprintf_r+0x32>
 80106e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106ea:	f7ff ff7a 	bl	80105e2 <__retarget_lock_acquire_recursive>
 80106ee:	89ab      	ldrh	r3, [r5, #12]
 80106f0:	071b      	lsls	r3, r3, #28
 80106f2:	d501      	bpl.n	80106f8 <_vfiprintf_r+0x3c>
 80106f4:	692b      	ldr	r3, [r5, #16]
 80106f6:	b9eb      	cbnz	r3, 8010734 <_vfiprintf_r+0x78>
 80106f8:	4629      	mov	r1, r5
 80106fa:	4630      	mov	r0, r6
 80106fc:	f000 f96e 	bl	80109dc <__swsetup_r>
 8010700:	b1c0      	cbz	r0, 8010734 <_vfiprintf_r+0x78>
 8010702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010704:	07dc      	lsls	r4, r3, #31
 8010706:	d50e      	bpl.n	8010726 <_vfiprintf_r+0x6a>
 8010708:	f04f 30ff 	mov.w	r0, #4294967295
 801070c:	b01d      	add	sp, #116	; 0x74
 801070e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010712:	4b7b      	ldr	r3, [pc, #492]	; (8010900 <_vfiprintf_r+0x244>)
 8010714:	429d      	cmp	r5, r3
 8010716:	d101      	bne.n	801071c <_vfiprintf_r+0x60>
 8010718:	68b5      	ldr	r5, [r6, #8]
 801071a:	e7df      	b.n	80106dc <_vfiprintf_r+0x20>
 801071c:	4b79      	ldr	r3, [pc, #484]	; (8010904 <_vfiprintf_r+0x248>)
 801071e:	429d      	cmp	r5, r3
 8010720:	bf08      	it	eq
 8010722:	68f5      	ldreq	r5, [r6, #12]
 8010724:	e7da      	b.n	80106dc <_vfiprintf_r+0x20>
 8010726:	89ab      	ldrh	r3, [r5, #12]
 8010728:	0598      	lsls	r0, r3, #22
 801072a:	d4ed      	bmi.n	8010708 <_vfiprintf_r+0x4c>
 801072c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801072e:	f7ff ff59 	bl	80105e4 <__retarget_lock_release_recursive>
 8010732:	e7e9      	b.n	8010708 <_vfiprintf_r+0x4c>
 8010734:	2300      	movs	r3, #0
 8010736:	9309      	str	r3, [sp, #36]	; 0x24
 8010738:	2320      	movs	r3, #32
 801073a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801073e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010742:	2330      	movs	r3, #48	; 0x30
 8010744:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010908 <_vfiprintf_r+0x24c>
 8010748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801074c:	f04f 0901 	mov.w	r9, #1
 8010750:	4623      	mov	r3, r4
 8010752:	469a      	mov	sl, r3
 8010754:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010758:	b10a      	cbz	r2, 801075e <_vfiprintf_r+0xa2>
 801075a:	2a25      	cmp	r2, #37	; 0x25
 801075c:	d1f9      	bne.n	8010752 <_vfiprintf_r+0x96>
 801075e:	ebba 0b04 	subs.w	fp, sl, r4
 8010762:	d00b      	beq.n	801077c <_vfiprintf_r+0xc0>
 8010764:	465b      	mov	r3, fp
 8010766:	4622      	mov	r2, r4
 8010768:	4629      	mov	r1, r5
 801076a:	4630      	mov	r0, r6
 801076c:	f7ff ff93 	bl	8010696 <__sfputs_r>
 8010770:	3001      	adds	r0, #1
 8010772:	f000 80aa 	beq.w	80108ca <_vfiprintf_r+0x20e>
 8010776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010778:	445a      	add	r2, fp
 801077a:	9209      	str	r2, [sp, #36]	; 0x24
 801077c:	f89a 3000 	ldrb.w	r3, [sl]
 8010780:	2b00      	cmp	r3, #0
 8010782:	f000 80a2 	beq.w	80108ca <_vfiprintf_r+0x20e>
 8010786:	2300      	movs	r3, #0
 8010788:	f04f 32ff 	mov.w	r2, #4294967295
 801078c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010790:	f10a 0a01 	add.w	sl, sl, #1
 8010794:	9304      	str	r3, [sp, #16]
 8010796:	9307      	str	r3, [sp, #28]
 8010798:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801079c:	931a      	str	r3, [sp, #104]	; 0x68
 801079e:	4654      	mov	r4, sl
 80107a0:	2205      	movs	r2, #5
 80107a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107a6:	4858      	ldr	r0, [pc, #352]	; (8010908 <_vfiprintf_r+0x24c>)
 80107a8:	f7ef fd32 	bl	8000210 <memchr>
 80107ac:	9a04      	ldr	r2, [sp, #16]
 80107ae:	b9d8      	cbnz	r0, 80107e8 <_vfiprintf_r+0x12c>
 80107b0:	06d1      	lsls	r1, r2, #27
 80107b2:	bf44      	itt	mi
 80107b4:	2320      	movmi	r3, #32
 80107b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107ba:	0713      	lsls	r3, r2, #28
 80107bc:	bf44      	itt	mi
 80107be:	232b      	movmi	r3, #43	; 0x2b
 80107c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107c4:	f89a 3000 	ldrb.w	r3, [sl]
 80107c8:	2b2a      	cmp	r3, #42	; 0x2a
 80107ca:	d015      	beq.n	80107f8 <_vfiprintf_r+0x13c>
 80107cc:	9a07      	ldr	r2, [sp, #28]
 80107ce:	4654      	mov	r4, sl
 80107d0:	2000      	movs	r0, #0
 80107d2:	f04f 0c0a 	mov.w	ip, #10
 80107d6:	4621      	mov	r1, r4
 80107d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107dc:	3b30      	subs	r3, #48	; 0x30
 80107de:	2b09      	cmp	r3, #9
 80107e0:	d94e      	bls.n	8010880 <_vfiprintf_r+0x1c4>
 80107e2:	b1b0      	cbz	r0, 8010812 <_vfiprintf_r+0x156>
 80107e4:	9207      	str	r2, [sp, #28]
 80107e6:	e014      	b.n	8010812 <_vfiprintf_r+0x156>
 80107e8:	eba0 0308 	sub.w	r3, r0, r8
 80107ec:	fa09 f303 	lsl.w	r3, r9, r3
 80107f0:	4313      	orrs	r3, r2
 80107f2:	9304      	str	r3, [sp, #16]
 80107f4:	46a2      	mov	sl, r4
 80107f6:	e7d2      	b.n	801079e <_vfiprintf_r+0xe2>
 80107f8:	9b03      	ldr	r3, [sp, #12]
 80107fa:	1d19      	adds	r1, r3, #4
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	9103      	str	r1, [sp, #12]
 8010800:	2b00      	cmp	r3, #0
 8010802:	bfbb      	ittet	lt
 8010804:	425b      	neglt	r3, r3
 8010806:	f042 0202 	orrlt.w	r2, r2, #2
 801080a:	9307      	strge	r3, [sp, #28]
 801080c:	9307      	strlt	r3, [sp, #28]
 801080e:	bfb8      	it	lt
 8010810:	9204      	strlt	r2, [sp, #16]
 8010812:	7823      	ldrb	r3, [r4, #0]
 8010814:	2b2e      	cmp	r3, #46	; 0x2e
 8010816:	d10c      	bne.n	8010832 <_vfiprintf_r+0x176>
 8010818:	7863      	ldrb	r3, [r4, #1]
 801081a:	2b2a      	cmp	r3, #42	; 0x2a
 801081c:	d135      	bne.n	801088a <_vfiprintf_r+0x1ce>
 801081e:	9b03      	ldr	r3, [sp, #12]
 8010820:	1d1a      	adds	r2, r3, #4
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	9203      	str	r2, [sp, #12]
 8010826:	2b00      	cmp	r3, #0
 8010828:	bfb8      	it	lt
 801082a:	f04f 33ff 	movlt.w	r3, #4294967295
 801082e:	3402      	adds	r4, #2
 8010830:	9305      	str	r3, [sp, #20]
 8010832:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010918 <_vfiprintf_r+0x25c>
 8010836:	7821      	ldrb	r1, [r4, #0]
 8010838:	2203      	movs	r2, #3
 801083a:	4650      	mov	r0, sl
 801083c:	f7ef fce8 	bl	8000210 <memchr>
 8010840:	b140      	cbz	r0, 8010854 <_vfiprintf_r+0x198>
 8010842:	2340      	movs	r3, #64	; 0x40
 8010844:	eba0 000a 	sub.w	r0, r0, sl
 8010848:	fa03 f000 	lsl.w	r0, r3, r0
 801084c:	9b04      	ldr	r3, [sp, #16]
 801084e:	4303      	orrs	r3, r0
 8010850:	3401      	adds	r4, #1
 8010852:	9304      	str	r3, [sp, #16]
 8010854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010858:	482c      	ldr	r0, [pc, #176]	; (801090c <_vfiprintf_r+0x250>)
 801085a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801085e:	2206      	movs	r2, #6
 8010860:	f7ef fcd6 	bl	8000210 <memchr>
 8010864:	2800      	cmp	r0, #0
 8010866:	d03f      	beq.n	80108e8 <_vfiprintf_r+0x22c>
 8010868:	4b29      	ldr	r3, [pc, #164]	; (8010910 <_vfiprintf_r+0x254>)
 801086a:	bb1b      	cbnz	r3, 80108b4 <_vfiprintf_r+0x1f8>
 801086c:	9b03      	ldr	r3, [sp, #12]
 801086e:	3307      	adds	r3, #7
 8010870:	f023 0307 	bic.w	r3, r3, #7
 8010874:	3308      	adds	r3, #8
 8010876:	9303      	str	r3, [sp, #12]
 8010878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801087a:	443b      	add	r3, r7
 801087c:	9309      	str	r3, [sp, #36]	; 0x24
 801087e:	e767      	b.n	8010750 <_vfiprintf_r+0x94>
 8010880:	fb0c 3202 	mla	r2, ip, r2, r3
 8010884:	460c      	mov	r4, r1
 8010886:	2001      	movs	r0, #1
 8010888:	e7a5      	b.n	80107d6 <_vfiprintf_r+0x11a>
 801088a:	2300      	movs	r3, #0
 801088c:	3401      	adds	r4, #1
 801088e:	9305      	str	r3, [sp, #20]
 8010890:	4619      	mov	r1, r3
 8010892:	f04f 0c0a 	mov.w	ip, #10
 8010896:	4620      	mov	r0, r4
 8010898:	f810 2b01 	ldrb.w	r2, [r0], #1
 801089c:	3a30      	subs	r2, #48	; 0x30
 801089e:	2a09      	cmp	r2, #9
 80108a0:	d903      	bls.n	80108aa <_vfiprintf_r+0x1ee>
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d0c5      	beq.n	8010832 <_vfiprintf_r+0x176>
 80108a6:	9105      	str	r1, [sp, #20]
 80108a8:	e7c3      	b.n	8010832 <_vfiprintf_r+0x176>
 80108aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80108ae:	4604      	mov	r4, r0
 80108b0:	2301      	movs	r3, #1
 80108b2:	e7f0      	b.n	8010896 <_vfiprintf_r+0x1da>
 80108b4:	ab03      	add	r3, sp, #12
 80108b6:	9300      	str	r3, [sp, #0]
 80108b8:	462a      	mov	r2, r5
 80108ba:	4b16      	ldr	r3, [pc, #88]	; (8010914 <_vfiprintf_r+0x258>)
 80108bc:	a904      	add	r1, sp, #16
 80108be:	4630      	mov	r0, r6
 80108c0:	f7fd fea0 	bl	800e604 <_printf_float>
 80108c4:	4607      	mov	r7, r0
 80108c6:	1c78      	adds	r0, r7, #1
 80108c8:	d1d6      	bne.n	8010878 <_vfiprintf_r+0x1bc>
 80108ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80108cc:	07d9      	lsls	r1, r3, #31
 80108ce:	d405      	bmi.n	80108dc <_vfiprintf_r+0x220>
 80108d0:	89ab      	ldrh	r3, [r5, #12]
 80108d2:	059a      	lsls	r2, r3, #22
 80108d4:	d402      	bmi.n	80108dc <_vfiprintf_r+0x220>
 80108d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108d8:	f7ff fe84 	bl	80105e4 <__retarget_lock_release_recursive>
 80108dc:	89ab      	ldrh	r3, [r5, #12]
 80108de:	065b      	lsls	r3, r3, #25
 80108e0:	f53f af12 	bmi.w	8010708 <_vfiprintf_r+0x4c>
 80108e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108e6:	e711      	b.n	801070c <_vfiprintf_r+0x50>
 80108e8:	ab03      	add	r3, sp, #12
 80108ea:	9300      	str	r3, [sp, #0]
 80108ec:	462a      	mov	r2, r5
 80108ee:	4b09      	ldr	r3, [pc, #36]	; (8010914 <_vfiprintf_r+0x258>)
 80108f0:	a904      	add	r1, sp, #16
 80108f2:	4630      	mov	r0, r6
 80108f4:	f7fe f92a 	bl	800eb4c <_printf_i>
 80108f8:	e7e4      	b.n	80108c4 <_vfiprintf_r+0x208>
 80108fa:	bf00      	nop
 80108fc:	0801202c 	.word	0x0801202c
 8010900:	0801204c 	.word	0x0801204c
 8010904:	0801200c 	.word	0x0801200c
 8010908:	08011eb4 	.word	0x08011eb4
 801090c:	08011ebe 	.word	0x08011ebe
 8010910:	0800e605 	.word	0x0800e605
 8010914:	08010697 	.word	0x08010697
 8010918:	08011eba 	.word	0x08011eba

0801091c <__swbuf_r>:
 801091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801091e:	460e      	mov	r6, r1
 8010920:	4614      	mov	r4, r2
 8010922:	4605      	mov	r5, r0
 8010924:	b118      	cbz	r0, 801092e <__swbuf_r+0x12>
 8010926:	6983      	ldr	r3, [r0, #24]
 8010928:	b90b      	cbnz	r3, 801092e <__swbuf_r+0x12>
 801092a:	f000 f9df 	bl	8010cec <__sinit>
 801092e:	4b21      	ldr	r3, [pc, #132]	; (80109b4 <__swbuf_r+0x98>)
 8010930:	429c      	cmp	r4, r3
 8010932:	d12b      	bne.n	801098c <__swbuf_r+0x70>
 8010934:	686c      	ldr	r4, [r5, #4]
 8010936:	69a3      	ldr	r3, [r4, #24]
 8010938:	60a3      	str	r3, [r4, #8]
 801093a:	89a3      	ldrh	r3, [r4, #12]
 801093c:	071a      	lsls	r2, r3, #28
 801093e:	d52f      	bpl.n	80109a0 <__swbuf_r+0x84>
 8010940:	6923      	ldr	r3, [r4, #16]
 8010942:	b36b      	cbz	r3, 80109a0 <__swbuf_r+0x84>
 8010944:	6923      	ldr	r3, [r4, #16]
 8010946:	6820      	ldr	r0, [r4, #0]
 8010948:	1ac0      	subs	r0, r0, r3
 801094a:	6963      	ldr	r3, [r4, #20]
 801094c:	b2f6      	uxtb	r6, r6
 801094e:	4283      	cmp	r3, r0
 8010950:	4637      	mov	r7, r6
 8010952:	dc04      	bgt.n	801095e <__swbuf_r+0x42>
 8010954:	4621      	mov	r1, r4
 8010956:	4628      	mov	r0, r5
 8010958:	f000 f934 	bl	8010bc4 <_fflush_r>
 801095c:	bb30      	cbnz	r0, 80109ac <__swbuf_r+0x90>
 801095e:	68a3      	ldr	r3, [r4, #8]
 8010960:	3b01      	subs	r3, #1
 8010962:	60a3      	str	r3, [r4, #8]
 8010964:	6823      	ldr	r3, [r4, #0]
 8010966:	1c5a      	adds	r2, r3, #1
 8010968:	6022      	str	r2, [r4, #0]
 801096a:	701e      	strb	r6, [r3, #0]
 801096c:	6963      	ldr	r3, [r4, #20]
 801096e:	3001      	adds	r0, #1
 8010970:	4283      	cmp	r3, r0
 8010972:	d004      	beq.n	801097e <__swbuf_r+0x62>
 8010974:	89a3      	ldrh	r3, [r4, #12]
 8010976:	07db      	lsls	r3, r3, #31
 8010978:	d506      	bpl.n	8010988 <__swbuf_r+0x6c>
 801097a:	2e0a      	cmp	r6, #10
 801097c:	d104      	bne.n	8010988 <__swbuf_r+0x6c>
 801097e:	4621      	mov	r1, r4
 8010980:	4628      	mov	r0, r5
 8010982:	f000 f91f 	bl	8010bc4 <_fflush_r>
 8010986:	b988      	cbnz	r0, 80109ac <__swbuf_r+0x90>
 8010988:	4638      	mov	r0, r7
 801098a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801098c:	4b0a      	ldr	r3, [pc, #40]	; (80109b8 <__swbuf_r+0x9c>)
 801098e:	429c      	cmp	r4, r3
 8010990:	d101      	bne.n	8010996 <__swbuf_r+0x7a>
 8010992:	68ac      	ldr	r4, [r5, #8]
 8010994:	e7cf      	b.n	8010936 <__swbuf_r+0x1a>
 8010996:	4b09      	ldr	r3, [pc, #36]	; (80109bc <__swbuf_r+0xa0>)
 8010998:	429c      	cmp	r4, r3
 801099a:	bf08      	it	eq
 801099c:	68ec      	ldreq	r4, [r5, #12]
 801099e:	e7ca      	b.n	8010936 <__swbuf_r+0x1a>
 80109a0:	4621      	mov	r1, r4
 80109a2:	4628      	mov	r0, r5
 80109a4:	f000 f81a 	bl	80109dc <__swsetup_r>
 80109a8:	2800      	cmp	r0, #0
 80109aa:	d0cb      	beq.n	8010944 <__swbuf_r+0x28>
 80109ac:	f04f 37ff 	mov.w	r7, #4294967295
 80109b0:	e7ea      	b.n	8010988 <__swbuf_r+0x6c>
 80109b2:	bf00      	nop
 80109b4:	0801202c 	.word	0x0801202c
 80109b8:	0801204c 	.word	0x0801204c
 80109bc:	0801200c 	.word	0x0801200c

080109c0 <__ascii_wctomb>:
 80109c0:	b149      	cbz	r1, 80109d6 <__ascii_wctomb+0x16>
 80109c2:	2aff      	cmp	r2, #255	; 0xff
 80109c4:	bf85      	ittet	hi
 80109c6:	238a      	movhi	r3, #138	; 0x8a
 80109c8:	6003      	strhi	r3, [r0, #0]
 80109ca:	700a      	strbls	r2, [r1, #0]
 80109cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80109d0:	bf98      	it	ls
 80109d2:	2001      	movls	r0, #1
 80109d4:	4770      	bx	lr
 80109d6:	4608      	mov	r0, r1
 80109d8:	4770      	bx	lr
	...

080109dc <__swsetup_r>:
 80109dc:	4b32      	ldr	r3, [pc, #200]	; (8010aa8 <__swsetup_r+0xcc>)
 80109de:	b570      	push	{r4, r5, r6, lr}
 80109e0:	681d      	ldr	r5, [r3, #0]
 80109e2:	4606      	mov	r6, r0
 80109e4:	460c      	mov	r4, r1
 80109e6:	b125      	cbz	r5, 80109f2 <__swsetup_r+0x16>
 80109e8:	69ab      	ldr	r3, [r5, #24]
 80109ea:	b913      	cbnz	r3, 80109f2 <__swsetup_r+0x16>
 80109ec:	4628      	mov	r0, r5
 80109ee:	f000 f97d 	bl	8010cec <__sinit>
 80109f2:	4b2e      	ldr	r3, [pc, #184]	; (8010aac <__swsetup_r+0xd0>)
 80109f4:	429c      	cmp	r4, r3
 80109f6:	d10f      	bne.n	8010a18 <__swsetup_r+0x3c>
 80109f8:	686c      	ldr	r4, [r5, #4]
 80109fa:	89a3      	ldrh	r3, [r4, #12]
 80109fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a00:	0719      	lsls	r1, r3, #28
 8010a02:	d42c      	bmi.n	8010a5e <__swsetup_r+0x82>
 8010a04:	06dd      	lsls	r5, r3, #27
 8010a06:	d411      	bmi.n	8010a2c <__swsetup_r+0x50>
 8010a08:	2309      	movs	r3, #9
 8010a0a:	6033      	str	r3, [r6, #0]
 8010a0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010a10:	81a3      	strh	r3, [r4, #12]
 8010a12:	f04f 30ff 	mov.w	r0, #4294967295
 8010a16:	e03e      	b.n	8010a96 <__swsetup_r+0xba>
 8010a18:	4b25      	ldr	r3, [pc, #148]	; (8010ab0 <__swsetup_r+0xd4>)
 8010a1a:	429c      	cmp	r4, r3
 8010a1c:	d101      	bne.n	8010a22 <__swsetup_r+0x46>
 8010a1e:	68ac      	ldr	r4, [r5, #8]
 8010a20:	e7eb      	b.n	80109fa <__swsetup_r+0x1e>
 8010a22:	4b24      	ldr	r3, [pc, #144]	; (8010ab4 <__swsetup_r+0xd8>)
 8010a24:	429c      	cmp	r4, r3
 8010a26:	bf08      	it	eq
 8010a28:	68ec      	ldreq	r4, [r5, #12]
 8010a2a:	e7e6      	b.n	80109fa <__swsetup_r+0x1e>
 8010a2c:	0758      	lsls	r0, r3, #29
 8010a2e:	d512      	bpl.n	8010a56 <__swsetup_r+0x7a>
 8010a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a32:	b141      	cbz	r1, 8010a46 <__swsetup_r+0x6a>
 8010a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a38:	4299      	cmp	r1, r3
 8010a3a:	d002      	beq.n	8010a42 <__swsetup_r+0x66>
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	f7fd fc61 	bl	800e304 <_free_r>
 8010a42:	2300      	movs	r3, #0
 8010a44:	6363      	str	r3, [r4, #52]	; 0x34
 8010a46:	89a3      	ldrh	r3, [r4, #12]
 8010a48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010a4c:	81a3      	strh	r3, [r4, #12]
 8010a4e:	2300      	movs	r3, #0
 8010a50:	6063      	str	r3, [r4, #4]
 8010a52:	6923      	ldr	r3, [r4, #16]
 8010a54:	6023      	str	r3, [r4, #0]
 8010a56:	89a3      	ldrh	r3, [r4, #12]
 8010a58:	f043 0308 	orr.w	r3, r3, #8
 8010a5c:	81a3      	strh	r3, [r4, #12]
 8010a5e:	6923      	ldr	r3, [r4, #16]
 8010a60:	b94b      	cbnz	r3, 8010a76 <__swsetup_r+0x9a>
 8010a62:	89a3      	ldrh	r3, [r4, #12]
 8010a64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a6c:	d003      	beq.n	8010a76 <__swsetup_r+0x9a>
 8010a6e:	4621      	mov	r1, r4
 8010a70:	4630      	mov	r0, r6
 8010a72:	f000 f9fd 	bl	8010e70 <__smakebuf_r>
 8010a76:	89a0      	ldrh	r0, [r4, #12]
 8010a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a7c:	f010 0301 	ands.w	r3, r0, #1
 8010a80:	d00a      	beq.n	8010a98 <__swsetup_r+0xbc>
 8010a82:	2300      	movs	r3, #0
 8010a84:	60a3      	str	r3, [r4, #8]
 8010a86:	6963      	ldr	r3, [r4, #20]
 8010a88:	425b      	negs	r3, r3
 8010a8a:	61a3      	str	r3, [r4, #24]
 8010a8c:	6923      	ldr	r3, [r4, #16]
 8010a8e:	b943      	cbnz	r3, 8010aa2 <__swsetup_r+0xc6>
 8010a90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010a94:	d1ba      	bne.n	8010a0c <__swsetup_r+0x30>
 8010a96:	bd70      	pop	{r4, r5, r6, pc}
 8010a98:	0781      	lsls	r1, r0, #30
 8010a9a:	bf58      	it	pl
 8010a9c:	6963      	ldrpl	r3, [r4, #20]
 8010a9e:	60a3      	str	r3, [r4, #8]
 8010aa0:	e7f4      	b.n	8010a8c <__swsetup_r+0xb0>
 8010aa2:	2000      	movs	r0, #0
 8010aa4:	e7f7      	b.n	8010a96 <__swsetup_r+0xba>
 8010aa6:	bf00      	nop
 8010aa8:	2000000c 	.word	0x2000000c
 8010aac:	0801202c 	.word	0x0801202c
 8010ab0:	0801204c 	.word	0x0801204c
 8010ab4:	0801200c 	.word	0x0801200c

08010ab8 <__sflush_r>:
 8010ab8:	898a      	ldrh	r2, [r1, #12]
 8010aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010abe:	4605      	mov	r5, r0
 8010ac0:	0710      	lsls	r0, r2, #28
 8010ac2:	460c      	mov	r4, r1
 8010ac4:	d458      	bmi.n	8010b78 <__sflush_r+0xc0>
 8010ac6:	684b      	ldr	r3, [r1, #4]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	dc05      	bgt.n	8010ad8 <__sflush_r+0x20>
 8010acc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	dc02      	bgt.n	8010ad8 <__sflush_r+0x20>
 8010ad2:	2000      	movs	r0, #0
 8010ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ad8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ada:	2e00      	cmp	r6, #0
 8010adc:	d0f9      	beq.n	8010ad2 <__sflush_r+0x1a>
 8010ade:	2300      	movs	r3, #0
 8010ae0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ae4:	682f      	ldr	r7, [r5, #0]
 8010ae6:	602b      	str	r3, [r5, #0]
 8010ae8:	d032      	beq.n	8010b50 <__sflush_r+0x98>
 8010aea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010aec:	89a3      	ldrh	r3, [r4, #12]
 8010aee:	075a      	lsls	r2, r3, #29
 8010af0:	d505      	bpl.n	8010afe <__sflush_r+0x46>
 8010af2:	6863      	ldr	r3, [r4, #4]
 8010af4:	1ac0      	subs	r0, r0, r3
 8010af6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010af8:	b10b      	cbz	r3, 8010afe <__sflush_r+0x46>
 8010afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010afc:	1ac0      	subs	r0, r0, r3
 8010afe:	2300      	movs	r3, #0
 8010b00:	4602      	mov	r2, r0
 8010b02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b04:	6a21      	ldr	r1, [r4, #32]
 8010b06:	4628      	mov	r0, r5
 8010b08:	47b0      	blx	r6
 8010b0a:	1c43      	adds	r3, r0, #1
 8010b0c:	89a3      	ldrh	r3, [r4, #12]
 8010b0e:	d106      	bne.n	8010b1e <__sflush_r+0x66>
 8010b10:	6829      	ldr	r1, [r5, #0]
 8010b12:	291d      	cmp	r1, #29
 8010b14:	d82c      	bhi.n	8010b70 <__sflush_r+0xb8>
 8010b16:	4a2a      	ldr	r2, [pc, #168]	; (8010bc0 <__sflush_r+0x108>)
 8010b18:	40ca      	lsrs	r2, r1
 8010b1a:	07d6      	lsls	r6, r2, #31
 8010b1c:	d528      	bpl.n	8010b70 <__sflush_r+0xb8>
 8010b1e:	2200      	movs	r2, #0
 8010b20:	6062      	str	r2, [r4, #4]
 8010b22:	04d9      	lsls	r1, r3, #19
 8010b24:	6922      	ldr	r2, [r4, #16]
 8010b26:	6022      	str	r2, [r4, #0]
 8010b28:	d504      	bpl.n	8010b34 <__sflush_r+0x7c>
 8010b2a:	1c42      	adds	r2, r0, #1
 8010b2c:	d101      	bne.n	8010b32 <__sflush_r+0x7a>
 8010b2e:	682b      	ldr	r3, [r5, #0]
 8010b30:	b903      	cbnz	r3, 8010b34 <__sflush_r+0x7c>
 8010b32:	6560      	str	r0, [r4, #84]	; 0x54
 8010b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b36:	602f      	str	r7, [r5, #0]
 8010b38:	2900      	cmp	r1, #0
 8010b3a:	d0ca      	beq.n	8010ad2 <__sflush_r+0x1a>
 8010b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b40:	4299      	cmp	r1, r3
 8010b42:	d002      	beq.n	8010b4a <__sflush_r+0x92>
 8010b44:	4628      	mov	r0, r5
 8010b46:	f7fd fbdd 	bl	800e304 <_free_r>
 8010b4a:	2000      	movs	r0, #0
 8010b4c:	6360      	str	r0, [r4, #52]	; 0x34
 8010b4e:	e7c1      	b.n	8010ad4 <__sflush_r+0x1c>
 8010b50:	6a21      	ldr	r1, [r4, #32]
 8010b52:	2301      	movs	r3, #1
 8010b54:	4628      	mov	r0, r5
 8010b56:	47b0      	blx	r6
 8010b58:	1c41      	adds	r1, r0, #1
 8010b5a:	d1c7      	bne.n	8010aec <__sflush_r+0x34>
 8010b5c:	682b      	ldr	r3, [r5, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d0c4      	beq.n	8010aec <__sflush_r+0x34>
 8010b62:	2b1d      	cmp	r3, #29
 8010b64:	d001      	beq.n	8010b6a <__sflush_r+0xb2>
 8010b66:	2b16      	cmp	r3, #22
 8010b68:	d101      	bne.n	8010b6e <__sflush_r+0xb6>
 8010b6a:	602f      	str	r7, [r5, #0]
 8010b6c:	e7b1      	b.n	8010ad2 <__sflush_r+0x1a>
 8010b6e:	89a3      	ldrh	r3, [r4, #12]
 8010b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b74:	81a3      	strh	r3, [r4, #12]
 8010b76:	e7ad      	b.n	8010ad4 <__sflush_r+0x1c>
 8010b78:	690f      	ldr	r7, [r1, #16]
 8010b7a:	2f00      	cmp	r7, #0
 8010b7c:	d0a9      	beq.n	8010ad2 <__sflush_r+0x1a>
 8010b7e:	0793      	lsls	r3, r2, #30
 8010b80:	680e      	ldr	r6, [r1, #0]
 8010b82:	bf08      	it	eq
 8010b84:	694b      	ldreq	r3, [r1, #20]
 8010b86:	600f      	str	r7, [r1, #0]
 8010b88:	bf18      	it	ne
 8010b8a:	2300      	movne	r3, #0
 8010b8c:	eba6 0807 	sub.w	r8, r6, r7
 8010b90:	608b      	str	r3, [r1, #8]
 8010b92:	f1b8 0f00 	cmp.w	r8, #0
 8010b96:	dd9c      	ble.n	8010ad2 <__sflush_r+0x1a>
 8010b98:	6a21      	ldr	r1, [r4, #32]
 8010b9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010b9c:	4643      	mov	r3, r8
 8010b9e:	463a      	mov	r2, r7
 8010ba0:	4628      	mov	r0, r5
 8010ba2:	47b0      	blx	r6
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	dc06      	bgt.n	8010bb6 <__sflush_r+0xfe>
 8010ba8:	89a3      	ldrh	r3, [r4, #12]
 8010baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bae:	81a3      	strh	r3, [r4, #12]
 8010bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8010bb4:	e78e      	b.n	8010ad4 <__sflush_r+0x1c>
 8010bb6:	4407      	add	r7, r0
 8010bb8:	eba8 0800 	sub.w	r8, r8, r0
 8010bbc:	e7e9      	b.n	8010b92 <__sflush_r+0xda>
 8010bbe:	bf00      	nop
 8010bc0:	20400001 	.word	0x20400001

08010bc4 <_fflush_r>:
 8010bc4:	b538      	push	{r3, r4, r5, lr}
 8010bc6:	690b      	ldr	r3, [r1, #16]
 8010bc8:	4605      	mov	r5, r0
 8010bca:	460c      	mov	r4, r1
 8010bcc:	b913      	cbnz	r3, 8010bd4 <_fflush_r+0x10>
 8010bce:	2500      	movs	r5, #0
 8010bd0:	4628      	mov	r0, r5
 8010bd2:	bd38      	pop	{r3, r4, r5, pc}
 8010bd4:	b118      	cbz	r0, 8010bde <_fflush_r+0x1a>
 8010bd6:	6983      	ldr	r3, [r0, #24]
 8010bd8:	b90b      	cbnz	r3, 8010bde <_fflush_r+0x1a>
 8010bda:	f000 f887 	bl	8010cec <__sinit>
 8010bde:	4b14      	ldr	r3, [pc, #80]	; (8010c30 <_fflush_r+0x6c>)
 8010be0:	429c      	cmp	r4, r3
 8010be2:	d11b      	bne.n	8010c1c <_fflush_r+0x58>
 8010be4:	686c      	ldr	r4, [r5, #4]
 8010be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d0ef      	beq.n	8010bce <_fflush_r+0xa>
 8010bee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010bf0:	07d0      	lsls	r0, r2, #31
 8010bf2:	d404      	bmi.n	8010bfe <_fflush_r+0x3a>
 8010bf4:	0599      	lsls	r1, r3, #22
 8010bf6:	d402      	bmi.n	8010bfe <_fflush_r+0x3a>
 8010bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bfa:	f7ff fcf2 	bl	80105e2 <__retarget_lock_acquire_recursive>
 8010bfe:	4628      	mov	r0, r5
 8010c00:	4621      	mov	r1, r4
 8010c02:	f7ff ff59 	bl	8010ab8 <__sflush_r>
 8010c06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c08:	07da      	lsls	r2, r3, #31
 8010c0a:	4605      	mov	r5, r0
 8010c0c:	d4e0      	bmi.n	8010bd0 <_fflush_r+0xc>
 8010c0e:	89a3      	ldrh	r3, [r4, #12]
 8010c10:	059b      	lsls	r3, r3, #22
 8010c12:	d4dd      	bmi.n	8010bd0 <_fflush_r+0xc>
 8010c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c16:	f7ff fce5 	bl	80105e4 <__retarget_lock_release_recursive>
 8010c1a:	e7d9      	b.n	8010bd0 <_fflush_r+0xc>
 8010c1c:	4b05      	ldr	r3, [pc, #20]	; (8010c34 <_fflush_r+0x70>)
 8010c1e:	429c      	cmp	r4, r3
 8010c20:	d101      	bne.n	8010c26 <_fflush_r+0x62>
 8010c22:	68ac      	ldr	r4, [r5, #8]
 8010c24:	e7df      	b.n	8010be6 <_fflush_r+0x22>
 8010c26:	4b04      	ldr	r3, [pc, #16]	; (8010c38 <_fflush_r+0x74>)
 8010c28:	429c      	cmp	r4, r3
 8010c2a:	bf08      	it	eq
 8010c2c:	68ec      	ldreq	r4, [r5, #12]
 8010c2e:	e7da      	b.n	8010be6 <_fflush_r+0x22>
 8010c30:	0801202c 	.word	0x0801202c
 8010c34:	0801204c 	.word	0x0801204c
 8010c38:	0801200c 	.word	0x0801200c

08010c3c <std>:
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	b510      	push	{r4, lr}
 8010c40:	4604      	mov	r4, r0
 8010c42:	e9c0 3300 	strd	r3, r3, [r0]
 8010c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c4a:	6083      	str	r3, [r0, #8]
 8010c4c:	8181      	strh	r1, [r0, #12]
 8010c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8010c50:	81c2      	strh	r2, [r0, #14]
 8010c52:	6183      	str	r3, [r0, #24]
 8010c54:	4619      	mov	r1, r3
 8010c56:	2208      	movs	r2, #8
 8010c58:	305c      	adds	r0, #92	; 0x5c
 8010c5a:	f7fd fb4b 	bl	800e2f4 <memset>
 8010c5e:	4b05      	ldr	r3, [pc, #20]	; (8010c74 <std+0x38>)
 8010c60:	6263      	str	r3, [r4, #36]	; 0x24
 8010c62:	4b05      	ldr	r3, [pc, #20]	; (8010c78 <std+0x3c>)
 8010c64:	62a3      	str	r3, [r4, #40]	; 0x28
 8010c66:	4b05      	ldr	r3, [pc, #20]	; (8010c7c <std+0x40>)
 8010c68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010c6a:	4b05      	ldr	r3, [pc, #20]	; (8010c80 <std+0x44>)
 8010c6c:	6224      	str	r4, [r4, #32]
 8010c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8010c70:	bd10      	pop	{r4, pc}
 8010c72:	bf00      	nop
 8010c74:	08010f01 	.word	0x08010f01
 8010c78:	08010f23 	.word	0x08010f23
 8010c7c:	08010f5b 	.word	0x08010f5b
 8010c80:	08010f7f 	.word	0x08010f7f

08010c84 <_cleanup_r>:
 8010c84:	4901      	ldr	r1, [pc, #4]	; (8010c8c <_cleanup_r+0x8>)
 8010c86:	f000 b8af 	b.w	8010de8 <_fwalk_reent>
 8010c8a:	bf00      	nop
 8010c8c:	08010bc5 	.word	0x08010bc5

08010c90 <__sfmoreglue>:
 8010c90:	b570      	push	{r4, r5, r6, lr}
 8010c92:	2268      	movs	r2, #104	; 0x68
 8010c94:	1e4d      	subs	r5, r1, #1
 8010c96:	4355      	muls	r5, r2
 8010c98:	460e      	mov	r6, r1
 8010c9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010c9e:	f7fd fb9d 	bl	800e3dc <_malloc_r>
 8010ca2:	4604      	mov	r4, r0
 8010ca4:	b140      	cbz	r0, 8010cb8 <__sfmoreglue+0x28>
 8010ca6:	2100      	movs	r1, #0
 8010ca8:	e9c0 1600 	strd	r1, r6, [r0]
 8010cac:	300c      	adds	r0, #12
 8010cae:	60a0      	str	r0, [r4, #8]
 8010cb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010cb4:	f7fd fb1e 	bl	800e2f4 <memset>
 8010cb8:	4620      	mov	r0, r4
 8010cba:	bd70      	pop	{r4, r5, r6, pc}

08010cbc <__sfp_lock_acquire>:
 8010cbc:	4801      	ldr	r0, [pc, #4]	; (8010cc4 <__sfp_lock_acquire+0x8>)
 8010cbe:	f7ff bc90 	b.w	80105e2 <__retarget_lock_acquire_recursive>
 8010cc2:	bf00      	nop
 8010cc4:	20000659 	.word	0x20000659

08010cc8 <__sfp_lock_release>:
 8010cc8:	4801      	ldr	r0, [pc, #4]	; (8010cd0 <__sfp_lock_release+0x8>)
 8010cca:	f7ff bc8b 	b.w	80105e4 <__retarget_lock_release_recursive>
 8010cce:	bf00      	nop
 8010cd0:	20000659 	.word	0x20000659

08010cd4 <__sinit_lock_acquire>:
 8010cd4:	4801      	ldr	r0, [pc, #4]	; (8010cdc <__sinit_lock_acquire+0x8>)
 8010cd6:	f7ff bc84 	b.w	80105e2 <__retarget_lock_acquire_recursive>
 8010cda:	bf00      	nop
 8010cdc:	2000065a 	.word	0x2000065a

08010ce0 <__sinit_lock_release>:
 8010ce0:	4801      	ldr	r0, [pc, #4]	; (8010ce8 <__sinit_lock_release+0x8>)
 8010ce2:	f7ff bc7f 	b.w	80105e4 <__retarget_lock_release_recursive>
 8010ce6:	bf00      	nop
 8010ce8:	2000065a 	.word	0x2000065a

08010cec <__sinit>:
 8010cec:	b510      	push	{r4, lr}
 8010cee:	4604      	mov	r4, r0
 8010cf0:	f7ff fff0 	bl	8010cd4 <__sinit_lock_acquire>
 8010cf4:	69a3      	ldr	r3, [r4, #24]
 8010cf6:	b11b      	cbz	r3, 8010d00 <__sinit+0x14>
 8010cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cfc:	f7ff bff0 	b.w	8010ce0 <__sinit_lock_release>
 8010d00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010d04:	6523      	str	r3, [r4, #80]	; 0x50
 8010d06:	4b13      	ldr	r3, [pc, #76]	; (8010d54 <__sinit+0x68>)
 8010d08:	4a13      	ldr	r2, [pc, #76]	; (8010d58 <__sinit+0x6c>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8010d0e:	42a3      	cmp	r3, r4
 8010d10:	bf04      	itt	eq
 8010d12:	2301      	moveq	r3, #1
 8010d14:	61a3      	streq	r3, [r4, #24]
 8010d16:	4620      	mov	r0, r4
 8010d18:	f000 f820 	bl	8010d5c <__sfp>
 8010d1c:	6060      	str	r0, [r4, #4]
 8010d1e:	4620      	mov	r0, r4
 8010d20:	f000 f81c 	bl	8010d5c <__sfp>
 8010d24:	60a0      	str	r0, [r4, #8]
 8010d26:	4620      	mov	r0, r4
 8010d28:	f000 f818 	bl	8010d5c <__sfp>
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	60e0      	str	r0, [r4, #12]
 8010d30:	2104      	movs	r1, #4
 8010d32:	6860      	ldr	r0, [r4, #4]
 8010d34:	f7ff ff82 	bl	8010c3c <std>
 8010d38:	68a0      	ldr	r0, [r4, #8]
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	2109      	movs	r1, #9
 8010d3e:	f7ff ff7d 	bl	8010c3c <std>
 8010d42:	68e0      	ldr	r0, [r4, #12]
 8010d44:	2202      	movs	r2, #2
 8010d46:	2112      	movs	r1, #18
 8010d48:	f7ff ff78 	bl	8010c3c <std>
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	61a3      	str	r3, [r4, #24]
 8010d50:	e7d2      	b.n	8010cf8 <__sinit+0xc>
 8010d52:	bf00      	nop
 8010d54:	08011c90 	.word	0x08011c90
 8010d58:	08010c85 	.word	0x08010c85

08010d5c <__sfp>:
 8010d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d5e:	4607      	mov	r7, r0
 8010d60:	f7ff ffac 	bl	8010cbc <__sfp_lock_acquire>
 8010d64:	4b1e      	ldr	r3, [pc, #120]	; (8010de0 <__sfp+0x84>)
 8010d66:	681e      	ldr	r6, [r3, #0]
 8010d68:	69b3      	ldr	r3, [r6, #24]
 8010d6a:	b913      	cbnz	r3, 8010d72 <__sfp+0x16>
 8010d6c:	4630      	mov	r0, r6
 8010d6e:	f7ff ffbd 	bl	8010cec <__sinit>
 8010d72:	3648      	adds	r6, #72	; 0x48
 8010d74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010d78:	3b01      	subs	r3, #1
 8010d7a:	d503      	bpl.n	8010d84 <__sfp+0x28>
 8010d7c:	6833      	ldr	r3, [r6, #0]
 8010d7e:	b30b      	cbz	r3, 8010dc4 <__sfp+0x68>
 8010d80:	6836      	ldr	r6, [r6, #0]
 8010d82:	e7f7      	b.n	8010d74 <__sfp+0x18>
 8010d84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010d88:	b9d5      	cbnz	r5, 8010dc0 <__sfp+0x64>
 8010d8a:	4b16      	ldr	r3, [pc, #88]	; (8010de4 <__sfp+0x88>)
 8010d8c:	60e3      	str	r3, [r4, #12]
 8010d8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010d92:	6665      	str	r5, [r4, #100]	; 0x64
 8010d94:	f7ff fc24 	bl	80105e0 <__retarget_lock_init_recursive>
 8010d98:	f7ff ff96 	bl	8010cc8 <__sfp_lock_release>
 8010d9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010da0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010da4:	6025      	str	r5, [r4, #0]
 8010da6:	61a5      	str	r5, [r4, #24]
 8010da8:	2208      	movs	r2, #8
 8010daa:	4629      	mov	r1, r5
 8010dac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010db0:	f7fd faa0 	bl	800e2f4 <memset>
 8010db4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010db8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dc0:	3468      	adds	r4, #104	; 0x68
 8010dc2:	e7d9      	b.n	8010d78 <__sfp+0x1c>
 8010dc4:	2104      	movs	r1, #4
 8010dc6:	4638      	mov	r0, r7
 8010dc8:	f7ff ff62 	bl	8010c90 <__sfmoreglue>
 8010dcc:	4604      	mov	r4, r0
 8010dce:	6030      	str	r0, [r6, #0]
 8010dd0:	2800      	cmp	r0, #0
 8010dd2:	d1d5      	bne.n	8010d80 <__sfp+0x24>
 8010dd4:	f7ff ff78 	bl	8010cc8 <__sfp_lock_release>
 8010dd8:	230c      	movs	r3, #12
 8010dda:	603b      	str	r3, [r7, #0]
 8010ddc:	e7ee      	b.n	8010dbc <__sfp+0x60>
 8010dde:	bf00      	nop
 8010de0:	08011c90 	.word	0x08011c90
 8010de4:	ffff0001 	.word	0xffff0001

08010de8 <_fwalk_reent>:
 8010de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dec:	4606      	mov	r6, r0
 8010dee:	4688      	mov	r8, r1
 8010df0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010df4:	2700      	movs	r7, #0
 8010df6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010dfa:	f1b9 0901 	subs.w	r9, r9, #1
 8010dfe:	d505      	bpl.n	8010e0c <_fwalk_reent+0x24>
 8010e00:	6824      	ldr	r4, [r4, #0]
 8010e02:	2c00      	cmp	r4, #0
 8010e04:	d1f7      	bne.n	8010df6 <_fwalk_reent+0xe>
 8010e06:	4638      	mov	r0, r7
 8010e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e0c:	89ab      	ldrh	r3, [r5, #12]
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	d907      	bls.n	8010e22 <_fwalk_reent+0x3a>
 8010e12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e16:	3301      	adds	r3, #1
 8010e18:	d003      	beq.n	8010e22 <_fwalk_reent+0x3a>
 8010e1a:	4629      	mov	r1, r5
 8010e1c:	4630      	mov	r0, r6
 8010e1e:	47c0      	blx	r8
 8010e20:	4307      	orrs	r7, r0
 8010e22:	3568      	adds	r5, #104	; 0x68
 8010e24:	e7e9      	b.n	8010dfa <_fwalk_reent+0x12>

08010e26 <__swhatbuf_r>:
 8010e26:	b570      	push	{r4, r5, r6, lr}
 8010e28:	460e      	mov	r6, r1
 8010e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e2e:	2900      	cmp	r1, #0
 8010e30:	b096      	sub	sp, #88	; 0x58
 8010e32:	4614      	mov	r4, r2
 8010e34:	461d      	mov	r5, r3
 8010e36:	da08      	bge.n	8010e4a <__swhatbuf_r+0x24>
 8010e38:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	602a      	str	r2, [r5, #0]
 8010e40:	061a      	lsls	r2, r3, #24
 8010e42:	d410      	bmi.n	8010e66 <__swhatbuf_r+0x40>
 8010e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e48:	e00e      	b.n	8010e68 <__swhatbuf_r+0x42>
 8010e4a:	466a      	mov	r2, sp
 8010e4c:	f000 f8be 	bl	8010fcc <_fstat_r>
 8010e50:	2800      	cmp	r0, #0
 8010e52:	dbf1      	blt.n	8010e38 <__swhatbuf_r+0x12>
 8010e54:	9a01      	ldr	r2, [sp, #4]
 8010e56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010e5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010e5e:	425a      	negs	r2, r3
 8010e60:	415a      	adcs	r2, r3
 8010e62:	602a      	str	r2, [r5, #0]
 8010e64:	e7ee      	b.n	8010e44 <__swhatbuf_r+0x1e>
 8010e66:	2340      	movs	r3, #64	; 0x40
 8010e68:	2000      	movs	r0, #0
 8010e6a:	6023      	str	r3, [r4, #0]
 8010e6c:	b016      	add	sp, #88	; 0x58
 8010e6e:	bd70      	pop	{r4, r5, r6, pc}

08010e70 <__smakebuf_r>:
 8010e70:	898b      	ldrh	r3, [r1, #12]
 8010e72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e74:	079d      	lsls	r5, r3, #30
 8010e76:	4606      	mov	r6, r0
 8010e78:	460c      	mov	r4, r1
 8010e7a:	d507      	bpl.n	8010e8c <__smakebuf_r+0x1c>
 8010e7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010e80:	6023      	str	r3, [r4, #0]
 8010e82:	6123      	str	r3, [r4, #16]
 8010e84:	2301      	movs	r3, #1
 8010e86:	6163      	str	r3, [r4, #20]
 8010e88:	b002      	add	sp, #8
 8010e8a:	bd70      	pop	{r4, r5, r6, pc}
 8010e8c:	ab01      	add	r3, sp, #4
 8010e8e:	466a      	mov	r2, sp
 8010e90:	f7ff ffc9 	bl	8010e26 <__swhatbuf_r>
 8010e94:	9900      	ldr	r1, [sp, #0]
 8010e96:	4605      	mov	r5, r0
 8010e98:	4630      	mov	r0, r6
 8010e9a:	f7fd fa9f 	bl	800e3dc <_malloc_r>
 8010e9e:	b948      	cbnz	r0, 8010eb4 <__smakebuf_r+0x44>
 8010ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ea4:	059a      	lsls	r2, r3, #22
 8010ea6:	d4ef      	bmi.n	8010e88 <__smakebuf_r+0x18>
 8010ea8:	f023 0303 	bic.w	r3, r3, #3
 8010eac:	f043 0302 	orr.w	r3, r3, #2
 8010eb0:	81a3      	strh	r3, [r4, #12]
 8010eb2:	e7e3      	b.n	8010e7c <__smakebuf_r+0xc>
 8010eb4:	4b0d      	ldr	r3, [pc, #52]	; (8010eec <__smakebuf_r+0x7c>)
 8010eb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8010eb8:	89a3      	ldrh	r3, [r4, #12]
 8010eba:	6020      	str	r0, [r4, #0]
 8010ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ec0:	81a3      	strh	r3, [r4, #12]
 8010ec2:	9b00      	ldr	r3, [sp, #0]
 8010ec4:	6163      	str	r3, [r4, #20]
 8010ec6:	9b01      	ldr	r3, [sp, #4]
 8010ec8:	6120      	str	r0, [r4, #16]
 8010eca:	b15b      	cbz	r3, 8010ee4 <__smakebuf_r+0x74>
 8010ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ed0:	4630      	mov	r0, r6
 8010ed2:	f000 f88d 	bl	8010ff0 <_isatty_r>
 8010ed6:	b128      	cbz	r0, 8010ee4 <__smakebuf_r+0x74>
 8010ed8:	89a3      	ldrh	r3, [r4, #12]
 8010eda:	f023 0303 	bic.w	r3, r3, #3
 8010ede:	f043 0301 	orr.w	r3, r3, #1
 8010ee2:	81a3      	strh	r3, [r4, #12]
 8010ee4:	89a0      	ldrh	r0, [r4, #12]
 8010ee6:	4305      	orrs	r5, r0
 8010ee8:	81a5      	strh	r5, [r4, #12]
 8010eea:	e7cd      	b.n	8010e88 <__smakebuf_r+0x18>
 8010eec:	08010c85 	.word	0x08010c85

08010ef0 <_malloc_usable_size_r>:
 8010ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ef4:	1f18      	subs	r0, r3, #4
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	bfbc      	itt	lt
 8010efa:	580b      	ldrlt	r3, [r1, r0]
 8010efc:	18c0      	addlt	r0, r0, r3
 8010efe:	4770      	bx	lr

08010f00 <__sread>:
 8010f00:	b510      	push	{r4, lr}
 8010f02:	460c      	mov	r4, r1
 8010f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f08:	f000 f894 	bl	8011034 <_read_r>
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	bfab      	itete	ge
 8010f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010f12:	89a3      	ldrhlt	r3, [r4, #12]
 8010f14:	181b      	addge	r3, r3, r0
 8010f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010f1a:	bfac      	ite	ge
 8010f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8010f1e:	81a3      	strhlt	r3, [r4, #12]
 8010f20:	bd10      	pop	{r4, pc}

08010f22 <__swrite>:
 8010f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f26:	461f      	mov	r7, r3
 8010f28:	898b      	ldrh	r3, [r1, #12]
 8010f2a:	05db      	lsls	r3, r3, #23
 8010f2c:	4605      	mov	r5, r0
 8010f2e:	460c      	mov	r4, r1
 8010f30:	4616      	mov	r6, r2
 8010f32:	d505      	bpl.n	8010f40 <__swrite+0x1e>
 8010f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f38:	2302      	movs	r3, #2
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	f000 f868 	bl	8011010 <_lseek_r>
 8010f40:	89a3      	ldrh	r3, [r4, #12]
 8010f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010f4a:	81a3      	strh	r3, [r4, #12]
 8010f4c:	4632      	mov	r2, r6
 8010f4e:	463b      	mov	r3, r7
 8010f50:	4628      	mov	r0, r5
 8010f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f56:	f000 b817 	b.w	8010f88 <_write_r>

08010f5a <__sseek>:
 8010f5a:	b510      	push	{r4, lr}
 8010f5c:	460c      	mov	r4, r1
 8010f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f62:	f000 f855 	bl	8011010 <_lseek_r>
 8010f66:	1c43      	adds	r3, r0, #1
 8010f68:	89a3      	ldrh	r3, [r4, #12]
 8010f6a:	bf15      	itete	ne
 8010f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8010f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010f76:	81a3      	strheq	r3, [r4, #12]
 8010f78:	bf18      	it	ne
 8010f7a:	81a3      	strhne	r3, [r4, #12]
 8010f7c:	bd10      	pop	{r4, pc}

08010f7e <__sclose>:
 8010f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f82:	f000 b813 	b.w	8010fac <_close_r>
	...

08010f88 <_write_r>:
 8010f88:	b538      	push	{r3, r4, r5, lr}
 8010f8a:	4d07      	ldr	r5, [pc, #28]	; (8010fa8 <_write_r+0x20>)
 8010f8c:	4604      	mov	r4, r0
 8010f8e:	4608      	mov	r0, r1
 8010f90:	4611      	mov	r1, r2
 8010f92:	2200      	movs	r2, #0
 8010f94:	602a      	str	r2, [r5, #0]
 8010f96:	461a      	mov	r2, r3
 8010f98:	f7f5 fb57 	bl	800664a <_write>
 8010f9c:	1c43      	adds	r3, r0, #1
 8010f9e:	d102      	bne.n	8010fa6 <_write_r+0x1e>
 8010fa0:	682b      	ldr	r3, [r5, #0]
 8010fa2:	b103      	cbz	r3, 8010fa6 <_write_r+0x1e>
 8010fa4:	6023      	str	r3, [r4, #0]
 8010fa6:	bd38      	pop	{r3, r4, r5, pc}
 8010fa8:	20000654 	.word	0x20000654

08010fac <_close_r>:
 8010fac:	b538      	push	{r3, r4, r5, lr}
 8010fae:	4d06      	ldr	r5, [pc, #24]	; (8010fc8 <_close_r+0x1c>)
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	4604      	mov	r4, r0
 8010fb4:	4608      	mov	r0, r1
 8010fb6:	602b      	str	r3, [r5, #0]
 8010fb8:	f7f5 fb63 	bl	8006682 <_close>
 8010fbc:	1c43      	adds	r3, r0, #1
 8010fbe:	d102      	bne.n	8010fc6 <_close_r+0x1a>
 8010fc0:	682b      	ldr	r3, [r5, #0]
 8010fc2:	b103      	cbz	r3, 8010fc6 <_close_r+0x1a>
 8010fc4:	6023      	str	r3, [r4, #0]
 8010fc6:	bd38      	pop	{r3, r4, r5, pc}
 8010fc8:	20000654 	.word	0x20000654

08010fcc <_fstat_r>:
 8010fcc:	b538      	push	{r3, r4, r5, lr}
 8010fce:	4d07      	ldr	r5, [pc, #28]	; (8010fec <_fstat_r+0x20>)
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	4604      	mov	r4, r0
 8010fd4:	4608      	mov	r0, r1
 8010fd6:	4611      	mov	r1, r2
 8010fd8:	602b      	str	r3, [r5, #0]
 8010fda:	f7f5 fb5e 	bl	800669a <_fstat>
 8010fde:	1c43      	adds	r3, r0, #1
 8010fe0:	d102      	bne.n	8010fe8 <_fstat_r+0x1c>
 8010fe2:	682b      	ldr	r3, [r5, #0]
 8010fe4:	b103      	cbz	r3, 8010fe8 <_fstat_r+0x1c>
 8010fe6:	6023      	str	r3, [r4, #0]
 8010fe8:	bd38      	pop	{r3, r4, r5, pc}
 8010fea:	bf00      	nop
 8010fec:	20000654 	.word	0x20000654

08010ff0 <_isatty_r>:
 8010ff0:	b538      	push	{r3, r4, r5, lr}
 8010ff2:	4d06      	ldr	r5, [pc, #24]	; (801100c <_isatty_r+0x1c>)
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	4604      	mov	r4, r0
 8010ff8:	4608      	mov	r0, r1
 8010ffa:	602b      	str	r3, [r5, #0]
 8010ffc:	f7f5 fb5d 	bl	80066ba <_isatty>
 8011000:	1c43      	adds	r3, r0, #1
 8011002:	d102      	bne.n	801100a <_isatty_r+0x1a>
 8011004:	682b      	ldr	r3, [r5, #0]
 8011006:	b103      	cbz	r3, 801100a <_isatty_r+0x1a>
 8011008:	6023      	str	r3, [r4, #0]
 801100a:	bd38      	pop	{r3, r4, r5, pc}
 801100c:	20000654 	.word	0x20000654

08011010 <_lseek_r>:
 8011010:	b538      	push	{r3, r4, r5, lr}
 8011012:	4d07      	ldr	r5, [pc, #28]	; (8011030 <_lseek_r+0x20>)
 8011014:	4604      	mov	r4, r0
 8011016:	4608      	mov	r0, r1
 8011018:	4611      	mov	r1, r2
 801101a:	2200      	movs	r2, #0
 801101c:	602a      	str	r2, [r5, #0]
 801101e:	461a      	mov	r2, r3
 8011020:	f7f5 fb56 	bl	80066d0 <_lseek>
 8011024:	1c43      	adds	r3, r0, #1
 8011026:	d102      	bne.n	801102e <_lseek_r+0x1e>
 8011028:	682b      	ldr	r3, [r5, #0]
 801102a:	b103      	cbz	r3, 801102e <_lseek_r+0x1e>
 801102c:	6023      	str	r3, [r4, #0]
 801102e:	bd38      	pop	{r3, r4, r5, pc}
 8011030:	20000654 	.word	0x20000654

08011034 <_read_r>:
 8011034:	b538      	push	{r3, r4, r5, lr}
 8011036:	4d07      	ldr	r5, [pc, #28]	; (8011054 <_read_r+0x20>)
 8011038:	4604      	mov	r4, r0
 801103a:	4608      	mov	r0, r1
 801103c:	4611      	mov	r1, r2
 801103e:	2200      	movs	r2, #0
 8011040:	602a      	str	r2, [r5, #0]
 8011042:	461a      	mov	r2, r3
 8011044:	f7f5 fae4 	bl	8006610 <_read>
 8011048:	1c43      	adds	r3, r0, #1
 801104a:	d102      	bne.n	8011052 <_read_r+0x1e>
 801104c:	682b      	ldr	r3, [r5, #0]
 801104e:	b103      	cbz	r3, 8011052 <_read_r+0x1e>
 8011050:	6023      	str	r3, [r4, #0]
 8011052:	bd38      	pop	{r3, r4, r5, pc}
 8011054:	20000654 	.word	0x20000654

08011058 <_init>:
 8011058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801105a:	bf00      	nop
 801105c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801105e:	bc08      	pop	{r3}
 8011060:	469e      	mov	lr, r3
 8011062:	4770      	bx	lr

08011064 <_fini>:
 8011064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011066:	bf00      	nop
 8011068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801106a:	bc08      	pop	{r3}
 801106c:	469e      	mov	lr, r3
 801106e:	4770      	bx	lr
